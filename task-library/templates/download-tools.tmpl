#
# Library of common download functions
#

with_backoff() {
  local max_attempts=${ATTEMPTS-5}
  local timeout=${TIMEOUT-1}
  local attempt=1
  local exitCode=0

  while (( $attempt < $max_attempts ))
  do
    if "$@"
    then
      return 0
    else
      exitCode=$?
    fi

    echo "Failure ($@)! Retrying in $timeout.." 1>&2
    sleep $timeout
    attempt=$(( attempt + 1 ))
    timeout=$(( timeout * 2 ))
  done

  if [[ $exitCode != 0 ]]
  then
    echo "Execution failed for: $@" 1>&2
  fi

  return $exitCode
}

download() {
  {{ if .ParamExists "proxy-servers" -}}
  PROXY="{{ index (.Param "proxy-servers") 0 }}"

  if [[ -n "$PROXY" && "$PROXY" != "nil" ]]
  then
    if [ -z ${http_proxy+x} ]; then
      local old_http_proxy="$http_proxy"
    fi
    if [ -z ${https_proxy+x} ]; then
      local old_https_proxy="$https_proxy"
    fi
    export http_proxy="$PROXY"
    export https_proxy="$PROXY"
    local we_set_proxy=1
  fi
  {{ end -}}

{{ if .ParamExists "no-proxy" -}}
  if [ -z ${no_proxy+x} ]; then
    local old_no_proxy="$no_proxy"
  fi
  export no_proxy="{{ .Param "no-proxy" | join "," }}"
  local we_set_no_proxy=1
{{ end }}

  with_backoff curl --connect-timeout 10 --max-time 360 --retry 1 --retry-delay 1 --retry-max-time 40 -sS "$@"

  if [ -z ${we_set_proxy+x} ]; then
    unset http_proxy
    unset https_proxy

    if [ -z ${old_http_proxy+x} ]; then
      export http_proxy="$old_http_proxy"
    fi
    if [ -z ${old_https_proxy+x} ]; then
      export https_proxy="$old_https_proxy"
    fi
  fi

  if [ -z ${we_set_no_proxy+x} ]; then
    unset no_proxy

    if [ -z ${old_no_proxy+x} ]; then
      export no_proxy="$old_no_proxy"
    fi
  fi
}

# get file from local if possible, download otherwise
# if sha256sum = * then skip test
# use explode if uploading an archive, will pull file from exploded path
drp_cache() {
  local name=$1
  local version=$2
  local os=$3
  local arch=$4
  local download=$5
  local sha256sum=$6
  local explode=$7
  DRPFILE="cache/${name}/${version}/${os}-${arch}/${name}"
  # CACHCEFILE is needed for finding files extracted from in an archive
  CACHEFILE=$DRPFILE
  if [[ -n $explode ]]; then
    CACHEFILE="cache/${name}/${version}/${explode}"
    DRPFILE="cache/${name}/${version}/${os}-${arch}.tar.gz"
  fi
  echo "Checking Cache for $CACHEFILE"
  if drpcli files exists $CACHEFILE  > /dev/null ; then
    echo "  Cache HIT. Downloading to $name"
    drpcli files get $CACHEFILE to $name > /dev/null
  else
    echo "  Cache MISS. Downloading from $download"
    download -L --remote-name-all "$download" -o $name
    if [[ -n $explode ]]; then
      echo "  Cache SAVE. Uploading and Exploding $DRPFILE"
      drpcli files upload $name as "$DRPFILE" --explode > /dev/null
    else
      echo "  Cache SAVE. Uploading to $DRPFILE"
      drpcli files upload $name as $DRPFILE  > /dev/null
    fi
  fi
  if [[ $sha256sum == "*" ]]; then
    echo "Skipping sha256sum test (was set to *)"
  else
    echo "Performing sha256sum test of $CACHEFILE"
    CHECK=$(drpcli files exists $CACHEFILE)
    if [[ "$CHECK" == "${CACHEFILE}: ${sha256sum}" ]]; then
      echo "  sha256sum verified"
    else
      echo "  ERROR: sha256sum mismatch.  Was [$CHECK] expected * or [${CACHEFILE}: ${sha256sum}]"
      exit 1
    fi
  fi
}
