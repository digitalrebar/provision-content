---
Name: "storage-mount-devices"
Description: "Mount attached storage usb, cards and drives"
Documentation: |
  Uses array of devices from `storage/mount-devices` to attach storage
  to system.

  If we've need a storage area, this task will mount the requested resources under
  /mnt/storage.
        
  See :ref:`mount_attached_stroage`
RequiredParams:
  - storage/mount-devices
Templates:
- Contents: |-
    #!/bin/bash

    set -e

    {{template "setup.tmpl" .}}

    if [[ ! -e /mnt/storage ]]; then
      echo "adding mount point at /mnt/storage"
      mkdir -p /mnt/storage
    fi

    {{ if .ParamExists "storage/mount-devices" }}
      {{ if empty (.Param "storage/mount-devices") }}
        echo "Skipping: No items in storage/mount-devices"
      {{ else }}
        echo "Starting mounts from storage/mount-devices"
        echo "Attempting to mount attached storage from storage/mount-devices"
        {{range $index, $device := (.Param "storage/mount-devices") }}
          echo "=============== {{$index}}. {{$device.partition}}: {{$device.comment}} ==============="
          if grep -qs {{$device.mount}} /proc/mounts ; then
            echo "{{$device.mount}} already mounted, cannot redefine at {{$device.partition}}... skipping"
          else
            echo "attempting to mount {{$device.mount}} from {{$device.partition}}"
            if lsblk {{$device.disk}} 2>/dev/null >/dev/null ; then
              echo "found disk {{$device.disk}}, checking partition {{$device.partition}}"
              rebuild={{$device.rebuild}}
              if lsblk {{$device.partition}} 2>/dev/null >/dev/null ; then
                rebuild=false
                echo "found partition {{$device.partition}}, mounting to {{$device.mount}}"
                if mount {{$device.partition}} {{$device.mount}} ; then
                  fstype=$(mount | grep /mnt/storage | awk '{ print $5 }')
                  if [[ "$fstype" != "{{$device.type}}" ]] ; then
                    echo "Was $fstype filesystem, needed {{$device.type}} filesystem. rebuild it"
                    rebuild={{$device.rebuild}}
                    umount {{$device.mount}}
                  else
                    echo "Partition is already {{$device.type}}, no change needed"
                  fi
                else
                  echo "could not mount {{$device.partition}} {{$device.mount}}, moving on..."
                fi
              else
                echo "no disk {{$device.disk}}, trying next disk in array"
              fi
              if [[ $rebuild == true ]] ; then
                echo "do rebuild disk flag set - will wipefs and partition"
                wipefs -a {{$device.disk}}
                parted {{$device.disk}} mklabel GPT
                parted {{$device.disk}} mkpart primary 2048s 100%
                mkfs -t {{$device.type}} {{$device.partition}}
                mount {{$device.partition}} {{$device.mount}}
              else
                echo "do not rebuild disk (request was rebuild={{$device.rebuild}})"
              fi
            else
              echo "no {{$device.disk}} found, moving on..."
            fi
          fi

          # Reset the storage if it isn't ours.
          echo "Checking for storage marker"
          if [[ "$(cat /mnt/storage/marker)" != "$RS_UUID" ]] ; then
            echo "Marker didn't match. Potential orphaned files!"
            {{ if $device.reset }}
              echo "Reset=true: Resetting the container space"
              rm -rf /mnt/storage/*
            {{ else }}
              echo "Reset=false: leaving existing files in place"
            {{ end }}
            echo -n "$RS_UUID" > /mnt/storage/marker
          else
            echo "Marker matches, no action"
          fi

        {{else}}
          echo "no attached storage drives defined"
        {{end}}

      {{ end }}
    {{ else }}
      echo "Skipping: No storage/mount-devices array defined"
    {{ end }}

    echo "done"
    exit 0
  Name: storage-mount-devices
Meta:
  type: "install"
  icon: "drive"
  color: "blue"
  title: "RackN Content Copyright 2020"
