---
Name: "dr-server-install"
Description: "Install Digital Rebar Server"
Documentation: |
  Installs DRP Server using the DRPCLI Runner.  Sets DRP-ID to Machine.Name

  The primary use cases for this task are

    1. Creating a remote site for Multi-Site-Manager
    2. Building an HA cluster of DR Servers

  TODO:

    1. make user/password settable

  Will use ``dr-server/install-version`` to download installation, but allows
  override of ``install.sh`` and ``dr-provision.zip`` for custom development
  if placed in DRP ``files/bootstrap``.

  Will automatomatically transfer the DRP license to the machine being created.

  If DRP already installed, will restart DRP and update license

  If Manager installed, will register this DRP as an endpoint.  A valid license is
  REQUIRED for the manager installation!

  *HA Configuration Notes* (enable by setting ``ha-id``).

  It is anticipated at all HA machines share a profile since these settings are the
  same (except ``ha-passive``) for all HA cluster machines.

  All ``ha-*`` params are required for HA configuration.

  For operators,
  * this feature makes it easy to create new edge sites using DRP Manager.
  * this feature makes it easy to create HA clusters

  For developers,
  * this feature enables rapid testing of new dr-server binaries.

  When the adhoc param ``dr-server/replace-drp`` is defined, the task will updated
  the installed *dr-provision* binary with one from the download location provided.

ExtraClaims:
  - scope: "files"
    action: "get"
    specific: "*"
  - scope: "contents"
    action: "get"
    specific: "rackn-license"
  - scope: "endpoints"
    action: "*"
    specific: "*"
RequiredParams:
  - "dr-server/install-version"
OptionalParams:
  - "dr-server/ha-id"
  - "dr-server/ha-address"
  - "dr-server/ha-passive"
  - "dr-server/zip-url"
  - "dr-server/replace-drp"
Templates:
  - Name: "drp-install"
    Contents: |-
      #!/bin/bash
      # RackN Copyright 2020

      set -e
      {{ template "setup.tmpl" .}}
      {{ template "download-tools.tmpl" .}}

      {{ $drpid := (regexFind "[a-zA-Z0-9-]+" .Machine.Name) }}
      {{ $ha_ip := "" }}
      {{ if .ParamExists "dr-server/ha-address" }}
        {{ $a := split "/" (.Param "dr-server/ha-address") }}
        {{ $ha_ip = $a._0 }}
      {{ end }}

      echo "getting license file"
      drpcli contents show rackn-license > rackn-license.json

      echo "verify that endpoint {{$drpid}} is in license"
      epl=$(cat rackn-license.json | jq '.sections.profiles["rackn-license"].Params["rackn/license-object"].Endpoints | contains(["{{$drpid}}"])')
      anymatch=$(cat rackn-license.json | jq '.sections.profiles["rackn-license"].Params["rackn/license-object"].Endpoints | contains(["MatchAny"])')
      if [[ "$epl" == "true" || "$anymatch" == "true" ]] ; then
        echo "endpoint found!"
      else
        echo "endpoint missing, attempt to add to license"
        # TODO: this should move to a RackN URL at some point
        curl -X GET "https://1p0q9a8qob.execute-api.us-west-2.amazonaws.com/v40/license" \
          -H "rackn-contactid: ${CONTACTID}" \
          -H "rackn-ownerid: ${OWNERID}" \
          -H "rackn-endpointid: ${MGR_LBL}" \
          -H "rackn-key: ${KEY}" \
          -H "rackn-version: ${VERSION}" \
          -o rackn-license.json
      fi

      FORCE=""
      if [[ "$(systemctl is-active dr-provision)" == "active" ]] ; then
        echo "DRP already installed, restarting in case config was changed"
        systemctl stop dr-provision
        FORCE="--force"
      fi

      echo "Download Install.sh"
      rm -f install.sh
      if drpcli files exists "bootstrap/install.sh"; then
        drpcli files download "bootstrap/install.sh" > install.sh
      else
        download -L --remote-name-all http://get.rebar.digital/{{ .Param "dr-server/install-version"}} -o install.sh
        exit 1
      fi
      chmod +x install.sh

      {{ if .ParamExists "dr-server/zip-url" }}
      echo "Downloading zip from {{ .Param "dr-server/zip-url" }}"
      download -L --remote-name-all "{{ .Param "dr-server/zip-url" }}" -o dr-provision.zip
      {{ else }}
      echo "Downloading zip from catalog as per install.sh --version {{ .Param "dr-server/install-version"}}"
      {{ end }}

      echo "Fix up HA options - still more work to do"
      {{ if and (.Param "dr-server/ha-passive") (.ParamExists "dr-server/ha-address") }}
      HA_TOKEN="$(drpcli -U $RS_USER -P $RS_PASS -E {{ $ha_ip }} users token rocketskates ttl 3y |jq -r '.Token')"
      {{ else }}
      HA_TOKEN="ACTIVE_OR_SINGLE_NOT_NEEDED"
      {{ end }}

      HA_ARGS=""
      {{ if .ParamExists "dr-server/ha-address" }}
      HA_ARGS="--ha-enabled --ha-token=$HA_TOKEN --ha-address={{.Param "dr-server/ha-address"}}"
      {{ if .ParamExists "dr-server/ha-interface" }}
      HA_ARGS+=" --ha-interface={{.Param "dr-server/ha-interface"}}"
      {{ else }}
      echo "dr-server/ha-interface MUST be specified for HA operations"
      exit 1
      {{ end }}
      {{ if .Param "dr-server/ha-passive" }}
      HA_ARGS+=" --ha-passive"
      {{ end }}
      {{ end }}

      echo "Run Install.sh with DRP ID {{ $drpid }}"
      ./install.sh \
        {{ if .ParamExists "dr-server/zip-url" -}}--zip-file=dr-provision.zip{{else}}--version={{ .Param "dr-server/install-version"}}{{ end -}} \
        --drp-id={{ $drpid }} \
      {{ if .ParamExists "dr-server/ha-id" }}    --ha-id={{.Param "dr-server/ha-id"}}{{ end }} \
        $HA_ARGS \
        $FORCE \
        --systemd \
        --no-content \
        install
      systemctl stop dr-provision

      {{ if .ParamExists "dr-server/zip-url" }}
      echo "Cleanup ZIP"
      rm dr-provision.zip
      {{ end }}

      {{ if .ParamExists "dr-server/replace-drp" }}
      # development only feature, ad hoc param replaces the binary from a known location
      echo "WARNING: Replacing dr-provision binary from {{ .Param "dr-server/replace-drp" }}"
      BIN=$(which dr-provision)
      download -L --remote-name-all "{{ .Param "dr-server/replace-drp" }}" -o $BIN
      chmod +x $BIN
      {{ if .ParamExists "dr-server/ha-address" }}
      echo "just in case, clear the ha interface"
      ip addr del {{ .Param "dr-server/ha-address" }} dev {{ .Param "dr-server/ha-interface" }} || true
      {{ end }}
      echo "$($BIN --version)"
      {{ end }}

      echo "start dr-provision"
      systemctl daemon-reload
      systemctl start dr-provision

      RS_USER="rocketskates"
      RS_PASS="r0cketsk8ts"

      # Do the things to ourselves
      (
        unset RS_ENDPOINT
        unset RS_TOKEN
        unset RS_LOCAL_PROXY

        echo "Wait for API to be up"
        drpcli -U $RS_USER -P $RS_PASS -E https://127.0.0.1:8092 info status | jq .API

      {{ if or (not (.Param "dr-server/ha-passive")) (not (.ParamExists "dr-server/ha-id")) }}
        echo "DRP is active - upload license"
        if [[ -f rackn-license.json ]] ; then
          echo "upload rackn-license"
          drpcli -U $RS_USER -P $RS_PASS -E https://127.0.0.1:8092 contents upload rackn-license.json
          drpcli -U $RS_USER -P $RS_PASS -E https://127.0.0.1:8092 contents show rackn-license > /tmp/l1.json
          cp rackn-license.json /tmp/l2.json
          rm -f rackn-license.json
        else
          echo "ERROR: could not find license file"
          exit 1
        fi
        echo "Test API"
        drpcli -U $RS_USER -P $RS_PASS -E https://127.0.0.1:8092 info status | jq .API
      {{ else }}
        echo "DRP is passive - License is not needed."
      {{ end }}
      )

      manager="$(drpcli info get | jq -r .manager)"
      if [[ "$manager" == "true" ]] ; then
        # if no ha-address (not HA mode) or we are active we need to register
      {{ if or (not (.Param "dr-server/ha-passive")) (not (.ParamExists "dr-server/ha-address")) }}
        {{ $ha_id := $drpid }}
        {{ $ha_address := .Machine.Address}}
        {{ if .ParamExists "dr-server/ha-address" }}
          {{ $ha_address = $ha_ip }}
          {{ $ha_id = .Param "dr-server/ha-id" }}
        {{ end }}
        if drpcli endpoints exists {{ $ha_id }} ; then
          echo "Endpoint already registered in Manager"
        else
          echo "Manager, register new endpoint"
          drpcli endpoints create '{"Id":"{{ $ha_id }}", "Params":{"manager/url": "https://{{ $ha_address }}:8092"} }'
          drpcli endpoints set "{{ $ha_id }}" param "manager/username" to "$RS_USER"
          drpcli endpoints set "{{ $ha_id }}" param "manager/password" to "$RS_PASS"
        fi
      {{ else }}
        echo "Don't register passive nodes"
      {{ end }}
      else
        echo "Not a manager, no action"
      fi

      echo "Done"
      exit 0
Meta:
  icon: "heart"
  color: "green"
  title: "RackN Content"
  feature-flags: "sane-exit-codes"
