---
Name: "dr-server-install"
Description: "Install Digital Rebar Server"
Documentation: |
  Installs DRP Server using the DRPCLI Runner.  Sets DRP-ID to Machine.Name

  The primary use cases for this task are

    1. Creating a remote site for Multi-Site-Manager
    2. Building an HA cluster of DR Servers

  TODO:

    1. make user/password settable

  Requires ``install.sh`` and ``dr-provision.zip`` to be in DRP ``files/bootstrap``.

  Does nothing if DRP already installed.

  If Manager installed, will register this DRP as an endpoint.

  *HA Configuration Notes* (enable by setting ``ha-id``).

  It is anticipated at all HA machines share a profile since these settings are the
  same (except ``ha-passive``) for all HA cluster machines.

  Create the ``ha-token`` using ``drpcli users token rocketskates ttl 3y | jq -r '.Token'``

  All ``ha-*`` params are required for HA configuration.

  **Developer Feature**

  This featre enables rapid testing of new dr-server binaries.

  When the adhoc param ``dr-server/replace-drp`` is defined, the task will updated
  the installed *dr-provision* binary with one from the download location provided.

ExtraClaims:
  - scope: "files"
    action: "get"
    specific: "*"
  - scope: "contents"
    action: "get"
    specific: "rackn-license"
OptionalParams:
  - "dr-server/ha-id"
  - "dr-server/ha-address"
  - "dr-server/ha-token"
  - "dr-server/ha-passive"
  - "dr-server/zip-url"
  - "dr-server/replace-drp"
Templates:
  - ID: "dr-server-ha.conf.tmpl"
    Name: "dr-server-ha.conf."
    Path: "/etc/systemd/system/dr-provision.service.d/20-ha.conf"
  - Name: "drp-install"
    Contents: |-
      #!/bin/bash
      # RackN Copyright 2020

      set -e
      {{ template "setup.tmpl" .}}
      {{ template "download-tools.tmpl" .}}

      {{ $drpid := (regexFind "[a-zA-Z0-9-]+" .Machine.Name) }}

      if [[ -f /etc/systemd/system/dr-provision.service.d/20-ha.conf ]]; then
        echo "HA configuration file exists"
      else
        echo "No HA configuration detected"
      fi

      echo "getting license file"
      drpcli contents show rackn-license > rackn-license.json

      if [[ "$(systemctl is-active dr-provision)" != "active" ]] ; then

        if drpcli files exists "bootstrap/install.sh"; then

          echo "Download Components"
          drpcli files download "bootstrap/install.sh" > install.sh
          {{ if .ParamExists "dr-server/zip-url" }}
          echo "Downloading zip from {{ .Param "dr-server/zip-url" }}"
          download -L --remote-name-all "{{ .Param "dr-server/zip-url" }}" -o dr-provision.zip
          {{ else }}
          echo "Downloading zip from catalog as per install.sh"
          {{ end }}
          chmod +x install.sh

          echo "Run Install.sh with DRP ID {{ $drpid }}" 
          ./install.sh install {{ if .ParamExists "dr-server/zip-url" -}}--zip-file=dr-provision.zip{{ end -}} \
            --drp-id={{ $drpid }} \
            --systemd \
            --no-content
          systemctl stop dr-provision

          {{ if .ParamExists "dr-server/zip-url" }}
          echo "Cleanup ZIP"
          rm dr-provision.zip
          {{ end }}

        else
          echo "Could not find required install.sh file in /bootstrap"
          exit 1
        fi
      else
        echo "DRP already installed, restarting in case config was changed"
        systemctl stop dr-provision
      fi

      {{ if .ParamExists "dr-server/replace-drp" }}
      # development only feature, ad hoc param replaces the binary from a known location
      echo "WARNING: Replacing dr-provision binary from {{ .Param "dr-server/replace-drp" }}"
      BIN=$(which dr-provision)
      systemctl stop dr-provision
      download -L --remote-name-all "{{ .Param "dr-server/replace-drp" }}" -o $BIN
      chmod +x $BIN
      {{ if .ParamExists "dr-server/ha-address" }}
      echo "just in case, clear the ha interface"
      ip addr del {{ .Param "dr-server/ha-address" }} dev {{ .Param "dr-server/ha-interface" }} || true
      {{ end }}
      echo "$($BIN --version)"
      {{ end }}

      echo "start dr-provision"
      systemctl daemon-reload
      systemctl start dr-provision

      RS_USER="rocketskates"
      RS_PASS="r0cketsk8ts"
      unset RS_ENDPOINT
      unset RS_TOKEN
      unset RS_LOCAL_PROXY

      {{ if and (not (.Param "dr-server/ha-passive")) (.ParamExists "dr-server/ha-address") }}
      {{ if not (.ParamExists "dr-server/ha-token") }}
      echo "HA Token: $(drpcli -U $RS_USER -P $RS_PASS -E {{ .Param "dr-server/ha-address" }} users token rocketskates ttl 3y |jq -r '.Token')"
      {{ else }}
      echo "HA Token already exists - no not regenerate"
      {{ end }}
      {{ else }}
      echo "Not generating HA Token.  Machine must be NOT ha-passive and have ha-address"
      {{ end }}

      {{ if or (not (.Param "dr-server/ha-passive")) (not (.ParamExists "dr-server/ha-id")) }}
      if [[ -f rackn-license.json ]] ; then
        echo "upload rackn-license"
        drpcli -U $RS_USER -P $RS_PASS -E https://127.0.0.1:8091 contents upload rackn-license.json
        rm rackn-license.json
      fi
      echo "Test API"
      drpcli -U $RS_USER -P $RS_PASS -E https://127.0.0.1:8091 info status | jq .API
      {{ else }}
      echo "DRP is passive - API is not active"
      {{ end }}

      echo "Done"
      exit 0
Meta:
  icon: "heart"
  color: "green"
  title: "RackN Content"
  feature-flags: "sane-exit-codes"
