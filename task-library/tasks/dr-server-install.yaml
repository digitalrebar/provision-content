---
Name: "dr-server-install"
Description: "Install Digital Rebar Server via Ansible"
Documentation: |
  Installs DRP Server using the Ansibile Context.  Sets DRP-ID to Machine.Name

  NOTE: All connections from FROM THE MANAGER, the provisioned site does NOT need
  to connect to the manager.

  LIMITATIONS:
  * firewall features only available for Centos family

  The primary use cases for this task are

    1. Creating a remote site for Multi-Site-Manager
    1. Building Development installations for rapid testing

  Requires install.sh and zip artifacts to be ``bootstrap/*``

  Will transfer the DRP license to the machine being created.

  If DRP is already installed, will restart DRP and update license

  For operators,this feature makes it easy to create new edge sites using DRP Manager.

ExtraClaims:
  - scope: "files"
    action: "*"
    specific: "*"
  - scope: "contents"
    action: "get"
    specific: "rackn-license"
  - scope: "endpoints"
    action: "*"
    specific: "*"
OptionalParams:
  - "dr-server/install-drpid"
  - "dr-server/initial-password"
  - "dr-server/initial-user"
Templates:
  - Name: "playbook.yaml"
    Path: "playbook.yaml"
    Contents: |-
      ---
      ### Run DRP Install/Upgrade via Ansible
      - hosts: all
        remote_user: "{{ .Param "rsa/key-user" }}"
        connection: "ssh"
        gather_facts: false
        debugger: {{ if .Param "rs-debug-enable" }}on_failed{{ else }}never{{ end }}
        become: true

        tasks:

          - name: Wait for the instances to boot by checking the ssh port
            wait_for_connection:
              timeout: 300

          - name: "What is my DRP ID?"
            debug:
              var: drpid

          - name: check if dr-provision is running (makes join idempotent)
            service_facts:

          - name: "dr-provision is installed? - upgrades if dr-provision is installed"
            debug:
              msg: "DRP status is {{`{{ services['dr-provision.service'].status }}`}}"
            when: services["dr-provision.service"] is defined

          {{range $index, $port := .Param "network/firewall-ports" }}
          - name: "enable firewall ports... enable {{$port}} for DRP server"
            {{ if contains "/" $port -}}
            shell: "firewall-cmd --permanent --add-port={{$port}}"
            {{ else -}}
            shell: "firewall-cmd --permanent --add-port={{$port}}"
            {{ end -}}
            when: services["firewalld.service"] is defined
          {{end}}

          - name: "Bounce firewalld"
            shell: "firewall-cmd --reload"
            when: services["firewalld.service"] is defined

          - name: "transfer install script"
            copy:
              src: "./install.sh"
              dest: "./install.sh"
              mode: 0755

          - name: "transfer license"
            copy:
              src: "./rackn-license.json"
              dest: "./rackn-license.json"
              mode: 0555

          - name: "transfer dr-provision.zip"
            copy:
              src: "./dr-provision.zip"
              dest: "./dr-provision.zip"
              mode: 0555
            when: has_zip == "true"

          - name: "run install.sh script install mode (download ZIP)"
            become: true
            shell: "./install.sh --startup --drp-id={{`{{drpid}}`}} --no-content --systemd --bootstrap --zip-file=dr-provision.zip --no-content --start-runner --drp-password={{ .Param "dr-server/initial-password" }} --drp-user={{ .Param "dr-server/initial-user" }} --initial-contents=\"./rackn-license.json\" install"
            when: services["dr-provision.service"] is not defined and has_zip == "true"
            register: shell_result1

          - name: "run install.sh script install mode (use local ZIP)"
            become: true
            shell: "./install.sh --startup --drp-id={{`{{drpid}}`}} --no-content --systemd --bootstrap --no-content --start-runner --drp-password={{ .Param "dr-server/initial-password" }} --drp-user={{ .Param "dr-server/initial-user" }} --initial-contents=\"./rackn-license.json\" install"
            when: services["dr-provision.service"] is not defined and has_zip == "false"
            register: shell_result1

          - name: "install output log"
            debug: 
              var: shell_result1.stdout_lines
            when: services["dr-provision.service"] is not defined

          - name: "change rocketskates password"
            shell: "/usr/local/bin/drpcli -P {{ .Param "dr-server/initial-password" }} -U {{ .Param "dr-server/initial-user" }} users password rocketskates {{ .Param "dr-server/initial-password" }}"
            ignore_errors: true
            when: services["dr-provision.service"] is not defined

          - name: "upgrading.... via drpcli system upgrade"
            become: true
            shell: "/usr/local/bin/drpcli -P {{ .Param "dr-server/initial-password" }} -U {{ .Param "dr-server/initial-user" }} system upgrade dr-provision.zip"
            when: services["dr-provision.service"] is defined
            ignore_errors: true
            register: shell_result2

          - name: "upgrading... output log"
            debug: 
              var: shell_result2.stdout_lines
            when: services["dr-provision.service"] is defined

          - name: "make sure license is uploaded"
            become: true
            shell: "/usr/local/bin/drpcli -P {{ .Param "dr-server/initial-password" }} -U {{ .Param "dr-server/initial-user" }} contents upload rackn-license.json"
            ignore_errors: true

          - name: "retrieve version of dr-provision"
            become: true
            shell: "/usr/local/bin/drpcli  -P {{ .Param "dr-server/initial-password" }} -U {{ .Param "dr-server/initial-user" }} info get"
            register: drp_version

          - name: "version of dr-provision"
            debug:
              var: (drp_version.stdout | from_json).version

          - name: check for dr-provision pids (makes sure we started)
            become: true
            shell: pidof dr-provision
            register: drprovision_pids
            ignore_errors: true

          - name: Printing the process IDs obtained
            debug:
              msg: "PIDS of dr-provision: {{`{{drprovision_pids.stdout}}`}}"
  - Name: "drp-install"
    Contents: |-
      #!/bin/bash
      # RackN Copyright 2020

      set -e
      {{ template "setup.tmpl" .}}
      {{ template "download-tools.tmpl" . }}

      {{ if .ParamExists "dr-server/install-drpid" }}
      DRPID={{ regexFind "[a-zA-Z0-9-]+" (.Param "dr-server/install-drpid") }}
      echo "Using dr-server/install-drpid is $DRPID"
      {{ else }}
      if drpcli machines meta get $RS_UUID "dr-server/install-drpid" > /dev/null 2> /dev/null; then
        echo "recovering DRPID from Meta.dr-server/install-drpid"
        DRPID=$(drpcli machines meta get $RS_UUID "dr-server/install-drpid" | jq -r .)
      else
        echo "buiding DRPID from Name"
        DRPID={{ regexFind "[a-zA-Z0-9-]+" (list "site" .Machine.Name | join "-") }}
      fi
      drpcli machines add $RS_UUID param "dr-server/install-drpid" to "$DRPID" > /dev/null
      echo "dr-server/install-drpid not set... adding $DRPID"
      {{ end }}

      echo "==== DRP Server Install for ${DRPID} ===="

      echo "getting license file (will be copied to target)"
      drpcli contents show rackn-license > rackn-license.json

      echo "  verify that endpoint $DRPID is in license"
      epl=$(cat rackn-license.json | jq ".sections.profiles[\"rackn-license\"].Params[\"rackn/license-object\"].Endpoints | contains([\"$drpid\"])")
      anymatch=$(cat rackn-license.json | jq '.sections.profiles["rackn-license"].Params["rackn/license-object"].Endpoints | contains(["MatchAny"])')
      if [[ "$epl" == "true" || "$anymatch" == "true" ]] ; then
        echo "  endpoint found!"
      else
        echo "  endpoint missing, attempt to add to license"
        # TODO: this should move to a RackN URL at some point
        curl -X GET "https://1p0q9a8qob.execute-api.us-west-2.amazonaws.com/v40/license" \
          -H "rackn-contactid: ${CONTACTID}" \
          -H "rackn-ownerid: ${OWNERID}" \
          -H "rackn-endpointid: ${MGR_LBL}" \
          -H "rackn-key: ${KEY}" \
          -H "rackn-version: ${VERSION}" \
          -o rackn-license.json
      fi

      if drpcli files exists bootstrap/install.sh >/dev/null 2>/dev/null ; then
        echo "downloading install.sh to cache (will be copied to target)"
        drpcli files download bootstrap/install.sh to install.sh >/dev/null
      else
        echo "using files/bootstrap/install.sh (will be copied to target)"
        drp_cache "install.sh" "stable" "linux" "amd64" "http://get.rebar.digital/stable" "*"
      fi

      has_zip="false"
      if drpcli files exists bootstrap/dr-provision.zip >/dev/null 2>/dev/null ; then
        echo "using files/bootstrap/dr-provision.zip (will be copied to target)"
        drpcli files download bootstrap/dr-provision.zip to dr-provision.zip >/dev/null
        has_zip="true"
      fi

      # we need a keypair for Ansible
      echo "Retrieving SSH key from Machine Params rsa/key-*"
      tee rsa-{{.Machine.Name}} >/dev/null << EOF
      {{.Param "rsa/key-private" | replace "|" "\n" }}
      EOF
      chmod 600 rsa-{{.Machine.Name}}

      export ANSIBLE_HOST_KEY_CHECKING=False

      echo "Run Playbook using $(ansible-playbook --version)"
      ansible-playbook \
        -i {{.Machine.Address}}, \
        --private-key=rsa-{{.Machine.Name}} \
        --extra-vars "drpid=$DRPID has_zip=$has_zip" \
        playbook.yaml

      manager="$(drpcli info get | jq -r .manager)"
      if [[ "$manager" == "true" ]] ; then

        if drpcli endpoints exists $DRPID >/dev/null 2>/dev/null ; then
          echo "Endpoint $DRPID already registered in Manager"
        else
          tee ep.json >/dev/null << EOF
      {
        "Id":"$DRPID",
        "Description": "{{ .Machine.Name }}",
        "Params":{
          "manager/url": "https://{{ .Machine.Address }}:8092"
        },
        "Meta":{{ .Machine.Meta | toJson }}
      }
      EOF

          echo "This DRP is a Manager, register new endpoint $DRPID (from machine {{.Machine.Name}})"
          drpcli endpoints create - < ep.json > /dev/null
          drpcli endpoints meta add $DRPID key "Uuid" to "{{ .Machine.Uuid }}" > /dev/null
          drpcli endpoints set $DRPID param "manager/username" to "{{ .Param "dr-server/initial-user" }}" > /dev/null
          drpcli endpoints set $DRPID param "manager/password" to "{{ .Param "dr-server/initial-password" }}" > /dev/null
  
          echo "let's let things settle for 30 seconds"
          sleep 30

          drpcli machines meta set $RS_UUID param "icon" to "chess rook"
        fi

        if [[ "$(drpcli endpoints show $DRPID | jq -r .Available)" == "true" ]]; then
          echo "Yes: Endpoint $DRPID is Available."
        else
          echo "WARNING: Endpoint $DRPID is NOT available"
        fi

      else
        echo "This DRP is NOT a manager, do not register new endpoint"
      fi

      echo "Done"
      exit 0
Meta:
  type: "install"
  icon: "heart"
  color: "blue"
  title: "RackN Content"
  feature-flags: "sane-exit-codes"
