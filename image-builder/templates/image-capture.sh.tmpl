#!/bin/bash
# Image builder setup tasks
# origin: rackn/image-builder
{{template "setup.tmpl" .}}

# ensure we escape any wildcards so shell globbing doesn't cause
# this to fail
TAG=$(echo {{ .Env.OS.Name }} | tr '[:upper:]' '[:lower:]')
IMAGE=/RS_IMAGE
# exclude file needs help - 'tar' argument processing is extremely fragile
#EXCLUDE_FILE="${IMAGE}/exclude-list.txt"
[[ -d $IMAGE ]] && rm -rf "$IMAGE"
mkdir -p "$IMAGE"

# use Params on DRP instead of vars
export RS_BUILDER_BASE="${IMAGE}/tarball"
export RS_BUILDER_TARNAME="${RS_BUILDER_BASE}.tgz"
export RS_BUILDER_MANIFEST="${RS_BUILDER_BASE}-MANIFEST.txt"
export RS_BUILDER_TARFILE="${RS_BUILDER_TARNAME}"
export RS_BUILDER_DATE="`date`"

DSTAMP=`date +%Y%m%d-%H%M%S`
export RS_IMAGE_IDENT=`uuidgen | md5sum | awk ' { print $1 } ' | cut -c 1-10`

UP_PATH="$(echo "{{ .Param "image-builder/upload-path" -}}" | sed 's|/$||g')"
UP_NAME="$(echo "{{ .Param "image-builder/upload-rootfs-name" -}}" | sed 's|.tgz||g')"
UP_MANI="$(echo "{{ .Param "image-builder/upload-manifest-name" -}}" | sed 's|.txt||g')"

export RS_UPLOAD_TARBALL="${UP_PATH}/${UP_NAME}.tgz"
export RS_UPLOAD_MANIFEST="${UP_PATH}/${UP_MANI}.txt"
#export RS_UPLOAD_TARBALL="$UP_PATH/$TAG-rootfs-$DSTAMP-$RS_IMAGE_IDENT.tgz"
#export RS_UPLOAD_MANIFEST="$UP_PATH/$TAG-MANIFEST-$DSTAMP-$RS_IMAGE_IDENT.txt"

# branding
for F in issue issue.net
do
    # first pass, backup the issue files, if we re-run this prevents
    # duplicate Rebar messages in the issue files
    BKUP=/etc/$F.rebar.backup
    [[ -r "$BKUP" ]] && cp $BKUP /etc/$F || cp /etc/$F $BKUP

    cat <<- ISSUE >> /etc/$F

          ######  ###  #####  ### #######   #    #
          #     #  #  #        #     #    #   #  #
          #     #  #  #  ####  #     #   #     # #
          #     #  #  #     #  #     #   # ### # #
          ######  ###  #####  ###    #   #     # #######

             ######  ####### ######     #    ######
             #     # #       #     #  #   #  #     #
             ######  #####   ######  #     # ######
             #   #   #       #     # # ### # #   #
             #    #  ####### ######  #     # #    #

          This image built with Digital Rebar Provision.
                       (c) RackN, Inc.

                IMAGE IDENTITY: ${RS_IMAGE_IDENT}
                BUILD DATE: ${RS_BUILDER_DATE}

ISSUE
done

printf "\n\nImage Identity: ${RS_IMAGE_IDENT}\n\n
Image built with Digital Rebar Provision.  (c) RackN, Inc.\n\n" > /etc/motd
# we expect we're operating in the chroot environment, so go to root
# in the future, we will parameterize this if we're booting an already
# built system and not chroot'd to the installed structure
cd /

# build up the exclude file
{{ if ( .Param "image-builder/additional-excludes" ) -}}
echo "Building exclude file ('$EXCLUDE_FILE') for final tar..."
echo "Adding entries:"
#rm -f $EXCLUDE_FILE
{{ range $exclude := ( .Param "image-builder/additional-excludes" ) -}}
#echo "{{ $exclude }}" | tee $EXCLUDE_FILE
XCLD="{{$exclude}}"
echo "$XCLD"
EXCLUDES+="--exclude=$XCLD "
{{ end -}}
echo "Done building exclude list..."
{{ end -}}

# for short tests, use var/ directory
#  -czvf ${RS_BUILDER_TARNAME} ./var/                  \

echo ""
echo "Beginning tar capture of image at $(date)..."
export GZIP="-9"

save=$-
set -x

# should move all of these excludes to image-builder/additional-excludes and get the
# --exclude-from=FILE option working right
tar                                                          \
    --exclude={.${IMAGE}\*,./proc/\*,./sys/\*,./tmp/\*,./dev/\*,./var/tmp/\*,./run/\*,./root/post-install.log} ${EXCLUDES} \
    --numeric-owner                                          \
    {{ .Param "image-builder/additional-tar-options" }}      \
    -czvf ${RS_BUILDER_TARNAME} .                            \
    > ${RS_BUILDER_MANIFEST}                                 \
    2> >(tee -a ${RS_BUILDER_BASE}-ERRORS.txt >&2)

# restore to original 'x' value
[[ $save =~ x ]] && set -x || set +x

echo "Tar capture completed at $(date)..."
# both STDOUT and STDERR to screen and file
#  > >(tee -a ${RS_BUILDER_MANIFEST})             \
#  2> >(tee -a ${RS_BUILDER_BASE}-ERRORS.txt >&2)
# end tar command

MD5=`md5sum ${RS_BUILDER_TARFILE} | awk ' { print $1 } '`

echo ""

if [[ -f $RS_BUILDER_TARFILE ]]
then
    echo "Image Builder created image information: "
    echo "--------------------------------------------------------------------------------"
    echo "        filename:  $RS_BUILDER_TARFILE   "
    echo "           ident:  $RS_IMAGE_IDENT       "
    echo "            date:  $RS_BUILDER_DATE      "
    echo "            size:  $(stat -c '%s' $RS_BUILDER_TARFILE)                "
    echo "          md5sum:  $MD5                  "
    echo "  upload tarball:  $RS_UPLOAD_TARBALL    "
    echo " upload manifest:  $RS_UPLOAD_MANIFEST   "
fi

# build_json_manifest !!
# insert above info, plus files manifest, etc... should be JSON so it can be "consumed"

echo ""
echo "Beginning image upload process to DRP Endpoint..."
echo "Uploading RootFS image..."
drpcli files upload "${RS_BUILDER_TARFILE}"  as "${RS_UPLOAD_TARBALL}"
echo "Uploading image manifest..."
drpcli files upload "${RS_BUILDER_MANIFEST}" as "${RS_UPLOAD_MANIFEST}"

echo ""

