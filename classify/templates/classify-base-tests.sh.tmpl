###
#  Generally a fallthrough function, that will always succeed if Requested###
function cl_always() {
  echo "pass"
}

function always() {
  cl_always
}

###
#  Determine if the Machine is in a given in_subnet
###
function cl_in_subnet() {
  local _cidr="$1"
  local _prefix=${_cidr#*/}
  local _myaddr="{{.Machine.Address}}/$_prefix"

  local _mynet=$(ipcalc -n $_myaddr)
  local _thenet=$(ipcalc -n $_cidr)

  if [[ "$_mynet" == "$_thenet" ]] ; then
    echo "pass"
  else
    echo "fail"
  fi
}

function in_subnet() {
  cl_in_subnet "$1"
}

###
#  Determine if the Machine has the given MAC address
###
function cl_has_mac() {
  # normalize the input MAC for comparison
  local _mac_match=$(echo "$1" | tr -d " :-" | tr '[:upper:]' '[:lower:]')
  cl_get_my_mac    # sets global var MY_MAC_ADDR
  # strip it down to 12 chars (tosses 01 type if exists)
  _mac_match=${_mac_match:(-12)}

  if [[ "$_mac_match" == "$MY_MAC_ADDR" ]]; then
    echo "pass"
  else
    echo "fail"
  fi
}

function has_mac() {
  cl_has_mac "$1"
}

###
#  get the Machines boot interface Mac Addr
#  NOTE: we shouuld NOT echo anything out here
###
function get_my_mac() {
  bootif_re='BOOTIF=([^ ]+)'
  local _macaddr="UNKNOWN"
  if [[ $(cat /proc/cmdline) =~ $bootif_re ]]; then
    _macaddr="${BASH_REMATCH[1]//-/:}"
    _macaddr=$(echo $_macaddr | tr -d " :-" | tr '[:upper:]' '[:lower:]')
    _macaddr=${_macaddr:(-12)}
  else
    xiterr 1 "Unable to 'cat /proc/cmdline' and rematch successfully"
  fi
  MY_MAC_ADDR="$_macaddr"
}

function cl_get_my_mac() {
  get_my_mac
}

# extends Classifier to check if 'inventory-data' field matches value
# This does NOT aggregate because inventory should be per machine
function cl_has_inventory_value() {
  local _path=$1
  local _value="$(echo -e "$2" | tr -d '[:space:]')"
  local _data="$(drpcli machines get $RS_UUID param "inventory/data")"
  local _jdata="$(jq -r ".[\"$_path\"]" <<< "${_data}" | tr -d '[:space:]')"

  if [[ "$_jdata" == "$_value" ]] ; then
    echo "pass"
  else
    echo "fail"
  fi
}



