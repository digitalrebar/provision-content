---
Name: dell-dsu-repo-mirror
Description: Mirrors all or select parts of the DelL DSU Repository.
RequiredParams:
  - dell-dsu-base-url
  - dell-dsu-mirror-releases
  - dell-dsu-mirror-path
OptionalParams:
  - dell-dsu-skip-keys
  - dell-dsu-skip-releases
  - dell-dsu-mirror-debug
Templates:
  - Name: dell-dsu-repo-setup
    Contents: |
      #!/usr/bin/env bash
      # Mirrors all or select parts of the Dell DSU BIOS and Firmware repository.

      {{ template "setup.tmpl" . }}

      QUIET="--quiet"
      PREFIX="dell"
      PARTS="os_dependent os_independent"
      KEYS="pgp_pubkeys"
      BASE_URL='{{.ParamExpand "dell-dsu-base-url" | trimSuffix "/" | trimSuffix "/hardware/dsu"}}'
      BASE_PATH='{{.Param "dell-dsu-mirror-path" }}'
      {{- range $rel := (.Param "dell-dsu-mirror-releases") }}
      BLOCK_RELEASES="{{$rel}} $BLOCK_RELEASES"
      {{- end}}
      {{if eq (.Param "dell-dsu-skip-keys" ) true }}NO_KEYS="skip"{{end}}
      {{if eq (.Param "dell-dsu-skip-releases" ) true }}NO_DSU="skip"{{end}}
      {{if eq (.Param "dell-dsu-mirror-debug" ) true }}
      QUIET=""
      {{end}}

      # prefix the versioned block releases, and prepend the base
      # "dsu" content if we have no BLOCK_RELEASES defined, will just get
      # the most current release
      for B in $BLOCK_RELEASES
      do
        BLK+="DSU_$B "
      done
      BLOCK_RELEASES="dsu $BLK"

      set -e

      echo ""
      echo "Setting block release versions to:  $BLOCK_RELEASES"
      echo "     Setting local mirror path to:  $BASE_PATH/$PREFIX"
      echo "Skip DSU Release downloads set to:  $NO_DSU"
      echo "                 Skip Keys set to:  $NO_KEYS"
      echo "Verbose / Debugging output set to:  {{.Param "dell-dsu-mirror-debug"}}"
      echo "     Getting the followiing parts:  $PARTS"
      echo "     Public Keys directory set to:  $KEYS"
      echo ""

      echo "Starting mirror process..."

      mkdir -p $BASE_PATH/$PREFIX
      cd $BASE_PATH

      pubkeys() {
        # requires trailing slash on the URL or will fail miserably
        GET="time wget --mirror --page-requisites --adjust-extension --no-parent \
                  --convert-links --no-host-directories --cut-dirs=1             \
                  --directory-prefix=$PREFIX --ignore-case --accept=asc,txt      \
                  ${QUIET} $BASE_URL/$KEYS/"

        echo "Getting PGP Public Keys:"
        echo "$GET" | sed 's/  \+/ /g'
        echo ""
        $CMD $GET

        mkdir -p $BASE_PATH/$PREFIX/dsu
        [[ ! -r "$BASE_PATH/$PREFIX/dsu/$KEYS" ]] && ln -s $BASE_PATH/$PREFIX/$KEYS $BASE_PATH/$PREFIX/dsu/$KEYS || true
      }

      releases() {
        for BLOCK_RELEASE in $BLOCK_RELEASES
        do
          echo "Getting Block Release mirror content for:  $BLOCK_RELEASE"
          echo "Note - mirroring may take a significant amount of time..."
          echo ""
          # no trailing slash on the URL for dsu/os_dependent/os_independent
          GET="time wget --mirror --page-requisites --adjust-extension --no-parent \
                    --convert-links --no-host-directories --cut-dirs=2             \
                    --directory-prefix=$PREFIX --ignore-case --reject=index*       \
                    ${QUIET} $BASE_URL/hardware/$BLOCK_RELEASE"

          for PART in $PARTS
          do
            echo "Getting $PART assets:"
            echo "$GET/$PART" | sed 's/  \+/ /g'
            echo ""
            $CMD $GET/$PART
          done
        done

      }

      # debugging - just print the commands instead of executing them
      [[ -n "$DBG" ]] && CMD="echo" || CMD="eval"
      # environment variables to skip
      [[ -n "$NO_KEYS" ]] && echo "Skipping pubkeys." || pubkeys
      [[ -n "$NO_DSU" ]] && echo "Skipping DSU block releases" || releases

      exit 0

