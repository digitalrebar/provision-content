---
Name: proxmox-drp-install
Description: "Install DRP on the hypervisor."
Documentation: |
  This is a very opinionated and quick DRP install on the Proxmox
  Hypervisor.  Future iterations should utilize the Multi Site
  Manager to control the DRP endpoint.

Meta:
  color: blue
  feature-flags: sane-exit-codes
  icon: expand arrows alternate
  title: RackN Content
OptionalParams: []
Prerequisites: []
Templates:
  - Name: "proxmox-drp-install.tmpl"
    Contents: |-
      #!/usr/bin/env bash
      # Proxmox Lab setup virtual machines

      {{ if eq ( .Param "proxmox/install-drp-on-hypervisor") true -}}
      echo "Starting DRP install on the Hypervisor..."
      {{ else -}}
      echo "The 'proxmox/install-drp-on-hypervisor' Param is set to 'false'."
      echo "NOT INSTALLING DRP on the Hypervisor, exiting from the DRP install."
      exit 0
      {{ end  -}}

      if systemctl status dr-provision > /dev/null 2>&1
      then
        echo "DRP Service is running on the system ... assuming it's good, and not nuking it ... "
        exit 0
      else
        echo "No DRP Endpoint services found to be running on the system."
      fi

      set -e
      set -x

      function xiterr() { [[ $1 =~ ^[0-9]+$ ]] && { XIT=$1; shift; } || XIT=1; printf "FATAL: $*\n"; exit $XIT; }

      PVENODE=$(hostname)
      DRPS='{{.Param "proxmox/lab-student-count"}}'
      SUBNET='{{.Param "proxmox/lab-drp-external-subnet"}}'
      DNS='{{.Param "proxmox/lab-drp-external-dns"}}'
      DOMAIN='{{.Param "proxmox/lab-drp-external-domainname"}}'
      GW=$(/usr/bin/env python3 -c 'import sys,ipaddress; net = ipaddress.IPv4Network("'$SUBNET'"); print(str(net.network_address + 1))')
      BEG=$(/usr/bin/env python3 -c 'import sys,ipaddress; net = ipaddress.IPv4Network("'$SUBNET'"); print(str(net.network_address + 2))')
      END=$(/usr/bin/env python3 -c 'import sys,ipaddress; net = ipaddress.IPv4Network("'$SUBNET'"); print(net.broadcast_address - 1)')
      DRP_IMG="https://s3-us-west-2.amazonaws.com/get.rebar.digital/images/linux/centos-tarball-20190822-193832-d61b71fc99.tgz"
      IMG_FILE=$(basename "$DRP_IMG")
      PROF_NAME="image-deploy-drp-centos"


      # if our system was deployed via DRP, there are Agent remnants that will
      # interfere with the DRP install / startup checks from succeeding...
      RS_ENDPOINT="https://127.0.0.1:8092"
      RS_USERNAME="rocketskates"
      RS_PASSWORD="r0cketsk8ts"
      unset RS_RUNNER_DIR
      unset RS_LOCAL_PROXY
      unset RS_TOKEN

      echo "Install DRP service..."
      curl -s get.rebar.digital/tip | bash -s -- install --systemd
      sleep 3

      echo "Install task-library content pack..."
      drpcli catalog item install task-library || true

      echo "Install image-deploy plugin..."
      drpcli catalog item install image-deploy

      echo "Install sledgehammer ISOs..."
      drpcli bootenvs uploadiso sledgehammer

      echo "Set system preferences..."
      drpcli prefs set defaultWorkflow discover-base unknownBootEnv discovery defaultStage discover defaultBootEnv sledgehammer

      echo "Slurp down the DRP OS image-deploy image ('$IMG_FILE')..."
      cd /var/lib/dr-provision/tftpboot/files
      mkdir -p images
      cd images
      wget $DRP_IMG

      echo "Create the image deploy profile ('$PROF_NAME') for our OS image..."
      JSON='{"Name":"'${PROF_NAME}'","Params":{"image-deploy/image-file":"files/images/'${IMG_FILE}'","image-deploy/image-os":"linux","image-deploy/image-type":"tgz"}}'
      echo $JSON | drpcli profiles create -

      echo "Insert our SSH public key..."
      KEY="\"access-keys\":{\"injected-key\":\"{{.Param "proxmox/lab-drp-sshkey-public"}}\"}"
      drpcli profiles add global param proxmox/lab-drp-sshkey-public to "$KEY"
      JSON='{
        "Name": "drp-endpoints",
        "Enabled": true,
        "Subnet": "'$SUBNET'",
        "ActiveStart": "'$BEG'",
        "ActiveEnd": "'$END'",
        "Options":[{"Code": 3,"Value":"'$GW'" },
          {"Code":6,"Value":"'$DNS'"},
          {"Code":15,"Value":"'$DOMAIN'"},
        ],
        "Strategy": "MAC"
      }'
      echo "Create our DHCP Subnet pool..."
      echo $JSON | drpcli subnets create -

      set +x

