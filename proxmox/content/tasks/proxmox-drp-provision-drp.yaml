---
Name: proxmox-drp-provision-drp
Description: "Provision the DRP VMs OS from the DRP installed on the Hypervisor"
Documentation: |
  Provisions the OS for the DRP VMs on the Proxmox host, via the DRP
  installed on the hypervisor.

Meta:
  color: blue
  feature-flags: sane-exit-codes
  icon: expand arrows alternate
  title: RackN Content
OptionalParams: []
Prerequisites: []
Templates:
  - Name: "proxmox-drp-provision-drp.tmpl"
    Contents: |-
      #!/usr/bin/env bash
      # Proxmox Lab setup virtual machines

      {{ if eq ( .Param "proxmox/install-drp-on-hypervisor") true -}}
      echo "Performing DRP OS provisionging form installed DRP on Hypervisor..."
      {{ else -}}
      echo "The 'proxmox/install-drp-on-hypervisor' Param is set to 'false'."
      echo "NOT PROVISIONING DRP VMs from the installed hypervisor DRP instance, exiting from the DRP install."
      exit 0
      {{ end  -}}

      set -e
      set -x

      function xiterr() { [[ $1 =~ ^[0-9]+$ ]] && { XIT=$1; shift; } || XIT=1; printf "FATAL: $*\n"; exit $XIT; }

      PVENODE=$(hostname)
      DRPS='{{.Param "proxmox/lab-student-count"}}'
      PROF_NAME="image-deploy-drp-centos"
      WF="image-deploy-base"

      # if our system was deployed via DRP, there are Agent remnants that will
      # interfere with the DRP install / startup checks from succeeding...
      RS_ENDPOINT="https://127.0.0.1:8092"
      RS_USERNAME="rocketskates"
      RS_PASSWORD="r0cketsk8ts"
      unset RS_RUNNER_DIR
      unset RS_LOCAL_PROXY
      unset RS_TOKEN

      TIMEOUT="300"
      WAIT="5"
      echo ""
      echo "============================================================"
      echo "Waiting for '$DRPS' DRP Endpoints to be discovered..."
      echo "Setting max wait time to '$TIMEOUT' seconds..."
      N=$(drpcli machines list | jq -r '.[].Name' | wc -l)

      # builtin shell variable that tracks run time of script, reset to zero for timer
      SECONDS=0
      sleep $WAIT
      while (( N < DRPS ))
      do
        (( REM = TIMEOUT - SECONDS ))

        if [[ $SECONDS -gt $TIMEOUT ]]
        then
          xiterr 1 "Timeout wait for DRP Endpoints to be discovered reached... failing... "
        else
          echo "Waiting $WAIT seconds (remaining timeout: '$REM')... "
        fi

        ###
        #  Needs work - targets wrong Machine for the Param get ???
        ###
        #KILL_SWITCH=$(drpcli machines get {{.Machine.UUID}} param proxmox/drp-timeout-kill-switch)
        #if [[ "$KILL_SWITCH" == "true" ]]
        #then
        #  echo "KILL SWITCH invoked - 'proxmox/drp-timeout-kill' was set to TRUE."
        #  echo "Exiting with error"
        #  drpcli machines remove {{.Machine.UUID}} param proxmox/drp-timeout-kill-switch
        #  xiterr 1 "KILL SWITCH invoked."
        #fi

        sleep $WAIT
        N=$(drpcli machines list | jq -r '.[].Name' | wc -l)
      done

      echo ""
      echo "============================================================"
      echo "DISCOVERED '$N' DRP Endpoints !!"

      MACHS=$(drpcli machines list | jq -r '.[].Uuid')
      for MACH in $MACHS
      do
        echo "Adding image profile ('$PROF_NAME') to Machine..."
        drpcli machines addprofile $MACH "$PROF_NAME"
        echo "Setting Machine '$MACH' to workflow $WF..."
        drpcli machines workflow $MACH "$WF"
      done

      set +x

