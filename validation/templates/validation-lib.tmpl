
#
# Library to help manage common validation routines
#

taskname="{{slice .Machine.Tasks .Machine.CurrentTask | first}}"

add_validation_error() {
  local err="$1"
  local list=$(get_param validation/errors)

  list="$(jq ". += [\"${taskname}: ${err}\"]" <<< "$list")"

  set_param validation/errors "$list"
}

validation_add_error() {
  add_validation_error "$*"
}

validation_add_error_ignore() {
  local err="$1"
  local list=$(get_param validation/errors-ignore)

  list="$(jq ". += [\"${taskname}: ${err}\"]" <<< "$list")"

  set_param validation/errors-ignore "$list"
}

validation_clear_errors_ignore() {
  drpcli machines remove $RS_UUID param "validation/errors-ignore" >/dev/null || :
  drpcli machines add $RS_UUID param "validation/errors-ignore" to "[]" >/dev/null
}

validation_msg_prefix() {
  prefix="{{.Machine.Stage}} :: {{slice .Machine.Tasks .Machine.CurrentTask | first }} :: {{.Machine.CurrentJob}} "
  echo "$prefix"
}

validation_success() {
    echo "Validation succeeded for task:  $taskname"
    exit 0
}

validation_fail_at_stage_end() {
  echo "Validation task ('$taskname') failed - will stop workflow at Staage end"
  validation_add_error "$*"
  exit 0
}

validation_fail_immediately() {
  echo "Validation received a Fatal failure for task:  $taskname"
  exit 1
}

validation_fail_and_ignore() {
  echo "Validation error occured, but ignoring for task:  $taskname"
  validation_add_error_ignore "$(validation_msg_prefix) $*"
  exit 0
}

### TODO:  Define a task to run if fail occurs, to potentially remediate issue.
###        Add remediate task, and original task again to verify it succeeded.
###        May need count handling to stop after N remediation attempts.
#validation_fail_and_remediate() {
#}

validate_machine_name_dns_by_ip() {
    local host=""
    if [[ $# -le 1 ]]; then
        host={{.Machine.Name}}
    else
        host=$2
    fi
    local my_ip=$(getent ahostsv4 ${host}|awk '{print $1}'|head -1)

    if [[ ${my_ip} != $1 ]]; then
        return 1
    fi
    return 0
}

validate_ipv4_ip_syntax() {
  local ip=$1
  local stat=1
  if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
    OIFS=$IFS
    IFS='.'
    ip=($ip)
    IFS=$OIFS
    [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
    && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
    stat=$?
  fi
  return $stat
}

check_same_subnet() {
    local ip=$1
    local gw=$2
    local nm=$3
    eval $(ipcalc -n $ip $nm)
    NET_IP=$NETWORK
    [[ -z "$NET_IP" ]] && NET_IP="fail_ip"
    unset NETWORK
    eval $(ipcalc -n $gw $nm)
    NET_GW=$NETWORK
    [[ -z "$NET_GW" ]] && NET_GW="fail_gw"
    if [[ $NET_IP == $NET_GW ]]; then
      return 0
    fi
    return 1
}
validate_check_same_subnet() { check_same_subnet $*; }

ping_dest_from_src() {
    local src=$1
    local dest=$2
    local count=${3:-4}
    local timeout=${4:-1}
    set +e
    loss=$(ping -c ${count} -W ${timeout} -I ${src} ${dest})
    local xit=$?
    if [[ ${xit} -eq 0 ]]; then
        loss=$(echo "${loss}"|awk '/loss/ {print substr($6, 1, length($6)-1)}')
        if [[ ${loss} -gt 0 ]]; then
            return 1
        fi
        return 0
    elif [[ ${xit} -eq 1 ]]; then
        return 1
    elif [[ ${xit} -eq 2 ]]; then
        return 2
    fi
    return ${xit}
}
validate_ping_dest_from_src() { ping_dest_from_src $*; }

check_up() { $(ip -o link show $1 | grep -q " UP ") && return 0 || return 1; }
bring_up() { ip link set $1 up; return $?; }

validate_nic_counts() {
    # nic_min_count is the minimum number of NICs that should be found
    # nic_req_up is minimum num of NICs that can be brought to "UP" state
    # valid values for both counts are 1 to 99
    local nic_min_count=$1
    local nic_req_up=$2
    local count=1
    local check
    local nic

    [[ $nic_min_count =~ ^[0-9]{,2}$ && $nic_min_count -ne 0 ]] || xiterr "invalid value specified for 'nic_min_count' (arg 1)"
    [[ $nic_req_up =~ ^[0-9]{,2}$ && $nic_req_up -ne 0 ]] || xiterr "invalid value specified for 'nic_req_up' (arg 2)"
    [[ $nic_req_up -gt $nic_min_count ]] && xiterr "NIC required UP can't be greater NIC minimum count"

    local addrs=$(drpcli machines get {{.Machine.UUID}} param gohai-inventory \
      | jq -r '.Networking.HardwareAddrs'                                     \
      | egrep -v "[\{\}]"                                                     \
      | sed -e 's/[",]//g' -e 's/: / /' -e 's/^  //g'                         \
      )

    echo "Validating for MAC Addresses and NIC interfaces:"
    echo "$addrs"

    local found_count=$(echo "$addrs" | wc -l)

    [[ $found_count -ge $nic_min_count ]] || xiterr "failed minimum NIC count ('$nic_min_count') validation"

    local OIFS=${IFS}
    IFS=$'\n'
    for check in $addrs
    do
        mac=$(echo $check | cut -d " " -f 1)
        nic=$(echo $check | cut -d " " -f 2)
        $(check_up $nic || bring_up $nic) || xiterr "failed to 'UP' required NIC count"

        if [[ $count -eq $nic_req_up ]]
        then
            echo "Successfully validated NIC Count ('$nic_min_count') and Minimum UP count ($nic_req_up)"
            break
        else
            (( count++ ))
        fi
    done
    IFS=${OIFS}
}
