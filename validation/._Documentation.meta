Validation System
-----------------

The Validation System allows an operator to flexibly define a set of
tasks to do validation operations.  These can be fatal and stop
execution, fail and be tallied at the end, or succeed.

The Validation System provides three base sets of validation
stages, *validation-post-discover*, *validation-post-hardware*,
and *validation-post-install*.  The intent is to have a set of
tasks that validate post discovery, post hardware configuration,
and post install.  These are for general use, but additional
validation sets can be added.

The architecture of the system is a stage that does validation.
The stage has the *validation-start* and *validation-stop* tasks.
These should be the only tasks in the stage.  The stage should have
a parameter, *validation/list-parameter*.  This parameter defines
the actual parameter name that the *validation-start* task
uses to update the task list with a list of tasks.  The parameter
specified by the *validation/list-parameter* will be Composed
and added to the task list between the immediate *validation-start*
and *validation-stop* tasks.  *Composed* means the value of that
parameter is the aggregation of all values of that parameters at all
levels of the system, (e.g. From the parameters on the machine, then
profiles on machines, then parameters on the stage, ...).  This allows
multiple resources to provide the validation tests.

Each validation task should do one of the following:

* success - Return 0.
* failure - Update the *validation/errors* parameters and exit 0.
* fatal - Return 1.

The concept is that success returns zero and processing continue.  Failure marks
the failure in the *validation/errors* parameter on the machine, but still
returns 0 to allow the continuation of testing until the *validation-stop* task.
Fatal does NOT update the *validation/errors* parameter, but does return 1.

The idea is that if a failure that is one external to machine and can be remediated
and success could ensue, the test should be fatal.  This allows the failure
to be remediate and the can be continued without failing validation.  But if the
failure is not able to be remediated, a failure should be added to the
*validation/errors* and success returned so that additional issues can be found
and aggregated.

The Validation System provides a library template, *validation-lib.tmpl*, that
contains a helper routine to add errors to the *validation/errors*.  The function
name is *add_validation_error* call with a single string parameter.  This can be
called multiple times.  A validation task should include both the *setup.tmpl*
and the *validation-lib.tmpl*.

Namespace Definitions
=====================

Validation system stages, control params, and other content parts will utilize the
name space of ``validation>``.  Individual Tasks, Params, etc. that
implement functional use of the Validation system components will utilize the
common name space of ``validate`.

For example, the Start Stage for the Validation system is ``validation-start``, while
the NIC Count and UP link state checking uses a task namespaced as ``validate-nic-counts`.

Standard Stage/Task and Param semantics still apply (eg ``validate/nic-required-up`` is the
Param namespace name).
