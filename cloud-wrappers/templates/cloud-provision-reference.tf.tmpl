{{ if .ParamExists "cloud/provider" }}

{{ if eq "unknown" (.Param "cloud/provider") }}
{{ end }}

{{ if eq "azure" (.Param "cloud/provider") }}
terraform {
  required_providers {
    azurerm = {
      source = "hashicorp/azurerm"
      version = ">= 2.39.0"
    }
  }
}
provider "azurerm" {
  subscription_id = "{{ .Param "azure/subscription_id" }}"
  client_id = "{{ .Param "azure/appId" }}"
  client_secret = "{{ .Param "azure/password" }}"
  tenant_id = "{{ .Param "azure/tenant" }}"
  features {}
}

resource "azurerm_resource_group" "main" {
  name     = "{{ .Machine.Name }}-resources"
  location = "{{ .Param "azure/region" }}"
}

resource "azurerm_virtual_network" "main" {
  name                = "{{ .Machine.Name }}-network"
  address_space       = ["10.0.0.0/16"]
  location            = azurerm_resource_group.main.location
  resource_group_name = azurerm_resource_group.main.name
}

resource "azurerm_subnet" "internal" {
  name                 = "internal"
  resource_group_name  = azurerm_resource_group.main.name
  virtual_network_name = azurerm_virtual_network.main.name
  address_prefixes     = ["10.0.2.0/24"]
}

resource "azurerm_public_ip" "publicip" {
    name                     = "{{ .Machine.Name }}-public-ip"
    location                 = azurerm_resource_group.main.location
    resource_group_name      = azurerm_resource_group.main.name
    allocation_method        = "Dynamic"
}

resource "azurerm_network_security_group" "security_group" {
    name                = "{{ .Machine.Name }}-security-group"
    location            = azurerm_resource_group.main.location
    resource_group_name = azurerm_resource_group.main.name

    security_rule {
        name                       = "SSH"
        priority                   = 1001
        direction                  = "Inbound"
        access                     = "Allow"
        protocol                   = "Tcp"
        source_port_range          = "*"
        destination_port_range     = "22"
        source_address_prefix      = "*"
        destination_address_prefix = "*"
    }
}

resource "azurerm_network_interface" "machine_nic" {
  name                = "{{ .Machine.Name }}-nic"
  resource_group_name = azurerm_resource_group.main.name
  location            = azurerm_resource_group.main.location

  ip_configuration {
    name                          = "internal"
    subnet_id                     = azurerm_subnet.internal.id
    private_ip_address_allocation = "Dynamic"
    public_ip_address_id          = azurerm_public_ip.publicip.id
  }
}

resource "azurerm_network_interface_security_group_association" "security_group_assn" {
    network_interface_id      = azurerm_network_interface.machine_nic.id
    network_security_group_id = azurerm_network_security_group.security_group.id
}

resource "azurerm_linux_virtual_machine" "main" {
  name                            = "{{ .Machine.Name }}"
  resource_group_name             = azurerm_resource_group.main.name
  location                        = azurerm_resource_group.main.location
  size                            = "{{ .Param "azure/size" }}"
  admin_username                  = "{{ .Param "rsa/key-user" }}"
  network_interface_ids = [
    azurerm_network_interface.machine_nic.id,
  ]

  admin_ssh_key {
    username = "{{ .Param "rsa/key-user" }}"
    public_key = "{{ .Param "rsa/key-public" }}"
  }

  os_disk {
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
  }

  source_image_reference {
    publisher = "{{ get (.Param "azure/image") "publisher" }}"
    offer     = "{{ get (.Param "azure/image") "offer" }}"
    sku       = "{{ get (.Param "azure/image") "sku" }}"
    version   = "{{ get (.Param "azure/image") "version" }}"
  }

	tags = {
		DRP_ID      = "{{ .Machine.Uuid }}"
		Provisoner  = "DigitalRebar"
		{{ range $i, $p := .Machine.Profiles }}
			{{- if not (hasPrefix "azure" $p) -}}
			{{$p}}    = "DRP-Profile{{$i}}"
			{{- end -}}
		{{- end }}
	}
}

output "machine_ip" {
	value       = azurerm_linux_virtual_machine.main.public_ip_address
	description = "The IP of Machine"
}

output "instance_id" {
	value       = azurerm_linux_virtual_machine.main.id
	description = "Azure Instance ID"
}

{{ end }}

{{ if eq "digitalocean" (.Param "cloud/provider") }}

terraform {
  required_providers {
    linode = {
      source  = "digitalocean/digitalocean"
      version = ">= 1.13.4"
    }
    digitalocean = {
      source = "digitalocean/digitalocean"
    }
  }
  required_version = ">= 0.13"
}


provider "digitalocean" {
  token = "{{ .Param "digitalocean/token" }}"
}

resource "digitalocean_ssh_key" "drp_machine" {
  name       = "DRP {{ .Machine.Name }}"
  public_key = "{{ .Param "rsa/key-public" }}"
}

resource "digitalocean_droplet" "drp_machine" {
  image    = "{{ .Param "digitalocean/image" }}"
  region   = "{{ .Param "digitalocean/region" }}"
  size     = "{{ .Param "digitalocean/size" }}"
  name     = "{{ .Machine.Name }}"
  ssh_keys = [digitalocean_ssh_key.drp_machine.fingerprint]
  tags     = [ {{ range $i, $p := .Machine.Profiles }}"{{$p}}",{{ end }}"DigitalRebar" ]
}

output "machine_ip" {
  value       = digitalocean_droplet.drp_machine.ipv4_address
  description = "The IP of Machine"
}

output "instance_id" {
  value       = digitalocean_droplet.drp_machine.id
  description = "Digital Ocean Droplet ID"
}

{{ end }}


{{ if eq "linode" (.Param "cloud/provider") }}
# Configure the Linode provider
terraform {
  required_providers {
    linode = {
      source = "linode/linode"
      version = ">= 1.13.4"
    }
  }
}

provider "linode" {
  token = "{{ .Param "linode/token" }}"
}

resource "linode_instance" "drp_node" {
	image     = "{{ .Param "linode/instance-image" }}"
	label     = "{{ .Machine.Name }}"
	region    = "{{ .Param "linode/region" -}}"
	type      = "{{ .Param "linode/instance-type" }}"
	root_pass = "{{ .Param "linode/root-password" }}"
	tags      = [ {{ range $i, $p := .Machine.Profiles }}"{{$p}}",{{ end }}"DigitalRebar" ]
	{{ if .ParamExists "rsa/key-public" }}
	authorized_keys = ["{{ .Param "rsa/key-public" }}"]
	{{ end }}
}

output "machine_ip" {
	value       = linode_instance.drp_node.ip_address
	description = "The IP of Machine"
}

output "instance_id" {
	value       = linode_instance.drp_node.id
	description = "Linode Instance ID"
}

{{ end }}

{{ if eq "aws" (.Param "cloud/provider") }}
terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
      version = ">= 3.20.0"
    }
  }
}
provider "aws" {
  region = "{{ .Param "aws/region" }}"
  access_key = "{{ .Param "aws/access-key-id" }}"
  secret_key = "{{ .Param "aws/secret-key" }}"
}

{{ if .ParamExists "rsa/key-public" }}
resource "aws_key_pair" "DRP-{{ .Machine.Uuid }}" {
  key_name   = "DRP-{{ .Machine.Uuid }}"
  public_key = "{{ .Param "rsa/key-public" }}"
}
{{ end }}

{{ if .ParamExists "aws/security-groups" }}
# using predefined security groups
{{ else }}
resource "aws_security_group" "digitalrebar_basic" {

	name_prefix 	= "drp_"
	description		= "Digital Rebar Cloud Wrapper"
	ingress {
		description = "SSH"
		from_port   = 22
		to_port     = 22
		protocol    = "tcp"
		cidr_blocks = ["0.0.0.0/0"]
	}
	ingress {
		description = "HTTPS"
		from_port   = 443
		to_port     = 443
		protocol    = "tcp"
		cidr_blocks = ["0.0.0.0/0"]
	}
	egress {
		from_port   = 0
		to_port     = 0
		protocol    = "-1"
		cidr_blocks = ["0.0.0.0/0"]
	}
	tags = {
		Name = "digitalrebar"
	}
}
{{ end }}

resource "aws_instance" "drp_node" {
	ami           	= "{{ .Param "aws/ami-id" }}"
	instance_type 	= "{{ .Param "aws/instance-type" }}"
	tags      		= {
		Name 		= "{{ .Machine.Name }}"
		DRP_ID		= "{{ .Machine.Uuid }}"
		Provisoner	= "DigitalRebar"
	{{ range $i, $p := .Machine.Profiles }}
		{{$p}}		= "DRP-Profile{{$i}}"
	{{- end }} }
	{{ if .ParamExists "rsa/key-public" -}}
	key_name 		= "DRP-{{ .Machine.Uuid }}"
	{{- end }}
	{{ if .ParamExists "aws/security-groups" }}
	security_groups = [{{ range $i, $p := (.Param "aws/security-groups") }}"{{$p}}",{{ end }}]
	{{ else }}
	security_groups = [aws_security_group.digitalrebar_basic.name]
	{{ end }}
}

output "machine_ip" {
	value       = aws_instance.drp_node.public_ip
	description = "The IP of Machine"
}

{{ end }}

{{ if eq "google" (.Param "cloud/provider") }}
terraform {
  required_providers {
    google = {
      source = "hashicorp/google"
      version = ">= 3.50.0"
    }
  }
}
provider "google" {
	credentials  = <<EOF
        {{ .ParamAsJSON "google/credential" }}
        EOF
	project      = "{{ .Param "google/project-id" }}"
  	region       = "{{ .Param "google/region" }}"
}

resource "google_compute_instance" "drp_node" {
    name         = "{{ .Machine.Name }}"
    {{ if (contains "." .Machine.Name) }}
    hostname     = "{{ .Machine.Name }}"
    {{ end }}
    zone         = "{{ .Param "google/zone" }}"
    machine_type = "{{ .Param "google/instance-type" }}"
    tags         = [ {{ range $i, $p := .Machine.Profiles }}"{{$p}}",{{ end }}"digitalrebar" ]
    boot_disk {
        initialize_params {
          image = "{{ .Param "google/boot-disk-image" }}"
        }
    }
    {{ if .ParamExists "rsa/key-public" -}}
    metadata = {
        ssh-keys = "{{ .Param "rsa/key-user" }}:{{ .Param "rsa/key-public" }}"
    }
    {{ end }}
    network_interface {
        network = "default"
        access_config {
          // Ephemeral IP
        }
    }
}

output "machine_ip" {
	value       = google_compute_instance.drp_node.network_interface.0.access_config.0.nat_ip
	description = "The IP of Machine"
}

{{ end }}

{{ else }}
# NO PLAN: Missing cloud/provder
{{ end }}
