# Configure the Azure provider
terraform {
  required_providers {
    azurerm = {
      source = "hashicorp/azurerm"
      version = ">= 2.39.0"
    }
  }
}
provider "azurerm" {
  subscription_id = "{{ .Param "azure/subscription_id" }}"
  client_id = "{{ .Param "azure/appId" }}"
  client_secret = "{{ .Param "azure/password" }}"
  tenant_id = "{{ .Param "azure/tenant" }}"
  features {}
}

resource "azurerm_resource_group" "main" {
  name     = "{{ .Machine.Name }}-resources"
  location = "{{ .Param "azure/region" }}"
}

resource "azurerm_virtual_network" "main" {
  name                = "{{ .Machine.Name }}-network"
  address_space       = ["10.0.0.0/16"]
  location            = azurerm_resource_group.main.location
  resource_group_name = azurerm_resource_group.main.name
}

resource "azurerm_subnet" "internal" {
  name                 = "internal"
  resource_group_name  = azurerm_resource_group.main.name
  virtual_network_name = azurerm_virtual_network.main.name
  address_prefixes     = ["10.0.2.0/24"]
}

resource "azurerm_public_ip" "publicip" {
    name                     = "{{ .Machine.Name }}-public-ip"
    location                 = azurerm_resource_group.main.location
    resource_group_name      = azurerm_resource_group.main.name
    allocation_method        = "Dynamic"
}

resource "azurerm_network_security_group" "security_group" {
    name                = "{{ .Machine.Name }}-security-group"
    location            = azurerm_resource_group.main.location
    resource_group_name = azurerm_resource_group.main.name

    {{ range $i, $p := (.ComposeParam "network/firewall-ports" | uniq) }}
    {{- $portdef := split "/" $p -}}
    security_rule {
        name                       = "nfp-{{$i}}_"
        priority                   = {{add $i 1}}00
        direction                  = "Inbound"
        access                     = "Allow"
        protocol                   = "{{coalesce $portdef._1 "Tcp"}}"
        source_port_range          = "*"
        destination_port_range     = "{{$portdef._0}}"
        source_address_prefix      = "*"
        destination_address_prefix = "*"
    }
    {{ end }}
}

resource "azurerm_network_interface" "machine_nic" {
  name                = "{{ .Machine.Name }}-nic"
  resource_group_name = azurerm_resource_group.main.name
  location            = azurerm_resource_group.main.location

  ip_configuration {
    name                          = "internal"
    subnet_id                     = azurerm_subnet.internal.id
    private_ip_address_allocation = "Dynamic"
    public_ip_address_id          = azurerm_public_ip.publicip.id
  }
}

resource "azurerm_network_interface_security_group_association" "security_group_assn" {
    network_interface_id      = azurerm_network_interface.machine_nic.id
    network_security_group_id = azurerm_network_security_group.security_group.id
}

resource "azurerm_linux_virtual_machine" "main" {
  name                            = "{{ .Machine.Name }}"
  resource_group_name             = azurerm_resource_group.main.name
  location                        = azurerm_resource_group.main.location
  size                            = "{{ .Param "azure/size" }}"
  admin_username                  = "{{ .Param "rsa/key-user" }}"
  network_interface_ids = [
    azurerm_network_interface.machine_nic.id,
  ]

  admin_ssh_key {
    username = "{{ .Param "rsa/key-user" }}"
    public_key = "{{ .Param "rsa/key-public" }}"
  }

  os_disk {
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
  }

  source_image_reference {
    publisher = "{{ get (.Param "azure/image") "publisher" }}"
    offer     = "{{ get (.Param "azure/image") "offer" }}"
    sku       = "{{ get (.Param "azure/image") "sku" }}"
    version   = "{{ get (.Param "azure/image") "version" }}"
  }

	tags = {
		DRP_ID      = "{{ .Machine.Uuid }}"
		Provisoner  = "digitalrebar"
		{{ range $i, $p := .Machine.Profiles }}
			{{- if not (hasPrefix "azure" $p) -}}
			{{lower $p}}    = "DRP-Profile{{$i}}"
			{{- end -}}
		{{- end }}
	}

  # this template synchronizes the Terraform instance with Digital Rebar
  {{template "cloud-provision-local-exec.tf.tmpl" . }}
}
