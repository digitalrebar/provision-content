---
Description: "Install Helm"
Name: "kube-lib-helm-install"
Documentation: |
  Installs Helm on the leader.
  This uses the Digital Rebar Cluster pattern so cluster/profile and cluster/leader must be set.
RequiredParams:
  - cluster/profile
  - cluster/manager
  - kube-lib/helm-version
  - kube-lib/kube-config
ExtraClaims:
  - scope: "files"
    action: "*"
    specific: "*"
Templates:
  - Name: "kube.config"
    Path: "kube.config"
    Contents: |
      {{ .Param "kube-lib/kube-config" | toPrettyJson }}
  - Name: "helm-install.sh"
    Path: ""
    Contents: |
      #!/usr/bin/env bash

      {{ template "setup.tmpl" . }}

      {{ template "download-tools.tmpl" .}}

      {{ if .Param "cluster/manager" }}
        echo "Verified: Must be Cluster Manager"
      {{ else }}
        echo "Cluster Manager only.  Stopping execution"
        exit 0
      {{ end }}

      echo "Checking Helm Install and Version"
      if helm version ; then
        echo "  found helm, moving on..."
      else
        {{ $cachesource := "kube-lib/helm-version" }}
        OS="linux"
        ARCH="{{ .Machine.Arch }}"
        BINARIES="/usr/local/bin/helm"
        {{ $arch := list "linux" .Machine.Arch | join "-" }}
        {{ $file := .Param $cachesource }}
        {{ $source := get $file $arch }}
        drp_cache "{{ get $file "name" }}" "{{ get $file "version" }}" "$OS" "$ARCH" "{{ get $source "url" }}" "{{ get $source "sha256sum" }}" "{{ get $source "explode" }}"
        chmod +x "{{ get $file "name" }}"
        mv "{{ get $file "name" }}" $BINARIES

        echo "helm downloaded to $BINARIES"
      fi

      echo "Running helm version $(helm version)"
      echo "Done"
      exit 0

Meta:
  icon: "download"
  color: "yellow"
  title: "Community Content"
  copyright: "RackN 2020"
  feature-flags: "sane-exit-codes"
