---
Name: "kube-lib-k3s-machine-install"
Description: "Install k3s on a Machine"
Documentation: |
  Install k3s on machines based on v4.6 cluster pattern.  Generally, this
  is started by the kube-lib-k3s-cluster workflow and not called directly.

  cluster/leader: true becomes the cluster leader.  others become workers.
  cluster/manager: no operation

  For operational guidelines, see :ref:`rs_cluster_pattern`
RequiredParams:
  - kube-lib/k3s-version
  - kube-lib/api-port
  - cluster/leader
  - cluster/manager
OptionalParams:
  - kube-lib/node-token
  - kube-lib/kube-config
ExtraClaims:
  - scope: "files"
    action: "*"
    specific: "*"
Templates:
  - Name: "kube-lib-k3s-machine-install.sh"
    Contents: |
      #!/usr/bin/env bash

      {{ template "setup.tmpl" . }}

      echo "starting k3s leader install"
      {{ template "cluster-utilities.tmpl" .}}

      {{ if .Param "cluster/manager" }}
        echo "cannot run install on manager"
        exit 0
      {{ end }}

      {{ if .Param "cluster/leader" }}
      if kubectl get nodes 2>/dev/null >/dev/null ; then
        echo "kubectl works... no leader (re)install"
        exit 0
      else 
        echo "no kubectl, install k3s leader"
      fi
      {{ end }}

      {{ if .Param "cluster/leader" }}

      echo "========== I am leader - run k3s server ========="
      K3S_URL=https://{{ .Machine.Address }}:{{ .Param "kube-lib/api-port" }}
      EXECSTART="server --bind-address={{ .Machine.Address }} --node-label=leader --https-listen-port={{ .Param "kube-lib/api-port" }} --selinux"
      SYSTEMD_TYPE="notify"

      {{ else }}

      echo "----------- I am worker - run k3s agent -----------"

      echo "Make sure kube-lib/node-token and kube-lib/kube-config is defined"
      cluster_wait_for_variable "kube-lib/node-token"
      cluster_wait_for_variable "kube-lib/kube-config"
      
      # we need to get the decoded version
      K3S_TOKEN=$(drpcli -T $PROFILE_TOKEN profiles get $CLUSTER_PROFILE param kube-lib/node-token --decode)
      KUBE_CONFIG=$(drpcli -T $PROFILE_TOKEN profiles get $CLUSTER_PROFILE param kube-lib/kube-config --decode)
      echo "Running Agent: join with k3s/node-token value"
      K3S_URL=$(jq -r '.clusters[0].cluster.server' <<< "$KUBE_CONFIG")
      EXECSTART="agent --server ${K3S_URL} --node-label=worker --token ${K3S_TOKEN} --selinux"
      SYSTEMD_TYPE="exec"

      {{ end }}

      {{ template "kube-lib-k3s-install.tmpl" . }}

      {{ if .Param "cluster/leader" }}

      # need more delay for leader
      while [[ "$(kubectl get nodes -o json | jq '.items | length')" == "0" ]] ; do
        sleep 1
        echo "waiting for cluster to start (1 second)"
      done
      echo "Verify install: kubectl MUST succeed"
      kubectl get nodes
      echo "Recording cluster kube config ..."
      drpcli -T $PROFILE_TOKEN profiles add $CLUSTER_PROFILE param kube-lib/kube-config to - < /etc/rancher/k3s/k3s.yaml > /dev/null
      if [[ -f /var/lib/rancher/k3s/server/node-token ]] ; then
        # collect the cluster bootstrap token, then store it on the Param
        echo "Recording cluster token ... (releases waiting workers)"
        K3S_TOKEN=$(cat /var/lib/rancher/k3s/server/node-token)
        drpcli -T $PROFILE_TOKEN profiles add $CLUSTER_PROFILE param kube-lib/node-token to "$K3S_TOKEN" > /dev/null
      else
        echo "halting, could not find /var/lib/rancher/k3s/server/node-token"
        exit 1
      fi
      echo "========== Finished k3s leader installed successfully =========="

      {{ else }}
      
      echo "----------- Finished k3s worker installed successfully -----------"

      {{ end }}

      exit 0
Meta:
  type: "install"
  icon: "anchor"
  color: "brown"
  title: "Community Content"
  copyright: "RackN 2020"
  k3s: "true"
  feature-flags: "sane-exit-codes"