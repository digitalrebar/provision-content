#!/usr/bin/env bash
# k3s part of Kubernetes Rebar Integrated Boot (KRIB) Kubeadm Installer
# Copyright RackN 2020
{{ template "download-tools.tmpl" . }}

echo "--- starting shared k3s install template ---"

TMP_DIR=/tmp/k3s-tmp
INSTALL_DIR=/usr/bin
SYSTEMD_DIR="/etc/systemd/system"
BINARIES="$INSTALL_DIR/k3s"

if which setenforce 2>/dev/null >/dev/null ; then
  if sestatus | grep disabled 2>/dev/null >/dev/null ; then
    echo "SELinux status disabled, no action required"
  else
    echo "this is a lab...setting SELinux to permissive"
    setenforce Permissive
  fi
else
  echo "no SELinux setenforce, skipping"
fi

# Link to attached storage if there.
if [[ -e /var/lib/rancher/k3s/agent ]] ; then
  echo "skipping /var/lib/rancher/k3s/agent create and link"
else
  echo "creating and linking /var/lib/rancher/k3s/agent"
  if [[ ! -e /mnt/storage/containerd ]] ; then
    mkdir -p /mnt/storage/containerd
  fi
  mkdir -p /var/lib/rancher/k3s/agent
  ln -s /mnt/storage/containerd /var/lib/rancher/k3s/agent/containerd
fi

# Fix hostname lookup
echo "{{.Machine.Address}} $(hostname -s) $(hostname)" >> /etc/hosts

echo "download $BINARIES based on kube-lib/k3s-version"
{{ $cachesource := "kube-lib/k3s-version" }}
OS="linux"
ARCH="{{ .Machine.Arch }}"
{{ $arch := list "linux" .Machine.Arch | join "-" }}
{{ $file := .Param $cachesource }}
{{ $source := get $file $arch }}
drp_cache "{{ get $file "name" }}" "{{ get $file "version" }}" "$OS" "$ARCH" "{{ get $source "url" }}" "{{ get $source "sha256sum" }}"
chmod +x {{ $file.name }}
mv {{ $file.name }} $BINARIES

echo "Installing k3s version: $(k3s -v)"

MODPROBE=$(which modprobe)

if [[ -f /etc/systemd/system/k3s.service.env ]]; then
  echo "Rewriting k3s.service.env file"
  if ! systemctl stop k3s ; then
    echo "WARNING: could not stop the k3s service"
  fi
fi
## Build Systemd environment vars
echo "Attaching to K3s at $K3S_URL"
tee /etc/systemd/system/k3s.service.env >/dev/null << EOF
K3S_URL=${K3S_URL}
K3S_TOKEN=${K3S_TOKEN}
EOF

if [[ -f /etc/systemd/system/k3s.service ]]; then
  echo "Rewriting k3s.service file"
fi
## Build Systemd service
echo "Building k3s.service file of type $SYSTEMD_TYPE staring ${BINARIES} $EXECSTART"
tee /etc/systemd/system/k3s.service >/dev/null << EOF
[Unit]
Description=K3s - Lightweight Kubernetes
Documentation=https://k3s.io
After=network-online.target

[Service]
Type=${SYSTEMD_TYPE}
EnvironmentFile=/etc/systemd/system/k3s.service.env
ExecStartPre=${MODPROBE} br_netfilter
ExecStartPre=${MODPROBE} overlay
ExecStart=${BINARIES} ${EXECSTART}
KillMode=process
Delegate=yes
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity
TasksMax=infinity
TimeoutStartSec=0
Restart=always
RestartSec=5s

[Install]
WantedBy=multi-user.target
EOF
chmod 0755 /etc/systemd/system/k3s.service

echo "starting k3s"
systemctl daemon-reload && systemctl start k3s

echo "create symlinks for kubectl and others"
ln -sf k3s $INSTALL_DIR/kubectl
ln -sf k3s $INSTALL_DIR/crictl
ln -sf k3s $INSTALL_DIR/ctr

echo "waiting 3 seconds"
sleep 3

echo "--- end shared k3s install template ---"