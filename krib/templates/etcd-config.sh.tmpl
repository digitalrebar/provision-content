#!/usr/bin/env bash
# Build an etcd cluster
set -e

# Get access and who we are.
{{template "setup.tmpl" .}}

# Skip the remainder of this template if this host is not a master in a selective-master deployment
{{template "krib-skip-if-not-master.tmpl" .}}

# we need a random backoff to avoid races.
SLEEP=$[ ( $RANDOM % 30 ) ]

export RS_UUID="{{.Machine.UUID}}"
export RS_IP="{{.Machine.Address}}"

ETCD_VERSION="{{ .Param "etcd/version" }}"

# these need to be before krib-lib template
{{if .ParamExists "etcd/cluster-profile" -}}
CLUSTER_PROFILE={{.Param "etcd/cluster-profile"}}
PROFILE_TOKEN={{.GenerateProfileToken (.Param "etcd/cluster-profile") 7200}}
{{else -}}
xiterr 1 "Missing etcd/cluster-profile on the machine!"
{{end -}}

{{template "krib-lib.sh.tmpl" .}}

build_cert() {
  local profile=$1
  local ca_name=$2
  local ca_pw=$3
  local myname=$4
  local myip=$5

  echo "Generating certificate for ${profile} with my name ${myname} and my IP ${myip}"
  drpcli machines runaction $RS_UUID getca certs/root $ca_name | jq -r . > /etc/kubernetes/pki/etcd/${profile}-ca.pem
  drpcli certs csr $ca_name $myname $RS_IP $myip $(hostname) {{if .ParamExists "krib/cluster-master-vip" }}{{ .Param "krib/cluster-master-vip" }}{{end}} > tmp.csr
  drpcli machines runaction $RS_UUID signcert certs/root $ca_name certs/root-pw $ca_pw certs/csr "$(jq .CSR tmp.csr)" certs/profile $profile | jq -r . > /etc/kubernetes/pki/etcd/$profile.pem
  jq -r .Key tmp.csr > /etc/kubernetes/pki/etcd/$profile-key.pem
  rm tmp.csr
}

{{if .ParamExists "etcd/servers" -}}
get_endpoints() {
  ENDPOINTS=""
  {{ $port := .Param "etcd/client-port" -}}
  {{- range $elem := .Param "etcd/servers"}}
  ENDPOINTS="${ENDPOINTS},https://{{ $elem.Address }}:{{ $port }}"
  {{ end -}}
  ENDPOINTS="--endpoints=${ENDPOINTS:1}"
  echo ${ENDPOINTS}
}


get_member_list() {
  set +e
  ENDPOINTS=$1
  export ETCDCTL_API=3
  echo `etcdctl --cert=/etc/kubernetes/pki/etcd/client.pem \
   --key=/etc/kubernetes/pki/etcd/client-key.pem \
   --cacert=/etc/kubernetes/pki/etcd/client-ca.pem \
   --endpoints=${ENDPOINTS} \
   member list 2>/dev/null`
  set -e
}

get_member_id() {
  set +e
  ENDPOINTS=$1
  export ETCDCTL_API=3
  MEMBER_ID=`etcdctl --cert=/etc/kubernetes/pki/etcd/client.pem \
   --key=/etc/kubernetes/pki/etcd/client-key.pem \
   --cacert=/etc/kubernetes/pki/etcd/client-ca.pem \
   --endpoints=${ENDPOINTS} \
   member list | grep ${ETCD_IP} | awk -F', ' '{print $1}'`
  set -e
  echo ${MEMBER_ID}
}
{{ end -}}

echo "Configure the etcd cluster"

ETCD_CLUSTER_NAME={{.Param "etcd/name"}}
ETCD_PEER_PORT={{.Param "etcd/peer-port"}}
ETCD_CLIENT_PORT={{.Param "etcd/client-port"}}
{{ if .ParamExists "etcd/ip" -}}
ETCD_IP={{ .Param "etcd/ip" }}
{{ else -}}
ETCD_IP={{ .Machine.Address }}
{{ end -}}

# Either set controller IP to a param, or default to the DRP IP
{{ if .ParamExists "etcd/controller-ip" -}}
ETCD_CONTROLLER_IP={{ .Param "etcd/controller-ip" }}
{{ else -}}
ETCD_CONTROLLER_IP={{ .ProvisionerAddress }}
{{ end -}}

{{if eq (.ParamExists "etcd/servers") false -}}
# add server management params if missing
echo "Add initial variables to track members."
drpcli -T "$PROFILE_TOKEN" profiles add "$CLUSTER_PROFILE" param "etcd/servers" to "[]" || true
{{ end -}}

{{if eq (.ParamExists "etcd/servers-done") false -}}
drpcli -T "$PROFILE_TOKEN" profiles add "$CLUSTER_PROFILE" param "etcd/servers-done" to "[]" || true
{{ end -}}

# Get the number of servers to create
ETCD_SERVER_COUNT={{.Param "etcd/server-count"}}
echo "Creating $ETCD_SERVER_COUNT servers"

echo "Electing etcd members to cluster profile: $CLUSTER_PROFILE"
ETCD_INDEX=$(add_me_if_not_count "etcd/servers" $ETCD_SERVER_COUNT $ETCD_IP)

echo "Added myself to cluster profile, my index is ${ETCD_INDEX}"

if [[ $ETCD_INDEX == notme ]] ; then
  echo "I am not an ETCD server.  Move on."
  wait_for_count "etcd/servers-done" $ETCD_SERVER_COUNT
  exit 0
fi

CLIENT_CA=${ETCD_CLUSTER_NAME}-client-ca
PEER_CA=${ETCD_CLUSTER_NAME}-peer-ca

EXISTING_INDEX=$(find_me "etcd/servers-done" "Uuid" $RS_UUID)
if [[ $EXISTING_INDEX == notme ]] ; then
  {{if .ParamExists "certs/root" -}}

  echo "Certs plugin detected....setting up CA"
  # If we are INDEX=0, let's setup the root certs for building keys
  if [[ $ETCD_INDEX == "0" ]] ; then
    echo "We are first machine in cluster, setting up the root certs..."
    # Are certs built yet?

    # We only need 2 sets of CAs. One for client/server communications, and one for peer-to-peer communications.
    # First, setup the client/server
    if ! drpcli machines runaction $RS_UUID getca certs/root $CLIENT_CA 2>/dev/null >/dev/null ; then
      CLIENT_CA_PW=$(drpcli machines runaction $RS_UUID makeroot certs/root $CLIENT_CA | jq -r .)
      echo "  Client CA created as $CLIENT_CA and now adding to profile: $CLUSTER_PROFILE"
      drpcli -T "$PROFILE_TOKEN" profiles add "$CLUSTER_PROFILE" param "etcd/client-ca-name" to "$CLIENT_CA" || true
      drpcli -T "$PROFILE_TOKEN" profiles add "$CLUSTER_PROFILE" param "etcd/client-ca-pw" to "$CLIENT_CA_PW" || true
    else
      if [[ $(get_param "etcd/client-ca-pw") == null ]] ; then
        xiterr 1 "Client CA Exists ($CLIENT_CA), but we did not set password.  Need to reset!!"
      else
        echo "  Client CA $CLIENT_CA configured"
      fi
    fi

    # Next, setup peer-to-peer
    if ! drpcli machines runaction $RS_UUID getca certs/root $PEER_CA 2>/dev/null >/dev/null ; then
      PEER_CA_PW=$(drpcli machines runaction $RS_UUID makeroot certs/root $PEER_CA | jq -r .)
      drpcli -T "$PROFILE_TOKEN" profiles add "$CLUSTER_PROFILE" param "etcd/peer-ca-name" to "$PEER_CA" || true
      drpcli -T "$PROFILE_TOKEN" profiles add "$CLUSTER_PROFILE" param "etcd/peer-ca-pw" to "$PEER_CA_PW" || true
    else
      if [[ $(get_param "etcd/peer-ca-pw") == null ]] ; then
        xiterr 1 "PEER CA Exists, but we didn't set password.  Need to reset!!"
      fi
    fi

    # On the assumption that we'll want to backup the etcd cluster externally (from DRP host or a "controller")
    # Generate a client cert for the controller
    echo "Generating controller client certificate with IP ${ETCD_CONTROLLER_IP}"
    # First, get the CA cert into a param
    drpcli machines runaction $RS_UUID getca certs/root $CLIENT_CA | jq -r . > tmp.ca
    drpcli -T "$PROFILE_TOKEN" profiles add "$CLUSTER_PROFILE" param "etcd/client-ca-cert" to "\"$(awk '{printf "%s\\n", $0}' tmp.ca)\""

    # Next, generate a client cert and key for the controller's IP
    drpcli certs csr client $ETCD_CONTROLLER_IP > tmp.csr
    drpcli machines runaction $RS_UUID signcert certs/root $CLIENT_CA certs/root-pw $CLIENT_CA_PW certs/csr "$(jq .CSR tmp.csr)" certs/profile client | jq -r . > controller.pem
    jq -r .Key tmp.csr > controller.key

    # Now put the etcd controller cert details _back_ into params, to be extracted on the controller
    drpcli -T "$PROFILE_TOKEN" profiles add "$CLUSTER_PROFILE" param "etcd/controller-client-cert" to "\"$(awk '{printf "%s\\n", $0}' controller.pem)\""
    drpcli -T "$PROFILE_TOKEN" profiles add "$CLUSTER_PROFILE" param "etcd/controller-client-key" to "\"$(awk '{printf "%s\\n", $0}' controller.key)\""

    # Clean up
    rm {tmp.ca,tmp.csr,controller.pem,controller.key}

  fi
  {{else -}}
  xiterr 1 "STAGE REQUIRES CERT PLUGIN!!  It is freely available, download from RackN SaaS."
  {{end}}
fi

echo "Waiting for ${ETCD_SERVER_COUNT} servers to start"
wait_for_count "etcd/servers" $ETCD_SERVER_COUNT

echo "${ETCD_SERVER_COUNT} servers started!"

CLIENT_CA_PW=$(wait_for_variable "etcd/client-ca-pw")
PEER_CA_PW=$(wait_for_variable "etcd/peer-ca-pw")

mkdir -p /var/lib/etcd
mkdir -p /etc/kubernetes/pki/etcd

ETCD_NAME="etcd$ETCD_INDEX"

build_cert "client" $CLIENT_CA $CLIENT_CA_PW $ETCD_NAME $ETCD_IP
build_cert "peer" $PEER_CA $PEER_CA_PW $ETCD_NAME $ETCD_IP

ETCD_URLS=""
INDEX=0
OLD_IFS=$IFS
IFS=" " ; while read ip ; do
  if [[ $INDEX -gt 0 ]] ; then
    ETCD_URLS="${ETCD_URLS},"
  fi
  ETCD_URLS="${ETCD_URLS}etcd${INDEX}=https://${ip}:${ETCD_PEER_PORT}"
  INDEX=$(($INDEX+1))
done <<< $(get_param "etcd/servers" | jq -r '.[].Address')
IFS=$OLD_IFS

TMP_DIR=/tmp/etcd-tmp
INSTALL_DIR=/usr/local/bin
if [[ $OS_FAMILY == coreos ]] ; then
  INSTALL_DIR=/opt/bin
fi

mkdir -p ${TMP_DIR}

echo "Download etcd version: v${ETCD_VERSION}"
# Allow for a local repository for installation files
{{if .ParamExists "krib/package-repository" -}}
KRIB_REPO={{.Param "krib/package-repository"}}
{{end -}}

if [[ ! -z "$KRIB_REPO" ]] ; then
  download -L ${KRIB_REPO}/etcd-${ETCD_VERSION}-linux-amd64.tar.gz -o ${TMP_DIR}/etcd-${ETCD_VERSION}-linux-amd64.tar.gz
else
  download -L https://github.com/etcd-io/etcd/releases/download/${ETCD_VERSION}/etcd-${ETCD_VERSION}-linux-amd64.tar.gz -o ${TMP_DIR}/etcd-${ETCD_VERSION}-linux-amd64.tar.gz
fi

echo "Install etcd version: ${ETCD_VERSION}"
tar -C ${INSTALL_DIR} -xzf ${TMP_DIR}/etcd-${ETCD_VERSION}-linux-amd64.tar.gz --strip-components=1

CLUSTER_STATE="new"
if [[ $EXISTING_INDEX != notme ]] ; then
  CLUSTER_STATE="existing"
  ENDPOINTS=$(get_endpoints)

  if [[ "$(get_member_list ${ENDPOINTS})" == "" ]] ; then
    xiterr 1 "etcd/servers-done is not empty but no cluster members are up.  Did you forget to run krib-cluster-reset?"
  fi

  MEMBER_ID=$(get_member_id ${ENDPOINTS})
  export ETCDCTL_API=3

  if [[ "${MEMBER_ID}" != "" ]] ; then
    etcdctl --cert=/etc/kubernetes/pki/etcd/client.pem \
     --key=/etc/kubernetes/pki/etcd/client-key.pem \
     --cacert=/etc/kubernetes/pki/etcd/client-ca.pem \
     --endpoints=${ENDPOINTS} \
     member remove ${MEMBER_ID}
  fi

  etcdctl --cert=/etc/kubernetes/pki/etcd/client.pem \
   --key=/etc/kubernetes/pki/etcd/client-key.pem \
   --cacert=/etc/kubernetes/pki/etcd/client-ca.pem \
   --endpoints=${ENDPOINTS} \
   member add ${ETCD_NAME} --peer-urls https://${ETCD_IP}:${ETCD_PEER_PORT}
fi

cat << EOF > /etc/etcd.env
PEER_NAME=${ETCD_NAME}
ADVERTISE_IP=${ETCD_IP}
CLIENT_PORT=${ETCD_CLIENT_PORT}
PEER_PORT=${ETCD_PEER_PORT}
URLS=${ETCD_URLS}
EOF

cat >/etc/systemd/system/etcd.service <<EOF
[Unit]
Description=etcd
Documentation=https://github.com/coreos/etcd
Conflicts=etcd.service
Conflicts=etcd2.service

[Service]
EnvironmentFile=/etc/etcd.env
Type=notify
Restart=always
RestartSec=5s
LimitNOFILE=40000
TimeoutStartSec=0

ExecStart=${INSTALL_DIR}/etcd \
 --name \${PEER_NAME} \
 --data-dir /docker/etcd \
 --listen-client-urls https://\${ADVERTISE_IP}:\${CLIENT_PORT} \
 --advertise-client-urls https://\${ADVERTISE_IP}:\${CLIENT_PORT} \
 --listen-peer-urls https://\${ADVERTISE_IP}:\${PEER_PORT},http://127.0.0.1:\${PEER_PORT} \
 --initial-advertise-peer-urls https://\${ADVERTISE_IP}:\${PEER_PORT} \
 --cert-file=/etc/kubernetes/pki/etcd/client.pem \
 --key-file=/etc/kubernetes/pki/etcd/client-key.pem \
 --client-cert-auth --trusted-ca-file=/etc/kubernetes/pki/etcd/client-ca.pem \
 --peer-cert-file=/etc/kubernetes/pki/etcd/peer.pem --peer-key-file=/etc/kubernetes/pki/etcd/peer-key.pem \
 --peer-client-cert-auth --peer-trusted-ca-file=/etc/kubernetes/pki/etcd/peer-ca.pem \
 --initial-cluster \${URLS} --initial-cluster-token my-etcd-token --initial-cluster-state ${CLUSTER_STATE}

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
systemctl enable etcd
systemctl start etcd
systemctl status etcd

echo "Etcd started, lets go!"
add_me_if_not_count "etcd/servers-done" $ETCD_SERVER_COUNT $ETCD_IP

echo "Waiting for ${ETCD_SERVER_COUNT} servers to complete etcd install"
wait_for_count "etcd/servers-done" $ETCD_SERVER_COUNT

rm -rf ${TMP_DIR}

exit 0
