#!/usr/bin/env bash
# Kubernetes Rebar Integrated Boot (KRIB) Rancher Longhorn Installer
set -e

# Get access and who we are.
{{template "setup.tmpl" .}}

echo "Run helm install on the master (skip for minions)..."

{{if .ParamExists "krib/cluster-profile" -}}
CLUSTER_PROFILE={{.Param "krib/cluster-profile"}}
PROFILE_TOKEN={{.GenerateProfileToken (.Param "krib/cluster-profile") 7200}}
{{else -}}
echo "Missing krib/cluster-profile on the machine!"
exit 1
{{end -}}

{{template "krib-lib.sh.tmpl" .}}

MASTER_INDEX=$(find_me $KRIB_MASTERS_PARAM "Uuid" $RS_UUID)
echo "My Master index is $MASTER_INDEX"

echo "Linking the Rancher Longhorn working directory into place."
mkdir -p /var/lib/rancher
mkdir -p /mnt/hdd/rancher/longhorn
ln -s /mnt/hdd/rancher/longhorn /var/lib/rancher/longhorn

# iscsi-tools needed on all cluster members
if ! which iscsiadm ; then
  install iscsi-initiator-utils
fi

if [[ $MASTER_INDEX != notme ]] ; then
  if [[ $MASTER_INDEX == 0 ]] ; then
    export KUBECONFIG=/etc/kubernetes/admin.conf
    if ! which wget ; then
      install wget
    fi

    echo "Start Rancher Longhorn Install"
    LONGHORNURL={{ .Param "krib/longhorn-config" }}
    LONGHORNCLEANUP=$(echo $LONGHORNURL | sed 's/deploy\/longhorn.yaml/scripts\/cleanup.sh/')
    wget -O /tmp/longhorn.yaml $LONGHORNURL
    sed -i 's/#- --driver/- --driver/' /tmp/longhorn.yaml
    sed -i 's/#- flexvolume/- csi/' /tmp/longhorn.yaml
    sed -i 's/type: LoadBalancer/type: ClusterIP/' /tmp/longhorn.yaml

    if [[ -n $(kubectl get namespaces | grep -w rancher-longhorn) ]] ; then
      echo "Purging existing Rancher Longhorn install"
      curl -sSfL $LONGHORNCLEANUP | bash
      kubectl delete -f /tmp/longhorn.yaml
    fi

    echo "Installing Rancher Longhorn"
    kubectl apply -f /tmp/longhorn.yaml

    if [[ $(kubectl -n kube-system get services -o json | jq -r '.items | contains([{"metadata":{"name":"nginx-ingress-controller"}}])') == "true" ]] ; then
      echo "Wait until nginx-ingress-controller gets a LoadBalancer IP"
      INGRESSIP=$(wait_for_ingress)

      echo "expanding inline template to /tmp/longhorn-db-ingress.yaml"
      cat > /tmp/longhorn-db-ingress.yaml << EOF
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: longhorn-db
  namespace: longhorn-system
  annotations:
    kubernetes.io/ingress.class: nginx
{{- if .ParamExists "certmanager/email"}}{{- if .ParamExists "ingress/longhorn-dashboard-hostname"}}
    kubernetes.io/tls-acme: "true"
{{- end}}{{- end}}
spec:
  rules:
{{- if .ParamExists "ingress/longhorn-dashboard-hostname"}}
  - host: "{{.Param "ingress/longhorn-dashboard-hostname"}}"
{{- else}}
  - host: "longhorn-db.$INGRESSIP.xip.io"
{{- end}}
    http:
      paths:
      - backend:
          serviceName: longhorn-frontend
          servicePort: 80
  tls:
  - hosts:
{{- if .ParamExists "ingress/longhorn-dashboard-hostname"}}
    - "{{.Param "ingress/longhorn-dashboard-hostname"}}"
{{- else}}
    - "longhorn-db.$INGRESSIP.xip.io"
{{- end}}
{{- if .ParamExists "certmanager/email"}}{{- if .ParamExists "ingress/longhorn-dashboard-hostname"}}
    secretName: longhorn-db-tls
{{- end}}{{- end}}
EOF

      if [[ $(kubectl get -n longhorn-system ingress -o json | jq -r '.items | contains([{"metadata":{"name":"longhorn-db"}}])') == "true" ]] ; then
        echo "Removing existing longhorn-dashboard Ingress"
        kubectl delete -f /tmp/longhorn-dashboard-ingress.yaml
      fi
      echo "Creating longhorn-db Ingress"
      kubectl apply -f /tmp/longhorn-db-ingress.yaml
{{- if .ParamExists "ingress/longhorn-dashboard-hostname"}}
      echo "Ensure dns record for {{.Param "ingress/longhorn-dashboard-hostname"}} points to $INGRESSIP"
{{- else}}
      echo "Longhorn dashboard ingress at https://longhorn-db.$INGRESSIP.xip.io"
{{- end}}
    fi

    echo "expanding inline template to /tmp/longhorn-storageclass.yaml"
    cat > /tmp/longhorn-storageclass.yaml << EOF
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: longhorn
provisioner: rancher.io/longhorn
parameters:
  numberOfReplicas: "3"
  staleReplicaTimeout: "30"
  fromBackup: ""
EOF

    echo "Creating longhorn StorageClass"
    kubectl apply -f /tmp/longhorn-storageclass.yaml

    # Clean up
    rm -f /tmp/longhorn.yaml
    rm -f /tmp/longhorn-dashboard-ingress.yaml
    rm -f /tmp/longhorn-storageclass.yaml
  fi
fi

echo "Finished successfully"
exit 0
