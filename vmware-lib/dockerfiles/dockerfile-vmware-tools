###
#  Below powershell install based on the Microsoft published Dockerfile spec:
#  https://github.com/PowerShell/PowerShell-Docker/blob/master/release/lts/debian10/docker/Dockerfile
###
ARG fromTag=buster
ARG imageRepo=bitnami/minideb
FROM ${imageRepo}:${fromTag} AS installer-env
MAINTAINER "The RackN Team <support@rackn.com>"

# Define Args for the needed to add the package
ARG PS_VERSION=6.2.7
ARG PS_PACKAGE=powershell-${PS_VERSION}-linux-x64.tar.gz
ARG PS_PACKAGE_URL=https://github.com/PowerShell/PowerShell/releases/download/v${PS_VERSION}/${PS_PACKAGE}
ARG PS_INSTALL_VERSION=7-lts

# Download the Linux tar.gz and save it
ADD ${PS_PACKAGE_URL} /tmp/linux.tar.gz

# define the folder we will be installing PowerShell to
ENV PS_INSTALL_FOLDER=/opt/microsoft/powershell/$PS_INSTALL_VERSION

# Create the install folder
RUN mkdir -p ${PS_INSTALL_FOLDER}

# Unzip the Linux tar.gz
RUN tar zxf /tmp/linux.tar.gz -C ${PS_INSTALL_FOLDER}

# Start a new stage so we lose all the tar.gz layers from the final image
FROM ${imageRepo}:${fromTag}

RUN install_packages gnupg

RUN echo "===> Setting up environment..."                     && \
    install_packages apt-utils software-properties-common        \
    python3-software-properties                               && \
    echo "deb http://ppa.launchpad.net/ansible/ansible/ubuntu bionic main" > /etc/apt/sources.list.d/ansible.list  && \
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 93C4A3FD7BB9C367  && \
    apt -y update                                             && \
    install_packages ansible                                  && \
    install_packages                                             \
        bash vim git curl wget dnsutils html2text                \
        openssh-client python3 openssl ca-certificates           \
        python3-pip python3-wheel libffi-dev libssl-dev          \
        python3-dnspython python3-boto python3-netaddr           \
        python3-setuptools gnupg git                          && \
    python3 -m pip install --upgrade pip cffi                 && \
    python3 -m pip install --no-cache-dir pyvmomi             && \
    python3 -m pip install --no-cache-dir --upgrade yq        && \
    python3 -m pip install --upgrade pip setuptools           && \
    python3 -m pip install --upgrade git+https://github.com/vmware/vsphere-automation-sdk-python.git

RUN echo "===> Install Ansible Galaxy Communities VMware..."  && \
    curl -fsSL -o community.vmware.tar.gz https://s3-us-west-2.amazonaws.com/get.rebar.digital/artifacts/vmtools/community-vmware-1.2.1-dev8.tar.gz  && \
    ansible-galaxy collection install ./community.vmware.tar.gz && \
    rm -f community.vmware.tar.gz

### REALLY weird - had to install twice, to get python and pyvmomi
###        environment setup correctly for ansible to "see" it
RUN echo "===> Installing PyVMOMI..."                       && \
    install_packages python3-pip                            && \
    python3 -m pip install --no-cache-dir pyvmomi

RUN echo "===> Fixing python 2/3 problems for ansible..."   && \
    echo "localhost ansible_python_interpreter=/usr/bin/python3" >> /etc/ansible/hosts

RUN curl -fsSL -o ovftool.bundle https://s3-us-west-2.amazonaws.com/get.rebar.digital/artifacts/vmtools/VMware-ovftool-4.4.0-15722219-lin.x86_64.bundle  && \
    chmod +x ovftool.bundle && \
    ./ovftool.bundle --eulas-agreed --required --console && \
    rm -f ovftool.bundle

# GoVC install bits
ENV GOVC_VER="v0.23.0"
ENV GOVC_SHA256="6de2afb3276b950ded9b6bd59ec6b0c57e43a4acdbb0450783d7c9ea85dd7ca4"
ENV DRPCLI_VER="v4.4.0"
ENV DRPCLI_SHA256="4c46d0169e7bc37ac1ec754b4b00dd02fed5885b6007bad7593a9530304e695d"
ADD https://s3-us-west-2.amazonaws.com/get.rebar.digital/artifacts/govc/govc-multi-disk-try2 ./
ADD https://rebar-catalog.s3-us-west-2.amazonaws.com/drpcli/${DRPCLI_VER}/amd64/linux/drpcli /usr/bin/
RUN install_packages bash dnsutils wget curl apt-utils; \
    mv govc-multi-disk-try2 /usr/bin/; \
    chmod 755 /usr/bin/govc-multi-disk-try2; \
    ln -s /usr/bin/govc-multi-disk-try2 /usr/bin/govc; \
    chmod 755 /usr/bin/drpcli; \
    ln -s /usr/bin/drpcli /usr/bin/jq
ARG PS_VERSION=7.0.0
ARG PS_INSTALL_VERSION=7-lts

# Copy only the files we need from the previous stage
COPY --from=installer-env ["/opt/microsoft/powershell", "/opt/microsoft/powershell"]

# Define Args and Env needed to create links
ARG PS_INSTALL_VERSION=7-lts
ENV PS_INSTALL_FOLDER=/opt/microsoft/powershell/$PS_INSTALL_VERSION \
    \
    # Define ENVs for Localization/Globalization
    DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false \
    LC_ALL=en_US.UTF-8 \
    LANG=en_US.UTF-8 \
    # set a fixed location for the Module analysis cache
    PSModuleAnalysisCachePath=/var/cache/microsoft/powershell/PSModuleAnalysisCache/ModuleAnalysisCache \
    POWERSHELL_DISTRIBUTION_CHANNEL=PSDocker-Debian-10

# Install dependencies and clean up
RUN install_packages \
    # less is required for help in powershell
        less \
    # requied to setup the locale
        locales \
    # required for SSL
        ca-certificates \
        gss-ntlmssp \
        libicu63 \
        libssl1.1 \
        libc6 \
        libgcc1 \
        libgssapi-krb5-2 \
        liblttng-ust0 \
        libstdc++6 \
        zlib1g \
    # PowerShell remoting over SSH dependencies
        openssh-client \
    && apt-get dist-upgrade -y \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    # enable en_US.UTF-8 locale
    && sed -i 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/g' /etc/locale.gen \
    # generate locale
    && locale-gen && update-locale

    # Give all user execute permissions and remove write permissions for others
RUN chmod a+x,o-w ${PS_INSTALL_FOLDER}/pwsh \
    # Create the pwsh symbolic link that points to powershell
    && ln -s ${PS_INSTALL_FOLDER}/pwsh /usr/bin/pwsh \
    # Create the pwsh-lts symbolic link that points to powershell
    && ln -s ${PS_INSTALL_FOLDER}/pwsh /usr/bin/pwsh-lts \
    # intialize powershell module cache
    # and disable telemetry
    && export POWERSHELL_TELEMETRY_OPTOUT=1 \
    && pwsh \
        -NoLogo \
        -NoProfile \
        -Command " \
          \$ErrorActionPreference = 'Stop' ; \
          \$ProgressPreference = 'SilentlyContinue' ; \
          while(!(Test-Path -Path \$env:PSModuleAnalysisCachePath)) {  \
            Write-Host "'Waiting for $env:PSModuleAnalysisCachePath'" ; \
            Start-Sleep -Seconds 6 ; \
          }"

RUN apt-get clean; apt-get autoclean

ENTRYPOINT /usr/bin/drpcli machines processjobs
