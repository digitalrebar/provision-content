---
Name: "ansible-vmware-object-rename"
Description: "Rename a vSphere object via Ansible Galaxy module"
Documentation: |
  Renames an object in vSphere using the Ansible Galaxy module.  Requires
  setting the Param datastrucute to specific values based on the object you
  are trying to rename.  Documentation can be found at:

    * https://docs.ansible.com/ansible/latest/collections/community/vmware/vmware_object_rename_module.html

ExtraClaims:
  - scope: "machines"
    action: "*"
    specific: "*"
  - scope: "profiles"
    action: "*"
    specific: "*"
Meta:
  icon: "terminal"
  color: "purple"
  title: "Digital Rebar Community Content"
  feature-flags: "sane-exit-codes"
RequiredParams:
  - "esxi/cluster-name"
  - "esxi/dvs-mappings"
OptionalParams: []
Templates:
  - Name: "ansible-vmware-object-rename.sh.tmpl"
    Contents: |
      #!/usr/bin/env bash
      # Generate the Ansible playbook for migrating VMK

      ### setup.tmpl
      {{ template "setup.tmpl" . }}

      ### govc-lib.sh.tmpl
      {{ template "govc-lib.sh.tmpl" .}}

      PLAYBOOK="/tmp/ansible-vmware-migrate-vmk-playbook.yaml"
      VC_HOST={{ .ParamExpand "govc/url" }}
      VC_USER={{ .Param "govc/username" }}
      VC_PASS={{ .Param "govc/password" }}
      VAL={{ if eq (.Param "govc/insecure") true -}}no{{ else }}yes{{ end }}
      ADDITIONAL_OPTIONS="$ANSIBLE_VERBOSE {{ .Param "ansible/additional-options" }}"

      # this is bad - needs to accommodate multiple object types being
      # renamed, the override only does one override thing - should be a
      # Map of with object_name as the key and value is the override value
      {{ if .ParamExists "esxi/object-rename-override" -}}
      OVER="{{ .ParamExpand "esxi/object-rename-override" }}"
      OVER_MSG="Overriding 'new_name' since 'esxi/object-rename-override' is set (to '$OVER')."
      {{ end -}}

      # write out a playbook for each object found in the Param, based on
      # Global variables that are set in the golang 'range' statement
      write_playbook() {

      echo "Writing header for playbook YAML..."

      cat <<EOHDR > $PLAYBOOK
      ---
      - hosts: localhost
        gather_facts: false
        tasks:
      EOHDR

      echo "WRITING migration playbook task for member '$MEM'"
      cat <<EOPB >> $PLAYBOOK
        - name: Rename object $OBJ_NAME to $NEW_NAME
          delegate_to: localhost
          community.vmware.vmware_object_rename:
            hostname: $VC_HOST
            username: $VC_USER
            password: $VC_PASS
            new_name: $NEW_NAME
            $OBJECT
            object_type: $OBJ_TYPE
            validate_certs: $VAL
      EOPB

      } # end write_playbook()

      {{ range $obj := (.Param "esxi/object-rename") -}}
      NEW_NAME="" OBJECT="" OBJ_NAME="" OBJ_TYPE="" DO_PLAYBOOK=""

      echo "Starting rename operation for '{{ $obj }}'"

      if [[ -z "$OVER" ]]
      then
        NEW_NAME="{{ $obj.new_name }}"
      else
        echo "$OVER_MSG"
        NEW_NAME="$OVER"
      fi

      OBJECT="{{ if $obj.object_name }}object_name: {{ $obj.object_name }}{{ else }}object_moid: {{ $obj.object_moid }}{{ end }}"
      OBJ_NAME="$(echo $OBJECT | awk ' { print $NF }')"
      OBJ_TYPE="{{ $obj.object_type }}"

      ###
      #  in some cases, we may have an esxi/object-rename structure, with an
      #  object to rename for a feature that is disabled - for example; VSAN
      #
      #  below # we try to catch those use cases and skip building a playbook
      #  for each test condition, set DO_PLAYBOOK to 'true' to generate the
      #  playbook, otherwise it will be skipped.  For helpful message output,
      #  also set the SKIP_TESTS+="foo test" with which test was skipped
      ###

      # Test 1: Check if VSAN is disabled
      SKIP_TESTS+="VSAN enabled"
      DO_VSAN='{{ .Param "esxi/vsan-enabled" }}'
      [[ "$DO_VSAN" == "false" ]] && echo "VSAN is disabled by 'esxi/vsan-enabled'"
      DO_PLAYBOOK="$DO_VSAN"

      [[ "$DO_PLAYBOOK" == "true" ]] write_playbook

      {{ end -}}

      if [[ -n "$SKIP_TESTS" ]]
      then
        echo ""
        echo "One of the test conditions to generate playbook were invoked."
        echo "Tests:  $SKIP_TESTS"
        echo ""
      fi

      # run ansible if we have a PLAYBOOK generated with size greater than zero
      if [[ -s "$PLAYBOOK" ]]
      then
        export ANSIBLE_FORCE_COLOR=0

        echo ""
        echo "generated playbook:"
        echo "=================================== BEGIN ==================================="
        cat $PLAYBOOK
        echo "==================================== END ===================================="
        echo ""

        ansible-playbook $ADDITIONAL_OPTIONS $PLAYBOOK
      else
        echo "NOTICE: No playbook file was generated to execute. ('$PLAYBOOK')"
      fi

