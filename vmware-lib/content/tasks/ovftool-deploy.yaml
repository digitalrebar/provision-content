---
Name: "ovftool-deploy"
Description: "A task to deploy OVAs using 'ovftool'."
Documentation: |
  This task deploys an OVA appliance utilizing the ``ovftool`` which is found
  in the ``vmware-tools`` context container.

  This requires the JSON configuration to be described in the ``ova/param-json``
  Param to build up the ``ovftool`` command line options.  ``govc import.spec``
  (also in the ``vmware-tools`` context container) can be used to generate the
  JSON template for a given OVA file.

  The import.spec formats the JSON structure in an inconsistent way from how
  OVFTool command line flags are operated.  As a consequence, mapping of
  arguments must be performed in a lot of cases.  It is impossible to map
  all argument possibilities without seeing how they are output by OVFTool in
  conjunction with ``govc import.spec``.  Additionally, ``ovftool`` can be
  used to determine what the OVF properties are for customization.  Examples:

    * ``govc import.spec VMware-Cloud-Builder-4.1.0.0-16961769_OVF10.ova``
    * or ``ovftool --schemaValidate VMware-Cloud-Builder-4.1.0.0-16961769_OVF10.ova``

  The GoVC command produces a JSON data structure which should be valid for use
  in conjunction with ``ovo/param-json`` or ``ova/template-json`` Params.

  This tool attempts to map as many values as possible.  Where the mappings don't
  exist for your use case, there are some options available to customize the
  OVFTool command line flags.

    1.  Use the Param ``ova/ovftool-extra-options`` to add command line flag overrides - see the Param for more documentation.
    2.  For more advanced/flexible use cases in the field, create a Shell script template defined by the Param ``ova/ovftool-deploy-more-mapping-template``

  The template override (option 2) is a much more advanced use case.  It utilizes
  Golang Templating to parse the JSON data structure options, and remap them
  to OVFTool arguments.  Please review the Template script that this Task calls
  for details.

  .. warning:: If you use the template override option, your template must absolutely
               conform to the exact white space formatting, golang templating, etc
               rules as is used in this template.  Review the shell variable build up
               for ``MORE``.

  Use of the command ``ovftool --help`` can help map OVFtool arguments to the JSON
  spec template structure.

  .. note:: If you encounter any new mappings that should be in this Task, please
            contact RackN (support@rackn.com) and provide that information.  We would
            like to make this as complete as possible in product; so in-the-field
            template maintenance is not necessary.

Meta:
  icon: "terminal"
  color: "blue"
  title: "Digital Rebar Community Content"
  feature-flags: "sane-exit-codes"
RequiredParams:
  - ova/param-json
OptionalParams:
  - ova/ovftool-deploy-more-mapping-template
  - ova/ovftool-extra-options
Templates:
  - Name: "ovftool-deploy.sh"
    Contents: |
      #!/usr/bin/env bash
      # Deploy an OVA appliance using 'ovftool'
      # RackN Copyright 2020

      # disable shell history expansion with '!' - because vmware operators all seem
      # to love '!' in their passwords...
      set +H
      set -e

      # start template setup.tmpl
      {{ template "setup.tmpl" .}}

      # start template govc-setup.sh.tmpl
      # we need values in this to auth against vcenter for deployment
      {{ template "govc-setup.sh.tmpl" . }}

      # start template ovftool-deploy.sh
      {{ if .ParamExists "ova/param-json" -}}
      echo "JSON configuration data found in Param 'ova/param-json'"
      {{ else -}}
      xiterr 1 "No required JSON configuration data found in Param 'ova/param-json'"
      {{ end -}}

      OVFCMD=$(mktemp /tmp/ovftool.XXXXXX.sh)
      > $OVFCMD
      chmod +x $OVFCMD

      # used to properly build up the vi:// string syntax depending if we're vCenter or ESXi
      ABOUT=$(govc about -json)
      [[ -z "$ABOUT" ]] && xiterr 1 "'govc about' returned empty results"
      API_TYPE=$(jq -r '.About.ApiType' <<< $ABOUT)
      [[ -z "$API_TYPE" ]] && xiterr 1 "No 'API Type' found in 'govc about' results"

      {{ $ovajson := ( .ComposeParam "ova/param-json" ) -}}
      {{ $propmap := get (.Param "ova/param-json") "PropertyMapping" -}}
      {{ $netmap := get (.Param "ova/param-json") "NetworkMapping" -}}

      ###
      #  remap JSON template constructs to OVFTool command line usage
      ###

      # thank you for inconsistent ovftool argument flags from govc generated
      # template json values -vs- ovftool usage ... thank you very much
      # this allows for in-the-field injection of remappings if needed
      {{ if ( .ParamExists "ova/ovftool-deploy-more-mapping-template" ) -}}
      {{ .CallTemplate (.Param "ova/ovftool-deploy-more-mapping-template" ) .}}
      {{- end }}

      {{ if $ovajson.DiskProvisioning }}MORE+="--diskMode=\"{{ $ovajson.DiskProvisioning }}\" "{{ end }}
      {{ if $ovajson.IPAllocationPolicy }}MORE+="--ipAllocationPolicy=\"{{ $ovajson.IPAllocationPolicy }}\" "{{ end }}
      {{ if $ovajson.IPProtocol }}MORE+="--ipProtocol=\"{{ $ovajson.IPProtocol }}\" "{{ end }}
      {{ if $ovajson.Deployment }}MORE+="--deploymentOption=\"{{ $ovajson.Deployment }}\" "{{ end }}
      {{ if eq $ovajson.MarkAsTemplate true }}MORE+="--importAsTemplate "{{ end }}
      {{ if eq $ovajson.PowerOn true }}MORE+="--powerOn "{{ end }}
      {{ if eq $ovajson.WaitForIP true }}MORE+="--X:waitForIp "{{ end }}
      {{ if eq $ovajson.InjectOvfEnv true }}MORE+="--X:injectOvfEnv "{{ end }}

      if [[ "{{ .Param "govc/debug" }}" == "true" ]]
      then
        echo ">>> DEBUG output for 'govc about' command."
        jq '.' <<< $ABOUT
      fi

      # build correct vi:// string syntax depending on us talking to vCenter or ESXi directly
      case $API_TYPE in
        VirtualCenter)
          STRING='{{- .ParamExpand "esxi/datacenter-name" -}}/host/{{- .ParamExpand "esxi/cluster-name" -}}'
          ;;
        HostAgent)
          STRING=''
          ;;
        *)
          xiterr 1 "Unsupported API Type ('$API_TYPE') from vSphere resource. Expected 'VirtualCenter' or 'HostAgent'."
          ;;
      esac

      echo ""
      echo ">>>                                                                            <<<"
      echo ">>> NOTICE !!!  The '--acceptAllEulas' Option is set on.  This means you are   <<<"
      echo ">>>             implicitly accepting the EULA associated with this OVA.  The   <<<"
      echo ">>>             EULA should be iterated in the job log output, and it is your  <<<"
      echo ">>>             responsibility to comply with the End-User License Agreement.  <<<"
      echo ">>>                                                                            <<<"
      echo ""

      {{ if ( .Param "govc/datastore" ) }}DATASTORE="--datastore=\"{{ .ParamExpand "govc/datastore" }}\""{{ else }}
      echo ""
      echo ">>> NOTICE !!!  No 'govc/datastore' configuration was provided. Hopefully you <<<"
      echo ">>>             do not need to specify one for this deployment.               <<<"
      echo ""
      DATASTORE=""
      {{- end }}

      cat << EOOVF > $OVFCMD
      ovftool \\
        {{ .Param "ova/ovftool-options" }} \\
        {{ .Param "ova/ovftool-extra-options" }} \\
        --name='{{ $ovajson.Name }}' \\
        $MORE \\
        {{ if eq (.Param "govc/insecure") true }}--noSSLVerify \\{{ else -}}{{ end -}}
        {{- range $idx, $element := $propmap }}
        {{ $propkey := get $element "Key" }}{{ $propval := get $element "Value" }}--prop:"{{ $propkey }}"="{{ $propval }}" \\
        {{- end }}
        {{- range $idx, $element := $netmap }}
        {{ $netkey := get $element "Name" }}{{ $netval := get $element "Network" }}--net:"{{ $netkey }}"="{{ $netval }}" \\
        {{- end }}
        $DATASTORE \\
        {{ .ParamExpand "govc/ova-location" }} \\
        'vi://
              {{- .Param "govc/username" -}}:{{- .Param "govc/password" -}}
              @{{- .ParamExpand "govc/url" -}}
              {{- if ( .Param "govc/port" ) -}}:{{- .Param "govc/port" | toString -}}{{- end -}}
              /${STRING}'
      EOOVF

      echo ""
      echo "==== Show OVFTool COMMAND ===="
      echo ""

      cat $OVFCMD
      echo ""
      echo "==== End Show OVFTool ===="
      echo ""

      echo ""
      echo "==== RUN OVFTool COMMAND ===="
      echo ""

      eval $OVFCMD

      if (( $? ))
      then
        echo ""
        echo "ovftool failed - please parse job log output for more detailed output"
        echo ""
        echo "Output verbosity can be increased by setting the Param 'ova/ovftool-extra-options'"
        echo "to '--X:logToConsole=True --X:logLevel=verbose' and re-running the ovftool deployment"
        echo ""
        echo "If '--prop' flag values are specified as Boolean True/False by ovftool and the VMs"
        echo "OVA properties, you must set these values in quoted format, exactly as follows:"
        echo ""
        echo "       \"True\" or \"False\""
        echo "  or   'True' or 'False'"
        echo ""
        echo "Case and quotes (single or double will work) matter - despite the OVFTool output"
        echo "regarding syntax - these are string values not boolean."
        echo ""
      else
        echo "OVFtool command completed successfully."
      fi

      echo ""
      echo "==== DONE ===="
      echo ""

      if [[ "{{ .Param "govc/debug" }}" == "true" ]]
      then
        echo ">>> DEBUG on - not cleaning up $OVFCMD file."
      else
        echo "Cleaning up temporary '$OVFCMD' file."
        rm -f $OVFCMD
      fi

      echo ""
