---
Description: "A task wait for appliance OVA API to become available"
Name: "govc-cluster-create"
Documentation: |
  This task will create a cluster, file it in the ``esxi/cluster-folder`` if
  provided, and enroll all Machines with the same cluster designation defined
  by the Param ``esxi/cluster-name``.

ExtraClaims:
  - scope: "machines"
    action: "*"
    specific: "*"
  - scope: "profiles"
    action: "*"
    specific: "*"
Meta:
  icon: "terminal"
  color: "purple"
  title: "Digital Rebar Community Content"
  feature-flags: "sane-exit-codes"
RequiredParams:
  - "esxi/cluster-name"
OptionalParams:
  - "esxi/datacenter-name"
  - "esxi/cluster-folder"
  - "esxi/cluster-options"
Templates:
  - Name: "govc-cluster-create.sh"
    Contents: |
      #!/usr/bin/env bash
      # Cluster create and enrollment task.
      # RackN Copyright 2020

      ###
      #  NOTICE:  This template relies on the 'esxi/cluster-name' being set
      #           to a cluster name to operate on.  Additionally, each Machine
      #           that belongs in the specified cluster MUST ALSO have the
      #           Param set with the name of the clsuter.
      ###

      ### setup.tmpl
      {{ template "setup.tmpl" . }}

      ### govc-setup.sh.tmpl
      {{ template "govc-setup.sh.tmpl" .}}

      ### govc-cluster-create.sh
      JQ=$(which jq)
      [[ -z "$JQ" ]] && JQ=$(which drpjq)    || true
      [[ -z "$JQ" ]] && JQ=$(which drpclijq) || true
      [[ -z "$JQ" ]] && JQ=$(which gojq)     || true
      if [[ -z "$JQ" ]]; then
        D="$(which drpcli)"
        if [[ -n "$D" ]]; then
          ln -s $D /usr/local/bin/drpjq
          JQ="/usr/local/bin/drpjq"
        else
          xiterr 1 "Unable to find 'jq' or alternative to use."
        fi
      fi

      run_govc() {
        local _args="$*"
        echo "CMD: govc $_args"
        govc $_args
      }
      {{ $pass := "" }}
      {{ if .ParamExists "esxi/insecure-password" }}{{ $pass = ( .Param "esxi/insecure-password" ) }}{{ else }}{{ $pass = "RocketSkates"}}{{ end -}}
      USERNAME="root"
      DC='{{ .Param "esxi/datacenter-name" }}'
      CLUSTER='{{ .Param "esxi/cluster-name" }}'
      OPTIONS='{{ .Param "esxi/cluster-options" }}'
      VSAN_ENABLED='{{ .Param "esxi/vsan-enabled" }}'
      FOLDER='{{ .ParamExpand "esxi/cluster-folder" }}'
      [[ -z "$CLUSTER" ]] && xiterr 1 "'esxi/cluster-name' not specified"
      MEMBERS=$(drpcli machines list esxi/cluster-name Eq "$CLUSTER" Meta.BaseContext Ne govc | jq -r '.[].Name' | tr '\n' ' ')
      CLUSTER_PROFILE='{{ .Param "esxi/cluster-profile" }}'
      PARAM_SCUUID="esxi/vsan-data/sub-cluster-uuid"

      export GOVC_PERSIST_SESSION=false

      echo "Starting create operation with the following information:"
      echo "---------------------------------------------------------"
      echo ""
      echo "     Datacenter:  '$DC'"
      echo "         Folder:  '$FOLDER'"
      echo "        Cluster:  '$CLUSTER'"
      echo "Cluster Options:  '$OPTIONS'"
      echo "        Members:  '$MEMBERS'"
      echo ""

      if [[ -n "$DC" ]]
      then
        if govc datacenter.info "$DC" > /dev/null 2>&1
        then
          echo "Datacenter '$DC' exists already."
        else
          run_govc datacenter.create "$DC"
        fi
      else
        echo "NOTICE: 'esxi/datacenter-name' not specified"
      fi

      export GOVC_DATACENTER="$DC"

      ###
      #  FOLDER CREATE options moved to template 'govc-folder-create.sh.tmpl'
      #  not called here - as there are problems with conflicting Datacenter and
      #  folder name handling. (See CLUSTER, create in FOLD construct also)
      ###
      [[ -n "$FOLDER" ]] && printf '>>>\n>>> FOLDER CREATE process disabled, needs help\n>>>\n'

      if [[ -n "$CLUSTER" ]]
      then
        # there appears to be no 'cluster.info' to test if exists
        # this is overloading cluster.rule.info but works
        if govc cluster.rule.info -cluster "$CLUSTER" > /dev/null 2>&1
        then
          echo "Cluster '$CLUSTER' exists already."
        else
          # [[ -n "$FOLDER" ]] && FOLD="-folder=\"$FOLDER\""
          run_govc cluster.create $FOLD "$CLUSTER"
        fi

        if [[ "$VSAN_ENABLED" == "true" ]]
        then
          if ! echo "$OPTIONS" | grep -q ".*-vsan-enabled.*"
          then
            echo "Appending '-vsan-enabled' option to cluster options."
            echo "If '-vsan-autoclaim' is desired, you must set it on 'esxi/cluster-options' and rebuild."
            OPTIONS="-vsan-enabled $OPTIONS"
          fi
        fi

        if [[ -n "$OPTIONS" ]]
        then
          if govc cluster.rule.info -cluster "$CLUSTER" > /dev/null 2>&1
          then
            run_govc cluster.change $OPTIONS "$CLUSTER"
          else
            xiterr 1 "'govc/options' specified, but no 'esxi/cluster-name' exists - failed create step?"
          fi
        else
          echo "No options specified in 'esxi/cluster-options' to alter cluster with."
        fi

        # try to set based on Machien Name, FQDN, or fallback to IP Address
        # TODO:  This needs enhanced in conjunction with the govc context container
        #        to support DNS record checks in the future.
        get_member_name() {
          echo $ADDR
          # echo $MEMBER.$DNAME
        }

        # uses variable MEMBER to operate against
        cluster_add() {
          echo ">>> Running cluster.add for '$MEMBER' with IP address '$ADDR'"
          echo ">>> 'cluster.add' running in the background, no live streaming of job log data."
          run_govc cluster.add -cluster "$CLUSTER" -hostname "$HNAME" -username "$USERNAME" -password '{{ $pass }}' $PRINT >> $ADD_LOG
          echo ">>> 'cluster.add' operation for '$MEMBER' completed"

          echo ""
          echo ">>>>>>>>>>>>>>>>>>>>>>> START cluster.add log for '$MEMBER' <<<<<<<<<<<<<<<<<<<<<<<"
          cat $ADD_LOG
          echo ">>>>>>>>>>>>>>>>>>>>>>>> END cluster.add log for '$MEMBER' <<<<<<<<<<<<<<<<<<<<<<<<"
          echo ""
          rm -f $ADD_LOG
        }

        # first member gets to be leader for VSAN, wait for it to finish first
        IS_FIRST=1

        # now add Members to the cluster
        [[ -z "$MEMBERS" ]] && xiterr 1 "No members with 'esxi/cluster-name' found to operate on."
          
          # nuke all old logs, in case there are any left over from previous runs
          rm -f /tmp/cluster\.add*\.log
          for MEMBER in $MEMBERS
          do
            THUMB="$(drpcli machines get Name:$MEMBER param esxi/thumbprint-sha1 | jq -r '.' || true)"
            #DNAME=$(drpcli machines get Name:$MEMBER param dns-domain | jq -r '.')
            ADDR=$(drpcli machines show Name:$MEMBER --slim=Params,Meta | jq -r '.Address')
            [[ -n "$THUMB" ]] && PRINT="-thumbprint $THUMB" || PRINT="-noverify"
            ADD_LOG=/tmp/cluster-add.$MEMBER.$ADDR.$$.log
            echo "Initializing member '$MEMBER' log '$ADD_LOG' ... " | tee $ADD_LOG

            HNAME=$(get_member_name)
            if [[ -n "$ADDR" ]]
            then
              echo "Starting cluster setup for '$MEMBER'."
              cluster_add &
            else
              xiterr 1 "Unable to get '$MEMBER' IP Address."
            fi

            # reset our variables for next run cleanliness
          done

          # wait for all members to complete adding
          wait

          echo "All cluster member 'cluster.add' operations have completed."

      else
        echo "NOTICE:  'esxi/cluster-name' was not set, no cluster operations performed."
      fi

