---
Name: "ansible-vmware-migrate-vmk"
Description: "Migrate virtual NIC (vmk) from Standard vSwitch to Distributed vSwitch"
Documentation: |
  Migrates an existing virtual NIC (VMK) in ESXi hosts from a Standard vSwitch
  to a Distributed vSwitch.

  Utilizes the Ansible Galaxy collection ``communities.vmware``.

  Acts on ESXi nodes identified by the ``esxi/cluster-name`` Param set on the
  machines.

  Requires the ``esxi/dvs-mappings`` Param contains a ``migrate`` stanza that is
  properly filled out.

ExtraClaims:
  - scope: "machines"
    action: "*"
    specific: "*"
  - scope: "profiles"
    action: "*"
    specific: "*"
Meta:
  icon: "terminal"
  color: "purple"
  title: "Digital Rebar Community Content"
  feature-flags: "sane-exit-codes"
RequiredParams:
  - "esxi/cluster-name"
  - "esxi/dvs-mappings"
OptionalParams: []
Templates:
  - Name: "ansible-vmware-migrate-vmk.sh.tmpl"
    Contents: |
      #!/usr/bin/env bash
      # Generate the Ansible playbook for migrating VMK

      ### setup.tmpl
      {{ template "setup.tmpl" . }}

      ### govc-lib.sh.tmpl
      {{ template "govc-lib.sh.tmpl" .}}

      PLAYBOOK="/tmp/ansible-vmware-migrate-vmk-playbook.yaml"
      MEMBERS=""
      DVS_NAME=""
      VC_HOST={{ .ParamExpand "govc/url" }}
      VC_USER={{ .Param "govc/username" }}
      VC_PASS={{ .Param "govc/password" }}
      VM_MIGRATE=""
      VAL={{ if eq (.Param "govc/insecure") true -}}no{{ else }}yes{{ end }}
      CLUSTER='{{ .Param "esxi/cluster-name" }}'
      [[ -z "$CLUSTER" ]] && xiterr 1 "'esxi/cluster-name' not specified"

      get_hosts_with_dvs() {
        MEMBERS=""
        local _name _names _member
        echo "Getting hosts for cluster '$CLUSTER' and DVS '$DVS_NAME'"

        _names=$(drpcli machines list esxi/cluster-name Eq "$CLUSTER" Context Eq "" | jq -r ".[]  | select(.Params.\"esxi/dvs-memberships\" | index(\"$DVS_NAME\")) | .Name" | tr '\n' ' ')

        echo "Convert found DRP Names to ESXi node names."
        echo "      DRP Names:  $_names"

        for _name in $_names
        do
          _member=""
          _member="$(get_member_name $_name)"
          if [[ -n "$_member" ]]
          then
            echo "Found ESXi member name of '$_member'"
            MEMBERS="$MEMBERS $_member"
          else
            xiterr 1 "Could not convert Machine name '$_name' to ESXi cluster member name."
          fi
        done
        [[ -z "$MEMBERS" ]] && xiterr 1 "No members with 'esxi/cluster-name' found to operate on."

        echo "Found ESXi cluster members: $MEMBERS"
      } # end get_hosts_with_dvs()

      {{ $hosts := cat (.Param "esxi/cluster-name") "  cluster-members" | replace "   " "/" -}}
        {{ range $dvs, $dvscfg := (.Param "esxi/dvs-mappings") -}}
      echo "Ranging over DVS '{{ $dvs }}'"
          {{ if $dvscfg.portgroups -}}
      echo "Ranging over DVS Portgroups '{{ $dvscfg.portgroups }}'"
            {{ range $pg, $pgcfg := $dvscfg.portgroups -}}
      echo "Ranging over Portgroup '{{ $pg }}'"
            {{ if $pgcfg.migrate }}
      echo "FOUND migration tasks to perform..."

      DVS_NAME="{{ $dvs }}"
      get_hosts_with_dvs

      VM_MIGRATE={{$pgcfg.migrate.vm_migrate}}

      echo "Writing header for playbook YAML..."
      cat <<EOHDR > $PLAYBOOK
      ---
      - hosts: localhost
        gather_facts: false
        tasks:
      EOHDR

      for MEM in $MEMBERS
      do
      echo "WRITING migration playbook task for member '$MEM'"
      cat <<EOPB >> $PLAYBOOK
        - name: Migrate VMK {{ $pgcfg.migrate.vmk }} on HOST $MEM
          delegate_to: localhost
          community.vmware.vmware_migrate_vmk:
            hostname: $VC_HOST
            username: $VC_USER
            password: $VC_PASS
            esxi_hostname: $MEM
            device: {{$pgcfg.migrate.vmk}}
            current_switch_name: {{$pgcfg.migrate.vswitch}}
            current_portgroup_name: {{$pgcfg.migrate.portgroup}}
            migrate_switch_name: {{ $dvs }}
            migrate_portgroup_name: {{ $pg }}
            validate_certs: $VAL
      EOPB
      done

      # if a VM to migrate to the DVS is specified in migrate, add to the playbook
      if [[ "$VM_MIGRATE" == "<no value>" || "$VM_MIGRATE" == "null" || -z "$VM_MIGRATE" ]]
      then
        echo "No Virtual Machine migration has been requested."
      else
      cat <<EOVM >> $PLAYBOOK
        - name: Migrate VM $VM_MIGRATE to DVS {{$pgcfg.migrate.vswitch}}
          delegate_to: localhost
          community.vmware.vmware_vm_vss_dvs_migrate:
            hostname: $VC_HOST
            username: $VC_USER
            password: $VC_PASS
            vm_name: $VM_MIGRATE
            dvportgroup_name: {{$pgcfg.migrate.portgroup}}
      EOVM
      fi
            {{ end -}}
          {{ end -}}
        {{ end -}}
      {{ end -}}

      if [[ -r "$PLAYBOOK" ]]
      then
        export ANSIBLE_FORCE_COLOR=0

        echo ""
        echo "generated playbook:"
        echo "=================================== BEGIN ==================================="
        cat $PLAYBOOK
        echo "==================================== END ===================================="
        echo ""

        ansible-playbook $PLAYBOOK --connection=local
      else
        echo "WARNING: No playbook file was generated to execute. ('$PLAYBOOK')"
      fi

