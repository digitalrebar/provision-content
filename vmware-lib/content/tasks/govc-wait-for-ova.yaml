---
Description: "A task wait for appliance OVA API to become available"
Name: "govc-wait-for-ova"
Documentation: |
  Simple task to wait until the remote vSphere deployed resource responds correctly
  to a ``govc about`` request call.

RequiredParams:
  - "govc/template-json"
OptionalParams:
Templates:
  - Name: "govc-wait-for-ova.sh"
    Contents: |
      #!/bin/bash
      # Wait for OVA API to become available.
      # RackN Copyright 2020

      {{ template "setup.tmpl" .}}

      # disable shell history expansion as many vmware passwords have exclamation point in them
      set +H
      set -e
      set -o noglob

      # The template MUST be rendered to this filepath location inside the
      # container for use by govc.  This is handled in the govc-command task.
      TMPL=/ova/template.json
      JQ=$(which jq)
      [[ -z "$JQ" ]] && JQ=$(which drpjq)    || true
      [[ -z "$JQ" ]] && JQ=$(which drpclijq) || true
      [[ -z "$JQ" ]] && JQ=$(which gojq)     || true
      if [[ -z "$JQ" ]]; then
        D="$(which drpcli)"
        if [[ -n "$D" ]]; then
          ln -s $D /usr/local/bin/drpjq
          JQ="/usr/local/bin/drpjq"
        else
          xiterr 1 "Unable to find 'jq' or alternative to use."
        fi
      fi

      [[ ! -r "$TMPL" ]] && xiterr 1 "Unable to read JSON template '$TMPL', make sure previous tasks render this for us."

      U="$(cat $TMPL | $JQ -r '.PropertyMapping | .[] | select(.Key=="guestinfo.cis.vmdir.username") | .Value' | cut -d"@" -f1)"
      D="$(cat $TMPL | $JQ -r '.PropertyMapping | .[] | select(.Key=="guestinfo.cis.vmdir.domain-name") | .Value')"
      P="$(cat $TMPL | $JQ -r '.PropertyMapping | .[] | select(.Key=="guestinfo.cis.vmdir.password") | .Value')"
      A="$(cat $TMPL | $JQ -r '.PropertyMapping | .[] | select(.Key=="guestinfo.cis.appliance.net.addr") | .Value')"

      T={{ .Param "govc/ova-type" }}
      V={{ .Param "govc/ova-version" }}
      RULE="${T}:${V}"

      if [[ "$RULE" != ":" ]]
      then
       echo "Requesting OVA processing rule override for '$RULE'."
        case "$RULE" in
          vcsa:7)  echo "Overriding '$U' username with 'administrator'."
                   U="administrator"
          ;;
          *)  echo "Requested a rule override, but no processing rule found for '$RULE'"
              echo "Supported rules are 'vcsa:7'"
          ;;
        esac
      else
        echo "NOTICE: no 'govc/ova-type' and 'govc/ova-version' rules applied."
      fi

      # this worked in vcsa 6.x but not 7.x
      #VCENTER_URL="https://${U}:${P}@${A}/sdk"

      # set up timer/loops in seconds - yes it can take a REALLY long time for VCSA to
      # fully come up on the network - benchmarked 45 minutes in some cases
      COUNTER=0
      TIMER=30
      LOOPS=120
      NOT_SEEN=1
      (( WAIT = LOOPS * TIMER ))

      echo ""
      echo "===== BEGIN wait loop for API service to become available ===="
      echo ""
      echo ">>> NOTICE:  This can take up to 60 minutes in some extreme cases. <<< "
      echo ""

      run_govc() {
        # set as local scope, so if we switch back control previous values are retained
        local GOVC_USERNAME GOVC_PASSWORD GOVC_URL
        export GOVC_USERNAME="${U}@${D}"
        export GOVC_PASSWORD="${P}"
        export GOVC_URL="${A}"
        local _cmd="govc about -persist-session=false -k=true > /tmp/about.txt 2>&1"

        if (( $NOT_SEEN ))
        then
          echo "GOVC environment variables:"
          echo "---------------------------"
          if [[ "{{ .Param "rs-debug-enable" }}" == "true" ]]
          then
            echo "WARNING: GOVC_PASSWORD is visible since 'rs-debug-enable' is set to 'true'."
            env | grep -v grep | grep "GOVC_"
          else
            echo "NOTICE: GOVC_PASSWORD is obfuscated.  Set 'rs-debug-enable' to 'true' to view it on next run."
            env | grep -v grep | grep "GOVC_" | sed 's/^\(.*PASSWORD=\).*$/\1*** obfuscated ***/'
          fi
          NOT_SEEN=0
        fi

        if eval $_cmd
        then
          return 0
        else
          echo ""
          echo ">>> VCSA Not Ready:  '$_cmd'"
          echo ""
          return 1
        fi
      }

      while (( COUNTER <= WAIT ))
      do
        if run_govc
        then
          echo "API appears to be up, returned the following info:"
          echo ""
          cat /tmp/about.txt
          COMPLETE="true"
          break
        else
          echo "Waiting for API to become available ... '$LOOPS' Loops left at '$TIMER' seconds per loop."
          sleep $TIMER
          (( COUNTER += TIMER ))
          (( LOOPS-- ))
        fi
      done

      if [[ "$COMPLETE" == "true" ]]
      then
        echo ""
        echo "===== COMPLETED wait loop for API service to become available ===="
        echo ""
        exit 0
      else
        echo ""
        echo ">>> FATAL:  It appears the timer expired before the resource instance became available."
        echo ">>>         Either the process took too long, or it failed to deploy correctly.  Setting"
        echo ">>>         'rs-debug-enable=true' on the Machine and re-running may show useful debug info."
        echo ">>>         Wait timer was set for a total of '$WAIT' seconds."
        echo ""
        echo ">>>         The last output from govc command was:"
        echo ""
        cat /tmp/about.txt
        echo ""
        exit 1
      fi

Meta:
  icon: "terminal"
  color: "purple"
  title: "Digital Rebar Community Content"
  feature-flags: "sane-exit-codes"
