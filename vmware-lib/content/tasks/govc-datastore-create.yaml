---
Name: "govc-datastore-create"
Description: "A task to create a datastore(s) on a remote ESXi instance."
Documentation: |
  Creates a datastore on a remote ESXi instance.

RequiredParams:
  - "esxi/datastore-mappings"
  - "esxi/datastore-memberships"
  - "govc/url"
  - "govc/username"
  - "govc/password"
OptionalParams:
  - "govc/datastore-create-disk"
  - "govc/datastore-create-name"
  - "govc/insecure"
  - "govc/port"
Templates:
  - Name: "govc-datastore-create.sh"
    Contents: |
      #!/usr/bin/env bash
      # Create a Datastore on a remote vCenter or ESXi host with 'govc'
      # RackN Copyright 2020

      set -e

      {{ if .Param "govc/datastore-skip-create" }}
      echo "Skipping datastore creation as 'govc/datastore-skip-create' is 'true'."
      exit 0
      {{ end }}

      ### start setup.tmpl
      {{ template "setup.tmpl" .}}

      ### start govc-setup.sh.tmpl
      {{ template "govc-setup.sh.tmpl" . }}

      ### start govc-lib.sh.tmpl
      {{ template "govc-lib.sh.tmpl" . }}

      ### start govc-create-datastore.sh

      # yes jq parsing might be better w/ '--json' output, but no - it isn't
      HOST=$(govc host.info | grep "^Name:" | awk ' { print $NF } ')

      # whether get_first_available has been run or not yet
      FIRST="no"
      # set the govc arguments based on Param values
      ARGS=""

      ### MORE verifiers are needed (nfs, cifs, local, etc)

      ###
      #  Verify the requested ARGv1 listed device is a valid disk device on
      #  the target vSphere host.
      #  return 0 on success
      #  return 1 on no such device
      ###
      verify_vmfs_disk() {
        local _check="$1"
        local _devs
        _devs=$(govc host.esxcli --json storage core path list | jq -r ".Values | .[] | .Device[]")
        grep -q "$_check" <<< $_devs && return 0 || return 1
      }

      get_first_available() {
        RESULTS=$(govc host.esxcli --json storage vmfs extent list | jq -r '.Values | .[].DeviceName | .[]')
        if [[ -n "$RESULTS" ]]
        then
          for FILTER in $RESULTS
          do
            FILT="$FILT select(.Device | .[] != \"$FILTER\") |"
          done
        else
          FILT=""
        fi

        AVAIL=$(govc host.esxcli --json storage core path list | jq -r ".Values | .[] | $FILT .Device | .[] ")

        if [[ -n "$AVAIL" ]]
        then
          DISK=$(echo "$AVAIL" | head -1)
        else
          echo "*****************************************************"
          xiterr 1 "No available disks to create datastore on."
        fi

        check_first_available_has_run_already
        verify_vmfs_disk $DISK
        ARGS="-type vmfs -name \"$DS_NAME\" -disk=$DISK $HOST"
      }

      reset_global_vars() {
        REF="" DS_NAME="" DS_TYPE="" DS_FORCE="" DS_DISK="" DS_HOST="" DS_MODE=""
        DS_PATH="" DS_RHOST="" DS_RPATH="" DS_USER="" DS_PASS="" DS_VER=""
      }

      verify_data() {
        local _key="$1"
        local _val="$2"

        if [[ "$_val" == "" || "$_val" == "null" || "$_val" == "[]" || "$_val" == "{}" || "$_val" == "<no value>" ]]
        then
          xiterr 1 "Required configuration value '$_key' was set to unsupported value '$_val'."
        else

        fi
      }

      check_first_available_has_run_already() {
        if [[ "$FIRST" == "yes" ]]
        then
          echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> FATAL !!! <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
          echo ""
          echo "The 'first_available' rule has run a second time.  This is not supported."
          echo "This means that the govc/datastore-create-disk param was set to 'first_available'"
          echo "and the esxi/datastore-mappings contained a 'first_available' stanza also."
          echo "You must set the govc/datastore-create-disk to 'datastore_mappings`, or remove"
          echo "the stanza reference 'first_available' from the esxi/datastore-mappings object."
          echo ""
          echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> FATAL !!! <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
          exit 1
        fi

        FIRST="yes"
      }

      # legacy values for datastore create; prior to suppoort of esxi/datastore-mappings
      SELECT='{{ .Param "govc/datastore-create-disk" }}'
      DS_NAME='{{ .Param "govc/datastore-create-name" }}'

      case $SELECT in
        disk=*)
        DISK="$(echo $SELECT | sed 's/^disk=//g')"
        if govc host.esxcli --json storage core path list | jq -r ".Values | .[] | select(.Device .[] = \"$DISK\" | .[] "
        then
          echo "Found device '$DISK' to create datastore on."
        else
          echo "FATAL Unable to find requested device '$DISK'"
          echo "Device dump for debugging purposes..."
          govc host.esxcli storage core path list
          exit 1
        fi
        ARGS="-type vmfs -name \"$DS_NAME\" -disk=$DISK $HOST"
        ;;
        datastore_mappings)

        {{ if .Param "esxi/datastore-mappings" -}}
          {{ range $dsref, $dsval := ( .Param "esxi/datastore-mappings" ) -}}
          REF="{{ $dsref }}"
          DS_NAME='{{$dsval.name}}'
          DS_TYPE='{{$dsval.type}}'
          DS_FORCE='{{$dsval.force}}'
          DS_DISK='{{$dsval.disk}}'
          DS_HOST='{{$dsval.host}}'
          DS_MODE='{{$dsval.mode}}'
          DS_PATH='{{$dsval.path}}'
          DS_RHOST='{{ get $dsval "remote-host" }}'
          DS_RPATH='{{ get $dsval "remote-path" }}'
          DS_USER='{{$dsval.username}}'
          DS_PASS='{{$dsval.password}}'
          DS_VER='{{$dsval.version}}'

          [[ "$DS_HOST" != "<no value>" ]] && H="$DS_HOST" || H="$(get_member_name {{ .Machine.Name }})"
          [[ "$DS_FORCE" == "true" ]] && F="-force true" || F=""
          [[ "$DS_MODE" == "readOnly" || "$DS_MODE" == "readWrite" ]] && M="-mode $DS_MODE" || M=""

          echo ">>> Beginning create for reference '$REF' datastore."

          case $DS_TYPE in
            first_available)
              echo "Datastore mapping type set to 'first_available'."
              get_first_available
            ;;
            nfs|nfs4)
              verify_data "remote-host" "$DS_RHOST"
              verify_data "remote-path" "$DS_RPATH"
              ARGS="-type $DS_TYPE -name \"$DS_NAME\" -remote-host \"$DS_RHOST\" -remote-path \"$DS_RPATH\" $M $F $H"
            ;;
            cifs)
              verify_data "remote-host" "$DS_RHOST"
              verify_data "remote-path" "$DS_RPATH"
              verify_data "username" "$DS_USER"
              verify_data "password" "$DS_PASS"
              [[ "$DS_USER" != "<no value>" ]] && U="-username $DS_USER" || U=""
              [[ "$DS_PASS" != "<no value>" ]] && P="-password $DS_PASS" || P=""
              ARGS="-type $DS_TYPE -name \"$DS_NAME\" -remote-host \"$DS_RHOST\" -remote-path \"$DS_RPATH\" $U $P $M $F $H"
            ;;
            vmfs)
              [[ "$DS_VER" != "<no value>" ]] && V="-version $DS_VER" || V=""
              ARGS="-type $DS_TYPE -name \"$DS_NAME\" -disk \"$DS_DISK\" $M $V $F $H"
            ;;
            local)
              verify_data "path" "$DS_PATH"
              ARGS="-type $DS_TYPE -name \"$DS_NAME\" -path \"$DS_PATH\" $M $F $H"
            ;;
            *)
              xiterr 1 'Datastore type '$DS_TYPE' not supported."
            ;;
          esac

          reset_global_vars
          {{ end -}}
        {{ else -}}
          echo "Param 'esxi/datasotre-mappings' had no value.  Falling back to get first available disk."
          get_first_available
        {{ end -}}

        ;;
        first_available)
          echo "No 'esxi/datastore-mappings found ... falling back to default get first availalbe behavior."
          get_first_available
        ;;
        *)
          xiterr 1 "Unsupported Disk Selection request '$SELECT'. Supported is 'first_available' or 'disk=<DISK>'."
        ;;
      esac

      echo ""
      echo "==== RUN 'govc $CMD' ===="
      echo ""

      run_govc datastore.create $ARGS

      echo ""
      echo "==== DONE ===="
      echo ""

      exit 0
Meta:
  icon: "terminal"
  color: "blue"
  title: "Digital Rebar Community Content"
  feature-flags: "sane-exit-codes"
