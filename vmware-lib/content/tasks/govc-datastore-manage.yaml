---
Name: "govc-datastore-manage"
Description: "A task to manage (add/remove/list) datastore(s) on a remote ESXi instance."
Documentation: |
  Add, remove, or list datastore(s) on a remote ESXi instance specified in the
  ``esxi/datastore-mappings`` Param.

RequiredParams:
  - "esxi/datastore-mappings"
  - "esxi/datastore-memberships"
  - "esxi/datastore-command"
  - "govc/url"
  - "govc/username"
  - "govc/password"
OptionalParams:
  - "esxi/datastore-skip-manage"
  - "govc/datastore-create-disk"
  - "govc/datastore-create-name"
  - "govc/insecure"
  - "govc/port"
Templates:
  - Name: "govc-datastore-manage.sh"
    Contents: |
      #!/usr/bin/env bash
      # Create a Datastore on a remote vCenter or ESXi host with 'govc'
      # RackN Copyright 2020

      set -e

      {{ if .Param "esxi/datastore-skip-manage" -}}
      echo "Skipping datastore creation as 'esxi/datastore-skip-manage' is 'true'."
      exit 0
      {{ end -}}

      ### start setup.tmpl
      {{ template "setup.tmpl" .}}

      ### start govc-setup.sh.tmpl
      {{ template "govc-setup.sh.tmpl" . }}

      ### start govc-lib.sh.tmpl
      {{ template "govc-lib.sh.tmpl" . }}

      ### start govc-datastore-create.sh

      # if GOVC_URL is empty, we check to see if we're running in a context
      # off of a Machine, and set that here to the Machine name
      HOST="$(get_member_name {{ .Machine.Name }})"
      if [[ -z "$GOVC_URL" ]]
      then
        echo "GOVC_URL is not set, assuming self machine name"
        export GOVC_URL=$HOST
      fi

      # yes jq parsing might be better w/ '--json' output, but no - it isn't
      HOST=$(govc host.info | grep "^Name:" | awk ' { print $NF } ')

      # whether get_first_available has been run or not yet
      FIRST="no"
      # set the govc arguments based on Param values
      ARGS=""

      DS_CMD='{{ .Param "esxi/datastore-command" }}'

      ### MORE verifiers are needed (nfs, cifs, local, etc)

      ###
      #  Verify the requested ARGv1 listed device is a valid disk device on
      #  the target vSphere host.
      #  return 0 on success
      #  return 1 on no such device
      ###
      verify_vmfs() {
        local _check="$1"
        local _devs
        _devs=$(govc host.esxcli --json storage core path list | jq -r ".Values | .[] | .Device[]")
        grep -q "$_check" <<< $_devs && return 0 || return 1
      }

      ###
      #  TODO: is CIFS server available? is requested share available?
      ###
      verify_cifs() {
        true
      }

      ###
      #  TODO: is local path valid?  what else?
      ###
      verify_local() {
        true
      }

      get_first_available() {
        RESULTS=$(govc host.esxcli --json storage vmfs extent list | jq -r '.Values | .[].DeviceName | .[]')
        if [[ -n "$RESULTS" ]]
        then
          for FILTER in $RESULTS
          do
            FILT="$FILT select(.Device | .[] != \"$FILTER\") |"
          done
        else
          FILT=""
        fi

        AVAIL=$(govc host.esxcli --json storage core path list | jq -r ".Values | .[] | $FILT .Device | .[] ")

        if [[ -n "$AVAIL" ]]
        then
          DISK=$(echo "$AVAIL" | head -1)
        else
          echo "*****************************************************"
          xiterr 1 "No available disks to create datastore on."
        fi

        check_first_available_has_run_already
        verify_vmfs $DISK
        ARGS="-type vmfs -name \"$DS_NAME\" -disk=$DISK $HOST"
      }

      reset_global_vars() {
        REF="" DS_NAME="" DS_TYPE="" DS_FORCE="" DS_DISK="" DS_HOST="" DS_MODE=""
        DS_PATH="" DS_RHOST="" DS_RPATH="" DS_USER="" DS_PASS="" DS_VER=""
      }

      verify_data() {
        local _key="$1"
        local _val="$2"

        if [[ "$_val" == "" || "$_val" == "null" || "$_val" == "[]" || "$_val" == "{}" || "$_val" == "<no value>" ]]
        then
          xiterr 1 "Required configuration value '$_key' was set to unsupported value '$_val'."
        fi
      }

      check_first_available_has_run_already() {
        if [[ "$FIRST" == "yes" ]]
        then
          echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> FATAL !!! <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
          echo ""
          echo "The 'first_available' rule has run a second time.  This is not supported."
          echo "This means that the govc/datastore-create-disk param was set to 'first_available'"
          echo "and the esxi/datastore-mappings contained a 'first_available' stanza also."
          echo "You must set the govc/datastore-create-disk to 'datastore_mappings', or remove"
          echo "the stanza reference 'first_available' from the esxi/datastore-mappings object."
          echo ""
          echo ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> FATAL !!! <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
          exit 1
        fi

        FIRST="yes"
      }

      # verify NFS mount Datastore is not already connected - GOVC barfs
      # badly if it is
      # ARGv 1 - Type of datastore to check for ("nfs" or "nfs41")
      # ARgv 2 - Datastore name to check
      # Exits with error code 1 if DS connected already
      verify_nfs() {
        local _type="$1"
        local _ds="$2"
        if govc host.esxcli storage $_type list | grep "^$_ds "
        then
          echo ">>> Datastore named '$_ds' connected to host."
          case $DS_CMD in
            add)
              echo ">>> Exiting with error - future handling might allow this to continue as non-error?"
              exit 1
            ;;
          esac
        else
          echo ">>> Datastore named '$_ds' does not appear to be connected."
          case $DS_CMD in
            remove)
              echo ">>> Remove operation requested for '$DS_NAME', however, it is not connected."
              echo "    No remove operation attempted."
              exit 0
            ;;
          esac
        fi
      }

      # legacy values for datastore create; prior to suppoort of esxi/datastore-mappings
      SELECT='{{ .Param "govc/datastore-create-disk" }}'
      DS_NAME='{{ .Param "govc/datastore-create-name" }}'

      case $SELECT in
        disk=*)
          DISK="$(echo $SELECT | sed 's/^disk=//g')"
          if govc host.esxcli --json storage core path list | jq -r ".Values | .[] | select(.Device .[] = \"$DISK\" | .[] "
          then
            echo "Found device '$DISK' to create datastore on."
          else
            echo "FATAL Unable to find requested device '$DISK'"
            echo "Device dump for debugging purposes..."
            govc host.esxcli storage core path list
            exit 1
          fi
          ARGS_ADD="datastore.create -type vmfs -name \"$DS_NAME\" -disk=$DISK $HOST"
          ARGS_LIST="datastore.info \"$DS_NAME\""
          ARGS_RM="datastore.remove -ds \"$DS_NAME\" $HOST"
        ;;
        datastore_mappings)

        {{ if .Param "esxi/datastore-mappings" -}}
          {{ range $dsref, $dsval := ( .ComposeParam "esxi/datastore-mappings" ) -}}
          reset_global_vars
          REF='{{ $dsref }}'
          DS_NAME='{{ get $dsval "name" }}'
          DS_TYPE='{{ get $dsval "type" }}'
          DS_FORCE='{{ get $dsval "force" }}'
          DS_DISK='{{ get $dsval "disk" }}'
          DS_MODE='{{ get $dsval "mode" }}'
          DS_PATH='{{ get $dsval "path" }}'
          DS_RHOST='{{ get $dsval "remote-host" }}'
          DS_RPATH='{{ get $dsval "remote-path" }}'
          DS_USER='{{ get $dsval "username" }}'
          DS_PASS='{{ get $dsval "password" }}'
          DS_VER='{{ get $dsval "version" }}'
          {{ if ( get $dsval "host" ) -}}
          DS_HOST='{{  get $dsval "host" }}'
          {{ else -}}
          DS_HOST="$HOST"
          {{ end -}}

          [[ "$DS_FORCE" == "true" ]] && F="-force true" || F=""
          [[ "$DS_MODE" == "readOnly" || "$DS_MODE" == "readWrite" ]] && M="-mode $DS_MODE" || M=""

          echo ">>> Beginning datastore manage operation '$DS_CMD' for mapping reference '$REF' datastore."

          # these appear to work the same for Remove/Info
          ARGS_LIST="datastore.info \"$DS_NAME\""
          ARGS_RM="datastore.remove -ds \"$DS_NAME\" $DS_HOST"

          case $DS_TYPE in
            first_available)
              echo "Datastore mapping type set to 'first_available'."
              get_first_available
            ;;
            nfs*)
              verify_data "remote-host" "$DS_RHOST"
              verify_data "remote-path" "$DS_RPATH"
              verify_nfs "$DS_TYPE" "$DS_NAME"
              # datastore.create doesn't seem to work
              #ARGS_ADD="datastore.create -type $DS_TYPE -name \"$DS_NAME\" -remote-host \"$DS_RHOST\" -remote-path \"$DS_RPATH\" $M $F $DS_HOST"
              ARGS_ADD="host.esxcli storage $DS_TYPE add -H $DS_RHOST -readonly false -share $DS_RPATH -volume-name $DS_NAME"
              ARGS_RM="host.esxcli storage $DS_TYPE remove -volume-name $DS_NAME"
            ;;
            cifs)
              verify_data "remote-host" "$DS_RHOST"
              verify_data "remote-path" "$DS_RPATH"
              verify_data "username" "$DS_USER"
              verify_data "password" "$DS_PASS"
              verify_cifs
              [[ "$DS_USER" != "<no value>" ]] && U="-username $DS_USER" || U=""
              [[ "$DS_PASS" != "<no value>" ]] && P="-password $DS_PASS" || P=""
              ARGS_ADD="datastore.create -type $DS_TYPE -name \"$DS_NAME\" -remote-host \"$DS_RHOST\" -remote-path \"$DS_RPATH\" $U $P $M $F $DS_HOST"
            ;;
            vmfs)
              [[ "$DS_VER" != "<no value>" ]] && V="-version $DS_VER" || V=""
              verify_vmfs "$DS_DISK"
              ARGS_ADD="datastore.create -type $DS_TYPE -name \"$DS_NAME\" -disk \"$DS_DISK\" $M $V $F $DS_HOST"
            ;;
            local)
              verify_data "path" "$DS_PATH"
              verify_local "$DS_PATH"
              ARGS_ADD="datastore.create -type $DS_TYPE -name \"$DS_NAME\" -path \"$DS_PATH\" $M $F $DS_HOST"
            ;;
            *)
              xiterr 1 "Datastore type '$DS_TYPE' not supported."
            ;;
          esac
          {{ end -}}
        {{ else -}}
          echo "Param 'esxi/datasotre-mappings' had no value.  Falling back to get first available disk."
          get_first_available
        {{ end -}}

        ;;
        first_available)
          echo "No 'esxi/datastore-mappings found.  Falling back to default get first availalbe behavior."
          get_first_available
        ;;
        *)
          xiterr 1 "Unsupported Disk Selection request '$SELECT'. Supported is 'first_available' or 'disk=<DISK>'."
        ;;
      esac

      echo ""
      echo "==== RUN govc operation '$DS_CMD' ===="
      echo ""

      case $DS_CMD in
        add)    run_govc $ARGS_ADD
                echo ">>> Datastore(s) now connected:"
                echo "=============================================================================================="
                run_govc quiet datastore.info
        ;;
        remove) run_govc $ARGS_RM
                sleep 3
                echo ">>> Datastore(s) that remain connected:"
                echo "=============================================================================================="
                run_govc quiet datastore.info
        ;;
        list)   run_govc $ARGS_LIST ;;
        *) xiterr 1 "Unsupported Datasstore Operation ('$DS_CMD')." ;;
      esac

      echo ""
      echo "==== DONE ===="
      echo ""

      exit 0
Meta:
  icon: "terminal"
  color: "blue"
  title: "Digital Rebar Community Content"
  feature-flags: "sane-exit-codes"
