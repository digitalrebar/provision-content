---
Description: "A task to create Distributed Virtual Switches"
Name: "govc-dvs-create"
Documentation: |
  This task will create Distributed Virtual Switches in a vCenter service.
  It uses the ``esxi/dvs-mappings`` Param to define which DVSs and (optionally)
  portgroups to create, along with the configuration values for the DVS and
  Portgroups.

  Please review the Param documentation for ``esxi/dvs-mappings`` for structure
  and usage examples.

  In addition to ``esxi/dvs-mappings`` configuration values for each of the DVS
  and Portgroups, you must also add the ``esxi/dvs-memberships`` Param, which is
  an array of strings.  Each string should be the name of a Distributed Virtual
  Switch to create on the vSphere ESXi node.

  Typically the ``esxi/dvs-memberships`` Param will be added to a machine via
  classification rules.

Meta:
  icon: "terminal"
  color: "purple"
  title: "Digital Rebar Community Content"
  feature-flags: "sane-exit-codes"
RequiredParams:
  - "esxi/dvs-mappings"
  - "esxi/datacenter-name"
  - "esxi/cluster-name"
  - "govc/username"
  - "govc/password"
  - "govc/url"
OptionalParams:
  - "govc/debug"
Templates:
  - Name: "govc-dvs-create.sh"
    Contents: |
      #!/usr/bin/env bash
      # DVS create and enrollment task.
      # RackN Copyright 2020

      ### start setup.tmpl
      {{ template "setup.tmpl" . }}

      ### start govc-setup.sh.tmpl
      {{ template "govc-setup.sh.tmpl" . }}

      ### start govc-lib.sh.tmpl
      {{ template "govc-lib.sh.tmpl" . }}

      ### start govc-dvs-create.sh
      USERNAME="root"
      DC='{{ .Param "esxi/datacenter-name" }}'
      CLUSTER='{{ .Param "esxi/cluster-name" }}'
      [[ -z "$DC" ]] && xiterr 1 "'esxi/datacenter-name' not specified"

      export GOVC_PERSIST_SESSION=false
      export GOVC_DATACENTER="$DC"

      dvs_create() {
        [[ -z "$DC" ]] && xiterr 1 'DC name empty' || true
        [[ -z "$DVS_PATH" ]] && xiterr 1 'DVS Path empty' || true
        [[ -z "$DVS_MTU" ]] && xiterr 1 'DVS MTU empty' || true
        [[ -z "$DVS_VER" ]] && xiterr 1 'DVS Version empty' || true

        if [[ -z "$(run_govc quiet ls "$DVS_PATH")" ]]
        then
          run_govc dvs.create -dc $DC -mtu $DVS_MTU $DVS_NAME
          run_govc dvs.create -product-version $DVS_VER -folder "$(dirname "$DVS_PATH")" "$(basename "$DVS_PATH")"
        else
          xiterr 1 "can not create DVS '$DVS_NAME' it exists already"
        fi
      }

      dvs_add() {
        [[ -z "$DC" ]] && xiterr 1 'DC name empty' || true
        [[ -z "$DVS_PATH" ]] && xiterr 1 'DVS Path empty' || true
        [[ -z "$DVS_VMN" ]] && xiterr 1 'DVS VMNIC device empty' || true
        [[ -z "$MEMBERS" ]] && xiterr 1 'Members to apply DVS to is empty' || true

        run_govc dvs.add -dvs "$DVS_PATH" -pnic $DVS_VMN $MEMBERS
      }

      portgroup_create() {
        [[ -z "$DC" ]] && xiterr 1 'DC name empty' || true
        [[ -z "$DVS_PATH" ]] && xiterr 1 'DVS path empty' || true
        [[ -z "$PG_NAME" ]] && xiterr 1 'Portgroup name empty' || true
        [[ -z "$PG_TYPE" ]] && xiterr 1 'Portgroup type empty' || true
        [[ -z "$PG_PORTS" ]] && xiterr 1 'Portgroup number of ports empty' || true

        local net_path="/$DC/network/$PG_NAME"

        if [[ -z "$(run_govc quiet ls "$net_path")" ]]
        then
          run_govc dvs.portgroup.add -dvs "$DVS_PATH" -type $PG_TYPE -nports $PG_PORTS "$PG_NAME"
        else
          xiterr 1 "can not create Portgroup '$PG_NAME' it exists already"
        fi
      }

      DC_PATH="/${DC}"
      if [[ -z "$(run_govc quiet ls "$DC_PATH")" ]]
      then
        xiterr 1 "Datacenter ('$DC') not created yet."
      fi

      echo "Starting DVS configuration based on 'esxi/dvs-mappings' Param."

      {{ range $dvs, $dvscfg := (.Param "esxi/dvs-mappings") -}}
      DVS_NAME="{{ $dvs }}"
      DVS_PATH="/${DC}/network/${DVS_NAME}"
      DVS_VER='{{$dvscfg.version}}'
      DVS_MTU='{{$dvscfg.mtu}}'
      DVS_DSC='{{$dvscfg.discovery}}'
      DVS_VMN='{{$dvscfg.vmnic}}'
      # now get our member nodes for this DVS
      NAMES=$(drpcli machines list esxi/dvs-memberships In "[\"$DVS_NAME\"]" Meta.BaseContext Ne govc | $_JQ -r '.[].Name' | tr '\n' ' ')
      # convert DRP machine name to ESXi host name
      for NAME in $NAMES
      do
        MEMBERS="$(get_member_name $NAME) $MEMBERS"
      done
      [[ -n "$MEMBERS" ]] && FOUND="$MEMBERS" || FOUND="**NO HOSTS DEFINED**"

      echo "Creating DVS '$DVS_NAME' with following configuration:"
      echo "============================================================================="
      echo "   esxi hosts:  $FOUND"
      echo "          mtu:  '$DVS_MTU'"
      echo "      version:  '$DVS_VER'"
      echo "    discovery:  '$DVS_DSC'"
      echo "        vmnic:  '$DVS_VMN'"

      dvs_create
      [[ -n "$MEMBERS" ]] && dvs_add

      {{ if $dvscfg.portgroups -}}
      {{ range $pg, $pgcfg := $dvscfg.portgroups -}}
      PG_NAME='{{$pg}}'
      PG_TYPE='{{$pgcfg.type}}'
      PG_PORTS='{{$pgcfg.ports}}'

      echo "Creating PortGroup '$PG' with the following configuration:"
      echo "============================================================================="
      echo "    portgroup: '$PG_NAME'"
      echo "         type: '{{$pgcfg.type}}'"
      echo "        ports: '{{$pgcfg.ports}}'"

      portgroup_create
      {{ end -}}
      {{ end -}}
      {{ end -}}

      echo "End of DVS Creation from 'esxi/dvs-mappings' Param"
