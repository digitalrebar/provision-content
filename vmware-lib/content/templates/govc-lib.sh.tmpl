###
#  GoVC Library functions and tools
###

###
#  Requires ARGv1 contain a DRP Machine Name to operate
#  on.
#
#  Uses the value of the Param `esxi/member-reference` to
#  build up an ESXi node reference member name for vSphere /
#  vCenter operations.
#
#  Simply prints out the Reference based vSphere / vCenter value
#  on standard output (stdout).
###
get_member_name() {
  local _machine="$1"
  local _ref _addr _member _domain
  [[ -z "$_machine" ]] && xiterr 1 "No machine name to operate on specified." || true

  _ref='{{ .Param "esxi/member-reference" }}'
  case $_ref in
    name)
        _member="$_machine"
      ;;
    address)
        _member=$(drpcli machines show Name:${_machine} | jq '.Address')
      ;;
    fqdn-dhcp)
        _address=$(drpcli machines show Name:${_machine} | jq '.Address')
        _domain=$(drpcli leases show $_address | jq -r '.Options | .[] | select(.Code==15) | .Value')
        [[ "$_domain" == "null" || -z "$_domain" ]] && xiterr 1 "DHCP option 15 (domain name) missing, or no Lease for '$_address' exists." || true
        _member="${_machine}.${_domain}"
      ;;
    fqdn-dns-domain)
        _domain='{{.Param "dns-domain"}}'
        [[ "$_domain" == "null" || -z "$_domain" ]] && xiterr "DNS Domain Param ('dns-domain') not specified." || true
        _member=${_machine}.${_d}
      ;;
    *)
        xiterr 1 "Unknown ESXi machine member name reference specified ('$_ref')"
      ;;
  esac
  echo ${_member}
}

###
#  Run the govc command with options.
#
#  example usage:  run_govc [quiet] cmd
#
#  If "quiet" is specified as ARGv1, then the Arguments will be shifted
#  by one, will be appended to the "govc" command and no helpful
#  "CMD: govc cmd ..." output will be printed.  The "govc" command output
#  will not be surpressed.  If true "quiet" mode is required, then the
#  calling application should redirect STDOUT and STDERR appropriately.
#
#    eg:  run_govc about > /dev/null
#
#  If the Param 'govc/debug' is set to 'true', then the GoVC command will
#  simply be printed on STDOUT and not actually executed.
###
run_govc() {
  local _output=1
  local _dbg='{{.Param "govc/debug"}}'
  local _msg

  if [[ "$1" =~ .*quiet ]]
  then
    shift 1
    local _output=0
  fi

  local _args="$*"

  [[ "$_dbg" == "true" ]] && _msg="(DBG) " || _msg=""
  (( $_output )) && echo "${_msg}CMD: govc $_args" || true
  [[ "$_dbg" == "false" ]] && eval govc $_args || true
  return $?
}

###
#  Try really really hard to find a 'jq' binary to use.
###
_JQ=""
_JQ=$(which jq)
[[ -z "$_JQ" ]] && _JQ=$(which drpjq)    || true
[[ -z "$_JQ" ]] && _JQ=$(which drpclijq) || true
[[ -z "$_JQ" ]] && _JQ=$(which gojq)     || true
if [[ -z "$_JQ" ]]; then
  D="$(which drpcli)"
  if [[ -n "$D" ]]; then
    ln -s $D /usr/local/bin/drpjq
    _JQ="/usr/local/bin/drpjq"
  else
    echo "FATAL: Unable to find 'jq' or alternative tool to use."
    exit 1
  fi
fi
