VMware Library
--------------

The Vmware Library provides additional content that enables capabilities for
interacting with VMware ESXi, vSphere, and VCF (VMware Cloud Foundation)
environments.


GoVC General Information
========================

GoVC is a Golang binary that implements the VMOMI library of capabilities.  The
primary benefit is it's a single statically compiled binary (stand alone) that has
no external dependencies.  It implements API interaction with vSphere and services
(eg ESXi and vCenter).

The GoVC binary (``govc``) is compiled from the GoVMOMI project, which can be
found at:

  * https://github.com/vmware/govmomi

The GoVC tool is capable of an extremely broad and complete set of control plane
interactions with vSphere (ESXi and vCenter) services.  Please review the
``examples`` directory in the above referenced Repo for more details.

For usage examples of the ``govc`` binary in use inside the Digital Rebar _govc_
context container, please see:

  * https://github.com/vmware/govmomi/blob/master/govc/USAGE.md


GoVC Context
++++++++++++

The GoVC context implements a RackN Context Container with the Agent (runner, drpcli
binary) and the ``govc`` compiled binary inside of it.  By use of setting Param values,
``govc`` commands can be executed against vSphere resources.


GoVC and VCSA Deployment
++++++++++++++++++++++++

VCSA (vCenter Server Appliance) can be deployed via the GoVC tool.  The operator must
perform the following preparotry tasks to enable the Context environment to operate
the ``govc`` binary in the RackN Context Container.  This setup must be performed on
the DRP Endpoint.  In the future, the _bootstrap_ workflows will be available to help
set up these environments.

First, either clone the githup repo, or save the scripts in the ``tools`` directory to
your DRP Endpoint, and run them as specified below.

To check out the github repo with just the ``vmware-lib`` content pack and tooling in it,
do:

  ::

    # checkout github vmware-lib content pack and associated tools
    git init
    git remote add origin https://github.com/digitalrebar/provision-content.git
    git fetch origin
    git checkout origin/v4 -- vmware-lib


**Setup Instructions**

There is a "helper" script that attempts to do all of the below steps, called
``tools/do-all.sh``.  Individual steps below:

  - Install the ``docker-context, ``vmware``, ``vmware-lib``, and ``task-library`` catalog items

    *  ``drpcli catalog item install vmware``
    *  ``drpcli catalog item install vmware-lib``
    *  ``drpcli catalog item install task-library``
    * ``drpcli catalog item install docker-context``

  - Create the docker container for the Runner and GoVC tools

    * run the ``tools/build-docker.sh`` script to build the containers
    * ***OR*** install from pre-build Docker Hub images
    * run the ``tools/dockerhub-containers.sh`` script

  - Upload the containers and enable them in drpcli

    * See the ``tools/drpcli-commands.sh`` script to do this

  - Create the Context Runner machines to start Workflow from

    * See the ``tools/drpcli-create-machines.sh`` script to do this

  - The VCSA OVA must be staged on an HTTP server for the tooling to download

    * Obtain the VMware provide VCSA ISO image and extract the OVA from the ISO
    * example download location - https://my.vmware.com/web/vmware/details?productId=742&rPId=39682&downloadGroup=VC67U3B
    * can be extracted with ``bsdtar`` like: ``bsdtar -xvf VMware-VCSA-all-6.7.0-15132721.iso vcsa/*.ova``
    * upload with drpcli like: ``export N=$(ls -1 vcsa/*.ova); drpcli files upload $N as images/vcsa/$N``
    * reference this location on the DRP endpoint as: ``{{.ProvisionerURL}}/files/images/vcsa/{...name...}``

  - Prepare the Template JSON file that GoVC will use to deploy the OVA (***see below***)
  - Set the Param values on your Runner fake machine (either directly. or as a Profile)
  - Run the Workflow ``govc-vcenter-create``

Scripts referenced in this document should be available from:

  * https://github.com/digitalrebar/provision-content/tree/v4/vmware-lib

vCenter Complete Note
+++++++++++++++++++++

If install vCenter 7.x - the ``govc`` connect URL method seems to have changed.
AS of 2020/07/01 - the Stage ``govc-wait-for-vcenter`` will not complete successfully.
You will have to monitor the VAMI web interface (on port 5480 by default), to determine
when it has successfully finished.

The workflow will error out after 60 minutes in this case.  Either force remove the
Workflow from the Context Machine, or ignore the status stage error.


Prepare the VCSA JSON Deployment Template
+++++++++++++++++++++++++++++++++++++++++

The Param ``govc/template-json`` defines the name of a Template that you must provide with
the configuration details for the deployed VCSA instance.  This template can be a standard
Digital Rebar template, provided via another Content Pack, or you can upload a one-off template
for the job.  See the ``templates/govc-*EXAMPLE*.json`` examples in the ``vmware-lib`` content
pack for an example template.

Once you have prepared the Template JSON file and uploaded it, you must set the Param
to point to it.  This param will be set on the fake Runner Machine that the Workflow is
run on.

In addition to the Template JSON Param, you must provie a vSphere resource (eg ESXi) node
to execute the deployment to.  Set these Params as defined in the below section.


Define the Deployment Target
++++++++++++++++++++++++++++

You must define the vSphere deployment target (eg ESXi node) to deploy the VCSA OVA to.
This is done by specifying the URL directly as a single Param, or the individual Param
values for the Username, Password, Node, and optionally Port.  See the Param documentation
for these values.

These values can all be combined in to a single Profile along with the Template JSON
Param defined above for easier add/remove on the Machine object.

Example Profile for vCenter deployment:

  ::

    ---
    Name: "vcsa-govc-esxi-ewr1"
    Description: "EXAMPLE PROFILE - CHANGE VALUES !!!!"
    Documentation: |
      Change these values to match the JSON template details, the
      uploaded OVA, and related network information for your vCenter
      deployment.

      govc/* params are for the target Node (vSphere ESXi) to deploy the
      vCenter VCSA OVA on.  The JSON Template defines the vCenter
      installation details.

    Meta:
      color: "blue"
      icon: "hdd"
      title: "Digital Rebar"
    Params:
      govc/datastore: "datastore1"
      govc/datastore-skip-create: false
      govc/insecure: true
      govc/node: "10.75.75.250"
      govc/ova-location: "{{.ProvisionerURL}}/files/images/vcsa/VMware-vCenter-Server-Appliance-7.0.0.10300-16189094_OVF10.ova"
      govc/template-json: "esxi-ewr1-vc01.json.tmpl"
      govc/username: "root"
      govc/password: "VMware123"
    Profiles: []

Save the above to file, and use drpcli to add to your Endpoint (eg ``drpcli profiles create vcenter.yaml``,
then add the Profile to the Context Machine that will deploy the vCenter VCSA OVA.


Example GOVC Usage
==================

A (begining of) a collection of useful resources for understanding how to
use ``govc`` to manage vSphere resources.

  * `Collabnix Labs: Managing vSphere with GOVC <https://github.com/collabnix/govc>`_
