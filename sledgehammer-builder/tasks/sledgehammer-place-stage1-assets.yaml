---
Name: sledgehammer-place-stage1-assets
Description: Place the stage 1 assets that will be used.
Documentation: |
  This task places the stage1 assets where they must be present for
  the stage1 initramfs to be built. The assets placed are:

  * sledgehammer-stage1-init

    This script is run when the Sledgehammer kernel and initrd have
    been loaded.  It is responsible for transferring the stage2 image
    from dr-provision and transferring control to it.

  * sledgehammer-stage1-udhcpc-config

    This script is invoked by udhcpc whenever it gets or releases a lease.
    It is responsible for actually configuring the network interface.

  * squashfs-excludes

    this file defines what will be excluded from the stage2 squashfs image.
Templates:
  - Name: sledgehammer-stage1-init
    Path: /IMAGE/initrd/init
    Contents: |
      #!/bin/ash

      fail() {
          printf '%s\n' "$@"
          echo "Dropping into shell for debugging"
          echo "Contact #community on rackn.slack.com channel for debugging"
          echo "Exiting the shell will reboot the system"
          /bin/ash -i
          reboot
      }

      export PATH=/bin
      export SIGNATURE="::SIGNATURE::"
      echo "Stage1 $SIGNATURE in Busybox"
      echo "You can download a copy of the Busybox source for this version at:"
      echo "http://rackn-sledgehammer.s3-website-us-west-2.amazonaws.com/busybox-1.29.3.tar.bz2"
      mount -t proc proc /proc
      mount -t sysfs sysfs /sys
      mount -t devtmpfs dev /dev
      mount -t tmpfs root /newinitramfs
      mkdir /dev/pts
      mount -t devpts devpts /dev/pts
      echo "Extracting drivers and other kernel modules"
      xz -d -c -f lib.cpio.xz |cpio -id
      test -d "lib/modules/$(uname -r)" || fail "Stage1 kernel modules do not match running kernel $(uname -r)" "We will fail to find network devices" "Make sure Sledgehammer $SIGNATURE was downloaded properly."
      rm lib.cpio.xz
      touch /dev/mdev.log /dev/mdev.seq
      echo "Loading drivers"
      echo '$MODALIAS=.* 0:0 660 @/bin/modprobe "$MODALIAS"' >/etc/mdev.conf
      echo /bin/mdev >/proc/sys/kernel/hotplug
      mdev -s
      # Load devices not loaded by mdev -s
      for i in /sys/class/net/*/uevent; do
          printf 'add' > "$i";
      done 2>/dev/null;
      unset i
      for i in /sys/bus/usb/devices/*; do
          case "${i##*/}" in
              [0-9]*-[0-9]*)
                  printf 'add' > "$i/uevent";;
          esac
      done; unset i
      # Load kernel modules, run twice.
      find /sys -name 'modalias' -type f -exec cat '{}' + | sort -u | xargs -n 1 modprobe  2>/dev/null
      find /sys -name 'modalias' -type f -exec cat '{}' + | sort -u | xargs -n 1 modprobe  2>/dev/null
      # If we loaded mlx4_core, also load mlx4_en
      if test -d /sys/module/mlx4_core; then
          modprobe mlx4_en
          mdev -s
      fi
      echo "Parsing kernel parameters required for booting"
      bootif=$(grep -o 'BOOTIF=[^ ]*' /proc/cmdline)
      nextone=$(grep -o 'provisioner.web=[^ ]*' /proc/cmdline)
      portdelay=$(grep -o 'provisioner.portdelay=[^ ]*' /proc/cmdline)
      postportdelay=$(grep -o 'provisioner.postportdelay=[^ ]*' /proc/cmdline)
      routedelay=$(grep -o 'provisioner.routedelay=[^ ]*' /proc/cmdline)
      wgetretrycount=$(grep -o 'provisioner.wgetretrycount=[^ ]*' /proc/cmdline)
      if [[ "$bootif" == "BOOTIF=discovery" ]] ; then
        bootif=$(cat /sys/class/net/eth0/address)
        bootif=${bootif//:/-}
        bootif="BOOTIF=01-$bootif"
      fi
      test -z "$bootif" && fail "Missing required parameter BOOTIF"
      test -z "$nextone" && fail "Missing required parameter provisioner.web"
      ip6=$(echo $nextone | grep -o '\[[0-9a-fA-F:]*\]')

      bootif=${bootif#*01-}
      bootif=${bootif//-/:}
      nextone=${nextone#*=}
      portdelay=${portdelay#*=}
      postportdelay=${postportdelay#*=}
      routedelay=${routedelay#*=}
      wgetretrycount=${wgetretrycount#*=}
      wgetretrycount=${wgetretrycount:-65}

      pxedev=""
      for dev in /sys/class/net/*; do
          test -f "$dev/address" || continue
          if test "$(cat "$dev/address")" = "$bootif"; then
              pxedev=${dev##*/}
              break
          fi
      done
      test -z "$pxedev" && fail "Failed to find network device we booted from"
      # if a port delay is sent - wait
      test -z "$portdelay" || sleep $portdelay
      echo "Configuring boot interface"
      ip link set "$pxedev" up
      # if a post port delay is sent - wait
      test -z "$postportdelay" || sleep $postportdelay
      if [[ "$ip6" == "" ]] ; then
          udhcpc -b -R -a -i "$pxedev"
      else
          test -z "$routedelay" || sleep $routedelay
          udhcpc6 -b -R -i "$pxedev"
      fi
      echo "Fetching second-stage initramfs"
      ARCH={{.Machine.Arch}}
      squashfs="$nextone/sledgehammer/$ARCH/$SIGNATURE/root.squashfs"
      if [ $ARCH == amd64 ]; then
          squashfs="$nextone/sledgehammer/$SIGNATURE/root.squashfs"
      fi
      if [ $ARCH == rpi4 ]; then
          squashfs="$nextone/sledgehammer/rpi4/rpi/root.squashfs"
      fi
      # Loop because it can take some time to come up.
      count=0
      while [[ $count != $wgetretrycount ]]; do
          (cd /newinitramfs; wget "$squashfs") && break
          sleep 1
          count=$(($count+1))
          if [[ $count == $wgetretrycount ]] ; then
              fail "Failed to download root.squashfs - exit to retry"
              count=0
          fi
      done
      echo "Switching to second-stage initramfs"
      modprobe loop
      modprobe squashfs
      mkdir /newinitramfs/.upper /newinitramfs/.work /newinitramfs/.lower
      mount -o ro -t squashfs "/newinitramfs/root.squashfs" /newinitramfs/.lower || \
          fail "Failed to mount root.squashfs as Stage2 initramfs"
      test -d "/newinitramfs/.lower/usr/lib/modules/$(uname -r)" || \
          fail "Stage2 kernel modules do not match running kernel!"
      # This is such a hack
      (cd "/newinitramfs/.lower/usr/lib/modules/$(uname -r)/kernel/fs/overlayfs"; insmod overlay.ko*) || \
          fail "Failed to load overlayfs kernel module"
      mount -t overlay -olowerdir=/newinitramfs/.lower,upperdir=/newinitramfs/.upper,workdir=/newinitramfs/.work newroot /newinitramfs || \
          fail "Failed to overlay a writeable filesystem over root.squashfs"

      # Remove /etc/machine-id
      rm -f /newinitramfs/etc/machine-id || :

      for fs in /dev /dev/pts /proc /sys; do
          mkdir -p "/newinitramfs$fs"
          mount --bind "$fs" "/newinitramfs$fs"
      done
      mkdir -p /newinitramfs/etc/systemd/network
      {
      echo '[Match]'
      printf 'MACAddress=%s\n\n' "$bootif"
      echo '[Network]'
      if [[ "$ip6" == "" ]] ; then
          echo 'DHCP=ipv4'
          echo
          echo '[DHCPv4]'
          echo 'ClientIdentifier=mac'
          echo 'SendDecline=false'
          echo 'SendRelease=false'
      else
          echo 'DHCP=ipv6'
          echo
          echo '[DHCPv6]'
          echo 'ClientIdentifier=mac'
      fi
      } > /newinitramfs/etc/systemd/network/20-bootif.network

      echo "$SIGNATURE" > /newinitramfs/etc/sledgehammer-id
      echo "SLEDGEHAMMER_VERSION=${SIGNATURE}" > /newinitramfs/etc/sledgehammer-release
      echo "SLEDGEHAMMER_DATE=\"::BUILD_DATE::\"" >> /newinitramfs/etc/sledgehammer-release
      echo "SLEDGEHAMMER_BUILDER_VERSION=::SBV::" >> /newinitramfs/etc/sledgehammer-release

      SLEDGE_ID=$(cat /newinitramfs/etc/sledgehammer-id)
      for file in "/newinitramfs/etc/issue" "/newinitramfs/etc/issue.net"; do
      echo "
      |              +--+   | Digital Rebar Sledgehammer
      |  +==========={  }   | ID $SLEDGE_ID
      |              +--+   | Kernel \r on an \m
      " > $file
      done

      echo "" >/proc/sys/kernel/hotplug
      # pkill -9 here to keep udhcpc from releasing the IP
      # address when we will want it back in a second or two.
      if [[ "$ip6" == "" ]] ; then
          pkill -9 udhcpc
      else
          pkill -9 udhcpc6
      fi
      ip link set "$pxedev" down

      exec switch_root /newinitramfs /sbin/init
      fail "Failed to switch to stage2 initramfs" "This should never happen"
  - Name: sledgehammer-stage1-udhcpc-config
    Path: /IMAGE/initrd/usr/share/udhcpc/default.script
    Contents: |
      #!/bin/sh
      # udhcpc script edited by Tim Riker <Tim@Rikers.org>

      wait_for_ipv6_default_route() {
        attempts=10
        while [ $attempts != 0 ] && [ -z "$(ip -6 route list | grep default)" ] ; do
          sleep 1
          attempts=$(($attempts-1))
        done
        [ $attempts = 0 ] && echo "failed to get default ipv6 route"
      }

      RESOLV_CONF="/etc/resolv.conf"

      [ -n "$1" ] || { echo "Error: should be called from udhcpc"; exit 1; }

      NETMASK=""
      [ -n "$subnet" ] && NETMASK="netmask $subnet"
      BROADCAST=""
      [ -n "$broadcast" ] && BROADCAST="broadcast $broadcast"

      echo "Received ip=$ip"
      echo "Received ipv6=$ipv6"
      echo "Received ipv6prefix=$ipv6prefix"
      [ -n "$ip" ] || ip="$ipv6prefix"
      [ -n "$ip" ] || ip="$ipv6/128"

      case "$1" in
          deconfig)
              echo "Setting IP address 0.0.0.0 on $interface"
              ifconfig $interface 0.0.0.0
              ;;

          renew|bound)
              echo "Setting IP address $ip on $interface"
              ifconfig $interface $ip $NETMASK $BROADCAST
              if [ -n "$ipv6" ] ; then
                echo "waiting for default ipv6 route set"
                wait_for_ipv6_default_route
              fi

              if [ -n "$router" ] ; then
                  echo "Deleting routers"
                  while route del default gw 0.0.0.0 dev $interface ; do
                      :
                  done

                  metric=0
                  for i in $router ; do
                      echo "Adding router $i"
                      route add default gw $i dev $interface metric $metric
                      : $(( metric += 1 ))
                  done
              fi

              echo "Recreating $RESOLV_CONF"
              # If the file is a symlink somewhere (like /etc/resolv.conf
              # pointing to /run/resolv.conf), make sure things work.
              realconf=$(readlink -f "$RESOLV_CONF" 2>/dev/null || echo "$RESOLV_CONF")
              tmpfile="$realconf-$$"
              > "$tmpfile"
              [ -n "$domain" ] && echo "search $domain" >> "$tmpfile"
              for i in $dns ; do
                  echo " Adding DNS server $i"
                  echo "nameserver $i" >> "$tmpfile"
              done
               mv "$tmpfile" "$realconf"
              ;;
      esac

      exit 0
      EOF
  - Name: squashfs-excludes
    Path: /IMAGE/excludes
    Contents: |
      tmp/*
      IMAGE
      var/cache/yum/*
      var/cache/dnf/*
      usr/local/bin/*
      usr/share/doc
