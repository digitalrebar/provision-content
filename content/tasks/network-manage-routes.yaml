---
Name: "network-manage-routes"
Description: "Set/Remove routes based on 'network-data' Param values. (Linux/ESXi/Darwin)"
Documentation: |
  Configure the system to add or remove additional Route statements provided in the
  ``network-data`` Param.  The ``network-manage-routes-command`` should be set to one
  of ``add`` or ``delete`` to define which action to take.

  If a route exists already, and the ``add`` action has been set (the default), then
  the route will first be removed, then re-added.

  In addition to ``network-data``, the ``network-data-tag`` must be specified to
  select the correct set of configuration data references found in ``network-data``.

  This task is designed to work on Linux (via ``ip2`` suite of commands), ESXi,
  and MacOS X (Darwin).  As such, it uses ``sh`` since VMware vSphere ESXi
  appliances do not have a proper BASH shell (they use a modified busybox shell).

Meta:
  icon: "cloud"
  color: "yellow"
  title: "Digital Rebar"
RequiredParams:
  - "network-data"
  - "network-data-tag"
  - "network-manage-routes-command"
Templates:
  - Name: "network-manage-routes.sh"
    Contents: |
      #!/usr/bin/env sh
      # Set additional network routes from 'network-data' Param

      ###
      #  NOTE - must use 'sh' for ESXi as 'bash' is not available, the shell
      #         constructs here must be compatible with ESXi busybox shell.
      #
      #       - needs support added for routes via Device (interfaces)
      ###

      echo ""

      xiterr() { [[ $1 =~ ^[0-9]+$ ]] && { XIT=$1; shift; } || XIT=1; printf "FATAL: $*\n"; exit $XIT; }
      {{ if eq (.Param "rs-debug-enable") true }}set -x{{ end }}
      set -e

      ### begin convert_ipv4_netmask_to_cidr_prefix.sh.tmpl
      {{ template "convert_ipv4_netmask_to_cidr_prefix.sh.tmpl" . }}

      ### begin network-manage-routes.sh
      #
      verify_and_remove() {
        echo ">>> Checking if route exists on system."
        if eval $CHK
        then
          echo "Route '$CIDR' via gateway '$GW' exists on system.  Removing."
          echo ">>> Remove with CMD:  $REM"
          eval $REM
        else
          echo ">>> No existing route found.  No remove action performed."
        fi
      }

      {{ $tag := ( .Param "network-data-tag" ) -}}
      TAG="{{ $tag }}"
      [[ -z "$TAG" ]] && xiterr 1 "Required 'network-data-tag' not specified." || true

      ACTION="{{ .Param "network-manage-routes-command" }}"

      echo ">>> Processing network-data tag '$TAG' values ..."

      {{ if .ParamExists "network-data" -}}
      {{ $netdata := .ComposeParam "network-data" -}}

      {{ if ( hasKey $netdata $tag ) -}}
      {{ $tagdata := ( get $netdata $tag ) -}}
      {{ range $rkey, $route := ( get $tagdata "routes" ) -}}
      # initialize variables to empty value for iterative range loops
      VER="" NW="" NM="" BITS="" CIDR="" GW=""

      # ESXi route command requires explicit IPv4 or IPv6 callout - it's not smart
      # enough to figure it out on it's own
      VER="{{ if ( contains ":" ( get $route "network" ) ) }}ipv6{{ else }}ipv4{{ end }}"

      {{ if and ( get $route "network" ) ( get $route "netmask" ) -}}
      NW="{{ get $route "network" }}"
      NM="{{ get $route "netmask" }}"

      #BITS="$(convert_ipv4_netmask_to_cidr_prefix $NM)"
      # requires DRP version v4.6.0 with the Feature Flag "virtual-media-boot"
      BITS="{{ $.NetmaskToCIDR (get $route "netmask" ) }}"
      CIDR="$NW/$BITS"
      {{ else -}}
      xiterr 1 "No required network and/or netmask specified in 'routes' section for '$TAG'."
      {{ end -}}

      {{ if ( get $route "gateway" ) -}}
      GW={{ get $route "gateway" }}
      {{ else -}}
      xiterr 1 "No required gateway defined in 'routes' section for '$TAG'."
      {{ end -}}

      ###
      #  Set our add, remove, and check commands for different system platforms.
      ###
      SYS=$(uname -s)
      case $SYS in
        VMkernel) ADD="esxcli network ip route $VER add --network=$CIDR --gateway=$GW"
                  REM="esxcli network ip route $VER remove --network=$CIDR --gateway=$GW"
                  CHK="esxcli network ip route $VER list | egrep -q \"${NW}.*${NM}\""
        ;;
        Linux)    ADD="ip route add $CIDR via $GW"
                  REM="ip route del $CIDR via $GW"
                  CHK="ip route list | grep -q \"$CIDR via $GW\""
        ;;
        Darwin)   ADD="sudo route -n add -net $CIDR $GW"
                  # allow MacOS X to fail without causing task to error out
                  REM="sudo route -n delete -net $CIDR $GW || true"
                  # thank you MacOS X for converting network info to shorthand
                  # they change "10.10.10.0/24" to "10.10.10/24" in routing tables
                  # "echo" will always succeed, so we'll always try to remove the route
                  CHK="echo"
        ;;
        *)        xiterr 1 "unsupported OS ('$SYS') for adding routes" ;;
      esac

      echo ""
      echo "===================== setting route ====================="
      echo ""
      echo " requested action:  $ACTION"
      echo "     machine type:  $SYS"
      echo "IP protocol suite:  $VER  (*)"
      echo "          Network:  $NW"
      echo "          Netmask:  $NM"
      echo "        CIDR bits:  $BITS"
      echo "    CIDR notation:  $CIDR"
      echo "  Network Gateway:  $GW"
      echo ""
      echo "===================== setting route ====================="
      echo ""
      echo "NOTE: (*) determined dynamically if Network has colon in it (IPv6) or not (IPv4)."
      echo ""

      # "remove" handled in above, so we don't need to specify it in 'case' statement
      case "$ACTION" in
        remove) verify_and_remove ;;
        add)
          verify_and_remove
          echo ">>> Add with CMD:  $ADD"
          eval $ADD
          echo ""
        ;;
      esac
      {{ end -}}

      {{ else -}}
      xiterr 1 "No data with tag of '$TAG' found in 'network-data' structure Param."
      {{ end -}}

      {{ else -}}
      xiterr 1 "Required Param 'network-data' structure not provided."
      {{ end -}}
