---
# Sledgehammer (the per machine bootenv)
# This bootenv requires the start-up.sh file to be rendered by the discovery bootenv.
# These two bootenvs are linked and should be used as a pair.
Name: "sledgehammer"
Description: "Ram-Only image loaded with tools to allow for discovery and maintenance"
Documentation: |
  The Sledgehammer BootEnv is used in conjunction with Discovery to boot a
  machine in to an in-memory (RAM only) operating system.  The Machine will
  be enrolled in the DRP Endpoint via Sledgehammer.

  Many maintenance and hardware related workflows require to be run from the
  Sledgehammer BootEnv.
Meta:
  feature-flags: "change-stage-v2"
  icon: "microchip"
  color: "green"
  title: "Digital Rebar Community Content"
OS:
  Family: "redhat"
  Name: "sledgehammer"
  SupportedArchitectures:
    amd64:
      IsoFile: "sledgehammer-c7305a9ba2c6b12351530c4a9021fd5e07ef1ce1.amd64.tar"
      IsoUrl: "http://rackn-sledgehammer.s3-website-us-west-2.amazonaws.com/sledgehammer/c7305a9ba2c6b12351530c4a9021fd5e07ef1ce1/sledgehammer-c7305a9ba2c6b12351530c4a9021fd5e07ef1ce1.amd64.tar"
      Kernel: "c7305a9ba2c6b12351530c4a9021fd5e07ef1ce1/vmlinuz0"
      Initrds:
        - "c7305a9ba2c6b12351530c4a9021fd5e07ef1ce1/stage1.img"
      BootParams: >-
        rootflags=loop
        root=live:/sledgehammer.iso
        rootfstype=auto
        ro
        liveimg
        rd_NO_LUKS
        rd_NO_MD
        rd_NO_DM
        provisioner.web={{.ProvisionerURL}}
        rs.uuid={{.Machine.UUID}}
        {{.Param "kernel-options"}}
        --
        {{.Param "kernel-console"}}
    arm64:
      Loader: "grubarm64.efi"
      IsoFile: "sledgehammer-9b5276ac5826520829aa73c149fe672fe2363656.arm64.tar"
      IsoUrl: "https://s3.us-east-2.amazonaws.com/vl-hammer/sledgehammer-9b5276ac5826520829aa73c149fe672fe2363656.arm64.tar"
      Kernel: "9b5276ac5826520829aa73c149fe672fe2363656/vmlinuz0"
      Initrds:
        - "9b5276ac5826520829aa73c149fe672fe2363656/stage1.img"
      BootParams: >-
        rootflags=loop
        root=live:/sledgehammer.iso
        rootfstype=auto
        ro
        liveimg
        rd_NO_LUKS
        rd_NO_MD
        rd_NO_DM
        provisioner.web={{.ProvisionerURL}}
        rs.uuid={{.Machine.UUID}}
        {{.Param "kernel-options"}}
        --
        {{.Param "kernel-console"}}
OptionalParams:
  - "kernel-console"
  - "kernel-options"
Templates:
  - Name: "kexec"
    ID: "kexec.tmpl"
    Path: "{{.Machine.Path}}/kexec"
  - ID: "default-pxelinux.tmpl"
    Name: "pxelinux"
    Path: "pxelinux.cfg/{{.Machine.HexAddress}}"
  - ID: "default-ipxe.tmpl"
    Name: "ipxe"
    Path: "{{.Machine.Address}}.ipxe"
  - ID: "default-pxelinux.tmpl"
    Name: "pxelinux-mac"
    Path: 'pxelinux.cfg/{{.Machine.MacAddr "pxelinux"}}'
  - ID: "default-ipxe.tmpl"
    Name: "ipxe-mac"
    Path: '{{.Machine.MacAddr "ipxe"}}.ipxe'
  - ID: "default-grub.tmpl"
    Name: "grub"
    Path: "grub/{{.Machine.Address}}.cfg"
  - ID: "default-grub.tmpl"
    Name: "grub-mac"
    Path: 'grub/{{.Machine.MacAddr "grub"}}.cfg'
  - Name: "control.sh"
    Path: "{{.Machine.Path}}/control.sh"
    Contents: |
      #!/bin/bash
      # Copyright 2017, RackN
      #
      # Licensed under the Apache License, Version 2.0 (the "License");
      # you may not use this file except in compliance with the License.
      # You may obtain a copy of the License at
      #
      #  http://www.apache.org/licenses/LICENSE-2.0
      #
      # Unless required by applicable law or agreed to in writing, software
      # distributed under the License is distributed on an "AS IS" BASIS,
      # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      # See the License for the specific language governing permissions and
      # limitations under the License.
      #

      # We get the following variables from start-up.sh
      # MAC BOOTDEV ADMIN_IP DOMAIN HOSTNAME HOSTNAME_MAC
      shopt -s extglob
      export PS4="${BASH_SOURCE}@${LINENO}(${FUNCNAME[0]}): "
      cp /usr/share/zoneinfo/GMT /etc/localtime

      # This will contain a token appropriate for the path being
      # used below.  Reset the token to the longer machine token.
      export RS_TOKEN="{{.GenerateInfiniteToken}}"

      # If we do not have hardware addresses set on the machine, set them now.
      get_macs() {
          local maclist=""
          local nic=""
          for nic in /sys/class/net/*; do
              [[ -f $nic/type && -f $nic/address && $(cat "$nic/type") == 1 ]] || continue
              maclist="$maclist,\"$(cat "$nic/address")\""
          done
          printf '[%s]' "${maclist#,}"
      }
      mac_re='BOOTIF=([^ ]+)'
      if [[ $(cat /proc/cmdline) =~ $mac_re ]]; then
          drpcli machines set "$RS_UUID" param last-boot-macaddr to "\"${BASH_REMATCH[1]}\"" &>/dev/null
      fi
      json="$(drpcli machines show "$RS_UUID")"
      # The machine does not have hardware addresses set, so set them
      if [[ "$(jq '.HardwareAddrs | length' <<< "$json")" = 0 ]]; then
          drpcli machines update "$RS_UUID" "{\"HardwareAddrs\": $(get_macs)}" &>/dev/null
      fi
      if [[ $IP && "$(jq -r '.Address' <<< "$json")" != $IP ]]; then
          drpcli machines update "$RS_UUID" "{\"Address\":\"$IP\"}" &>/dev/null
      fi
      unset get_macs json

      if [[ -d /sys/firmware/efi ]]; then
          drpcli machines set "$RS_UUID" param detected-bios-mode to '"uefi"' &>/dev/null
      else
          drpcli machines set "$RS_UUID" param detected-bios-mode to '"legacy-bios"' &>/dev/null
      fi

      {{template "reset-workflow.tmpl" .}}
      {{template "runner.tmpl" .}}

      # The last line in this script must always be exit 0!!
      exit 0
