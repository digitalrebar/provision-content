---
Name: "ubuntu-20.04-install"
Description: "Ubuntu-20.04 install"
Documentation: |
  Installs Ubuntu Focal Fossa (20.04) LTS version.  This BootEnv will install
  the General Available (GA) kernel.  If you wish to install the HWE (Hardware
  Enablement) version, please use the Stage "ubuntu-20.04-hwe-install".
  Both amd64 and arm64 architectures are supported.
  NOTE - Default Ubuntu ISOs will attempt to check internet repositories, this
  can cause problems during provisioning if your environment does not have
  outbound access.  Workaround this by defining Options 3 (Gateway) and 6 (DNS)
  for your Subnet settings.

  ``part-scheme`` can be used to inject a storage section.

  The template would be named "part-scheme-<Value of part-scheme>".

  The format should be:

    ::

      Note Indentation matters with the extra two spaces.

        storage:
          swap:
            size: 0
          layout:
            name: direct
            match:
              ssd: yes

Meta:
  color: "purple"
  feature-flags: "change-stage-v2"
  icon: "linux"
  title: "Digital Rebar Community Content"
OS:
  Name: "ubuntu-20.04"
  Family: "ubuntu"
  Codename: "Focal Fossa"
  Version: "20.04"
  SupportedArchitectures:
    amd64:
      IsoFile: "ubuntu-20.04-live-server-amd64.iso"
      IsoUrl: "https://rackn-repo.s3.amazonaws.com/isos/canonical/ubuntu/20.04/ubuntu-20.04-live-server-amd64.iso"
      IsoSha256: "caf3fd69c77c439f162e2ba6040e9c320c4ff0d69aad1340a514319a9264df9f"
      Kernel: "casper/vmlinuz"
      Initrds:
        - "casper/initrd"
      BootParams: >-
        root=/dev/ram0
        ramdisk_size=1500000
        ip=dhcp
        url={{.ProvisionerURL}}/isos/ubuntu-20.04-live-server-amd64.iso
        autoinstall
        ds=nocloud-net;s={{.Machine.Url}}/autoinstall/
#        {{.Param "kernel-options"}}
#        --
#        {{.Param "kernel-console"}}
OnlyUnknown: false
OptionalParams:
  - part-scheme
  - operating-system-disk
  - provisioner-default-user
  - provisioner-default-fullname
  - provisioner-default-uid
  - provisioner-default-password-hash
  - kernel-console
  - kernel-options
  - proxy-servers
  - dns-domain
  - local-repo
  - proxy-servers
  - ntp-servers
  - select-kickseed
Templates:
  - ID: "kexec.tmpl"
    Name: "kexec"
    Path: "{{.Machine.Path}}/kexec"
  - ID: "default-pxelinux.tmpl"
    Name: "pxelinux"
    Path: "pxelinux.cfg/{{.Machine.HexAddress}}"
  - ID: "default-ipxe.tmpl"
    Name: "ipxe"
    Path: "{{.Machine.Address}}.ipxe"
  - ID: "default-pxelinux.tmpl"
    Name: "pxelinux-mac"
    Path: 'pxelinux.cfg/{{.Machine.MacAddr "pxelinux"}}'
  - ID: "default-ipxe.tmpl"
    Name: "ipxe-mac"
    Path: '{{.Machine.MacAddr "ipxe"}}.ipxe'
  - Name: "grub-secure-mac"
    Path: '{{.Env.PathFor "tftp" ""}}/EFI/BOOT/grub.cfg-{{.Machine.MacAddr "pxelinux"}}'
    ID: "default-grub.tmpl"
  - Name: "grub-secure"
    Path: '{{.Env.PathFor "tftp" ""}}/EFI/BOOT/grub.cfg-{{.Machine.HexAddress}}'
    ID: "default-grub.tmpl"
  - ID: "default-grub.tmpl"
    Name: "grub"
    Path: "grub/{{.Machine.Address}}.cfg"
  - ID: "default-grub.tmpl"
    Name: "grub-mac"
    Path: 'grub/{{.Machine.MacAddr "grub"}}.cfg'
  - Name: "autoinstall"
    Path: "{{.Machine.Path}}/autoinstall/user-data"
    Contents: |
      #cloud-config
      autoinstall:
        version: 1
        {{ if .ParamExists "proxy-servers" -}}
        proxy: "{{ index (.Param "proxy-servers") 0 }}"
        {{ end }}
        identity:
          hostname: {{.Machine.Name}}
          password: "{{if .ParamExists "provisioner-default-password-hash"}}{{.Param "provisioner-default-password-hash"}}{{else}}$6$drprocksdrprocks$upAIK9ynEEdFmaxJ5j0QRvwmIu2ruJa1A1XB7GZjrnYYXXyNr4qF9FttxMda2j.cmh.TSiLgn4B/7z0iSHkDC1{{end}}"
          username: {{if .ParamExists "provisioner-default-user"}}{{.Param "provisioner-default-user"}}{{else}}rocketskates{{end}}
        ssh:
          install-server: yes
          authorized-keys:
            {{range $key := .Param "access-keys" }}
            - "{{$key}}"
            {{end}}
          {{ if .ParamExists "access-ssh-root-mode" }}
          allow-pw: {{.Param "access-ssh-root-mode"}}
          {{end}}
        keyboard:
          layout: us
        locale: en_US
      {{ if .ParamExists "part-scheme" }}
      {{ $templateName := (printf "part-scheme-%s.tmpl" (.Param "part-scheme")) }}
      {{ .CallTemplate $templateName . }}
      {{ end }}
        late-commands:
          - wget --no-proxy {{.Machine.Url}}/post-install.sh -O /target/net-post-install.sh
          - chmod +x /target/net-post-install.sh
          - curtin in-target --target=/target /net-post-install.sh

  - Name: meta-data
    Path: '{{.Machine.Path}}/autoinstall/meta-data'
    Contents: |
      instance-id: {{.Machine.UUID}}
      local-hostame: {{.Machine.Name}}
  - Name: post-install
    Path: '{{.Machine.Path}}/post-install.sh'
    Contents: |
      #!/bin/bash
      set -x
      export PS4='${BASH_SOURCE}@${LINENO}(${FUNCNAME[0]}): '

      {{template "reset-workflow.tmpl" .}}
      {{template "runner.tmpl" .}}

