---
Name: "discovery"
Description: "The boot environment to use to have unknown machines boot to default Stage/BootEnv"
Documentation: |
  Normal option of this bootenv is to provision physical services using sledgehammer.

  To join EXISTING machines or CLOUD machines into DRP, you can use run `join-up.sh`.
  Add the following line to the machines initialization script:
    ::

      #!/bin/bash
      curl -fsSL [internal ip]:8091/machines/join-up.sh | sudo bash --
Meta:
  feature-flags: "change-stage-v2"
  icon: "binoculars"
  color: "blue"
  title: "Digital Rebar Community Content"
OnlyUnknown: true
OS:
  Family: "redhat"
  Name: "sledgehammer"
  SupportedArchitectures:
    amd64:
      IsoFile: "sledgehammer-c7305a9ba2c6b12351530c4a9021fd5e07ef1ce1.amd64.tar"
      IsoUrl: "http://rackn-sledgehammer.s3-website-us-west-2.amazonaws.com/sledgehammer/c7305a9ba2c6b12351530c4a9021fd5e07ef1ce1/sledgehammer-c7305a9ba2c6b12351530c4a9021fd5e07ef1ce1.amd64.tar"
      Kernel: "c7305a9ba2c6b12351530c4a9021fd5e07ef1ce1/vmlinuz0"
      Initrds:
        - "c7305a9ba2c6b12351530c4a9021fd5e07ef1ce1/stage1.img"
      BootParams: >-
        rootflags=loop
        root=live:/sledgehammer.iso
        rootfstype=auto
        ro
        liveimg
        rd_NO_LUKS
        rd_NO_MD
        rd_NO_DM
        provisioner.web={{.ProvisionerURL}}
        {{.Param "kernel-options"}}
        --
        {{.Param "kernel-console"}}
    arm64:
      Loader: "grubarm64.efi"
      IsoFile: "sledgehammer-9b5276ac5826520829aa73c149fe672fe2363656.arm64.tar"
      IsoUrl: "https://s3.us-east-2.amazonaws.com/vl-hammer/sledgehammer-9b5276ac5826520829aa73c149fe672fe2363656.arm64.tar"
      Kernel: "9b5276ac5826520829aa73c149fe672fe2363656/vmlinuz0"
      Initrds:
        - "9b5276ac5826520829aa73c149fe672fe2363656/stage1.img"
      BootParams: >-
        rootflags=loop
        root=live:/sledgehammer.iso
        rootfstype=auto
        ro
        liveimg
        rd_NO_LUKS
        rd_NO_MD
        rd_NO_DM
        provisioner.web={{.ProvisionerURL}}
        {{.Param "kernel-options"}}
        --
        {{.Param "kernel-console"}}
OptionalParams:
  - "kernel-console"
  - "kernel-options"
Templates:
  - Name: "pxelinux"
    Path: "pxelinux.cfg/default"
    Contents: |
      DEFAULT discovery
      PROMPT 0
      TIMEOUT 10
      LABEL discovery
        KERNEL {{.Env.PathFor "tftp" .Env.Kernel}}
        INITRD {{.Env.JoinInitrds "tftp"}}
        APPEND {{.BootParams}}
        IPAPPEND 2
  - Name: "ipxe"
    Path: "default.ipxe"
    Contents: |
      #!ipxe
      chain {{.ProvisionerURL}}/${netX/mac}.ipxe && exit 1 || goto chainip
      :chainip
      chain {{.ProvisionerURL}}/${netX/ip}.ipxe && exit 1 || goto sledgehammer
      :sledgehammer
      chain {{.ProvisionerURL}}/${builtin/buildarch}.ipxe
  - Name: "ipxe-i386"
    Path: "i386.ipxe"
    Contents: |
      #!ipxe
      kernel {{.Env.PathForArch "http" (.Env.KernelFor "amd64") "amd64"}} {{.BootParamsFor "amd64"}} BOOTIF=01-${netX/mac:hexhyp}
      {{range $initrd := .Env.InitrdsFor "amd64"}}
      module {{$.Env.PathForArch "http" $initrd "amd64"}}
      {{end}}
      boot
  - Name: "ipxe-x86_64"
    Path: "x86_64.ipxe"
    Contents: |
      #!ipxe
      kernel {{.Env.PathForArch "http" (.Env.KernelFor "amd64") "amd64"}} {{.BootParamsFor "amd64"}} BOOTIF=01-${netX/mac:hexhyp}
      {{range $initrd := .Env.InitrdsFor "amd64"}}
      module {{$.Env.PathForArch "http" $initrd "amd64"}}
      {{end}}
      boot
  - Name: "ipxe-arm64"
    Path: "arm64.ipxe"
    Contents: |
      #!ipxe
      kernel {{.Env.PathForArch "http" (.Env.KernelFor "arm64") "arm64"}} {{.BootParamsFor "arm64"}} BOOTIF=01-${netX/mac:hexhyp}
      {{range $initrd := (.Env.InitrdsFor "arm64")}}
      module {{$.Env.PathForArch "http" $initrd "arm64"}}
      {{end}}
      boot
  - Name: "grub"
    Path: "grub/grub.cfg"
    Contents: |
      set _kernel=linux
      set _module=initrd
      $_kernel
      if test $? != 18; then
          set _kernel=linuxefi
          set _module=initrdefi
      fi
      function kernel { $_kernel "$@"; }
      function module { $_module "$@"; }
      if test -s (tftp)/grub/${net_default_mac}.cfg; then
        echo "Booting via MAC"
        source (tftp)/grub/${net_default_mac}.cfg
      elif test -s (tftp)/grub/${net_default_ip}.cfg; then
        echo "Booting via IP"
        source (tftp)/grub/${net_default_ip}.cfg
      else
        echo "Booting discovery for ${grub_cpu}"
        source (tftp)/grub/${grub_cpu}.cfg
      fi
      boot
  - Name: "grub-i386"
    Path: "grub/i386.cfg"
    Contents: |
      kernel (tftp)/{{.Env.PathForArch "tftp" (.Env.KernelFor "amd64") "amd64"}} {{.BootParamsFor "amd64"}} BOOTIF=01-${net_default_mac}
      {{range $initrd := .Env.InitrdsFor "amd64"}}
      module (tftp)/{{$.Env.PathForArch "tftp" $initrd "amd64"}}
      {{end}}
  - Name: "grub-x86_64"
    Path: "grub/x86_64.cfg"
    Contents: |
      kernel linux (tftp)/{{.Env.PathForArch "tftp" (.Env.KernelFor "amd64") "amd64"}} {{.BootParamsFor "amd64"}} BOOTIF=01-${net_default_mac}
      {{range $initrd := .Env.InitrdsFor "amd64"}}
      module (tftp)/{{$.Env.PathForArch "tftp" $initrd "amd64"}}
      {{end}}
  - Name: "grub-arm64"
    Path: "grub/arm64.cfg"
    Contents: |
      kernel (tftp)/{{.Env.PathForArch "tftp" (.Env.KernelFor "arm64") "arm64"}} {{.BootParamsFor "arm64"}} BOOTIF=01-${net_default_mac}
      {{range $initrd := .Env.InitrdsFor "arm64"}}
      module (tftp)/{{$.Env.PathForArch "tftp" $initrd "arm64"}}
      {{end}}
  - Name: "join-up.sh"
    Path: "machines/join-up.sh"
    Contents: |
      #!/bin/bash
      # Register Cloud Machines into Digital Rebar
      # Copyright 2018, RackN
      #
      # Licensed under the Apache License, Version 2.0 (the "License");
      # you may not use this file except in compliance with the License.
      # You may obtain a copy of the License at
      #
      #  http://www.apache.org/licenses/LICENSE-2.0
      #
      # Unless required by applicable law or agreed to in writing, software
      # distributed under the License is distributed on an "AS IS" BASIS,
      # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      # See the License for the specific language governing permissions and
      # limitations under the License.
      #
      # To use this script start your machine with:
      #   #!/bin/bash
      #   curl -fsSL [internal ip]:8091/machines/join-up.sh | sudo bash --
      #
      # This comment allows this script to function as a Cumulus ZTP script.
      # CUMULUS-AUTOPROVISIONING

      export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

      # to be generic, we do NOT assume access to cloud provider APIs to determine things
      get_macs() {
          local maclist=""
          local nic=""
          for nic in /sys/class/net/*; do
              [[ -f $nic/type && -f $nic/address && $(cat "$nic/type") == 1 ]] || continue
              maclist="$maclist,\"$(cat "$nic/address")\""
          done
          printf '[%s]' "${maclist#,}"
      }

      PROVISIONER_WEB="{{.ProvisionerURL}}"
      ARCH="$(uname -m)"
      case $ARCH in
          amd64|x86_64) ARCH=amd64;;
          arm64|aarch64) ARCH=arm64;;
          *)
              echo "Unknown arch $ARCH"
              exit 1;;
      esac
      # Perform minimal required bootstrapping for discovery
      export RS_TOKEN="{{.GenerateToken}}"
      export RS_ENDPOINT="{{.ApiURL}}"
      mkdir -p /usr/local/bin
      grep -q '/usr/local/bin' <<< "$PATH" || export PATH="$PATH:/usr/local/bin"
      for tool in drpcli jq; do
          which "$tool" &>/dev/null && continue
          echo "Installing $tool in /usr/local/bin"
          case $tool in
              drpcli) curl -gsfLo "/usr/local/bin/$tool" "{{.ProvisionerURL}}/files/drpcli.$ARCH.linux";;
              jq)     curl -gsfLo "/usr/local/bin/$tool" "{{.ProvisionerURL}}/files/jq";;
          esac
          chmod 755 "/usr/local/bin/$tool"
      done
      unset tool

      set -x

      # Check just in case we pxe booted.
      host_re='rs\.uuid=([^ ]+)'
      if [[ $(cat /proc/cmdline) =~ $host_re ]]; then
        RS_UUID="${BASH_REMATCH[1]}"
      fi

      # Check Hostname to find us
      if [[ $RS_UUID == null || $RS_UUID == "" ]]; then
        RS_UUID=$(drpcli machines list Name=$HOSTNAME | jq -r .[0].Uuid)
        if [[ $RS_UUID == null || $RS_UUID == "" ]]; then
          RS_UUID=$(drpcli machines show Name:$HOSTNAME | jq -r .Uuid)
        fi
      fi

      # If no uuid, check to see if we have one stored from before
      if [[ $RS_UUID == null || $RS_UUID == "" ]]; then
        # See if we have already been created based on dropping uuid file
        if [[ -f /etc/rs-uuid ]]; then
            luuid="$(tail -n 1 /etc/rs-uuid)"
            RS_UUID=$(drpcli machines list Uuid=$luuid | jq -r .[0].Uuid)
            if [[ $RS_UUID == null || $RS_UUID == "" ]]; then
              RS_UUID=$(drpcli machines show $luuid | jq -r .Uuid)
            fi
        fi
      fi

      # If we still don't have RS_UUID - check the IP address.
      IP=""
      BOOTDEV="eth0"
      bootdev_ip4_re='inet ([0-9.]+)/([0-9]+)'
      bootdev_ip6_re='inet6 ([0-9a-fA-F:.]+)/([0-9]+) scope global'
      if [[ $(ip -4 -o addr show dev $BOOTDEV) =~ $bootdev_ip4_re ]]; then
          IP="${BASH_REMATCH[1]}"
      else
          if [[ $(ip -6 -o addr show dev $BOOTDEV) =~ $bootdev_ip6_re ]]; then
              IP="${BASH_REMATCH[1]}"
          fi
      fi
      if [[ $RS_UUID == null || $RS_UUID == "" ]]; then
        RS_UUID=$(drpcli machines list Address=$IP | jq -r .[0].Uuid)
      fi

      # If we still don't have a UUID, then create a machine
      if [[ $RS_UUID == null || $RS_UUID == "" ]]; then
        echo "Machine UUID file not found.  Adding $HOSTNAME..."

        # Create a new node for us,
        while ! JSON="$(drpcli machines create "{\"Name\": \"$HOSTNAME\",
                                             \"Address\": \"$IP\",
                                             \"Arch\": \"$ARCH\",
                                             \"Meta\": {\"icon\":\"cloud\"},
                                             \"HardwareAddrs\": $(get_macs)}")"; do
            echo "We could not create a node for ourself, trying again."
            sleep 5
        done
        RS_UUID="$(jq -r '.Uuid' <<< "$JSON")"
        echo "${RS_UUID}" > /etc/rs-uuid
        echo "Machine $HOSTNAME added with UUID $RS_UUID"
      else
        echo "Machine $HOSTNAME found in DRPCLI! Using $RS_UUID"
        echo "${RS_UUID}" > /etc/rs-uuid
      fi

      {{template "profile.tmpl" .}}

      echo "$PROVISIONER_WEB/machines/$RS_UUID/control.sh"
      if ! curl -g -s -f -L -o /tmp/control.sh "$PROVISIONER_WEB/machines/$RS_UUID/control.sh" && \
          grep -q '^exit 0$' /tmp/control.sh && \
          head -1 /tmp/control.sh | grep -q '^#!/bin/bash'; then
          echo "Could not load our control.sh!"
          exit 1
      fi
      chmod 755 /tmp/control.sh

      export RS_UUID BOOTDEV PROVISIONER_WEB MAC DOMAIN DNS_SERVERS HOSTNAME IP

      echo "transfer from start-up to control script"

      [[ -x /tmp/control.sh ]] && exec /tmp/control.sh

      echo "Did not get control.sh from $PROVISIONER_WEB/machines/$RS_UUID/control.sh"
      exit 1
  - Name: "start-up.sh"
    Path: "machines/start-up.sh"
    Contents: |
      #!/bin/bash
      export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin
      set +x

      get_macs() {
          local maclist=""
          local nic=""
          for nic in /sys/class/net/*; do
              [[ -f $nic/type && -f $nic/address && $(cat "$nic/type") == 1 ]] || continue
              maclist="$maclist,\"$(cat "$nic/address")\""
          done
          printf '[%s]' "${maclist#,}"
      }

      if [[ ! -f /etc/systemd/network/20-bootif.network ]]; then
          get_param() {
              [[ $(cat /proc/cmdline) =~ $1 ]] && echo "${BASH_REMATCH[1]}"
          }

          dhcp_param() {
              [[ $(cat /var/lib/dhclient/dhclient.leases) =~ $1 ]] && echo "${BASH_REMATCH[1]}"
          }


      # Since we are not using normal networking, make sure that
      # dhclient will stick around forever even if we exit
          cat >"/etc/systemd/system/dhclient-$BOOTDEV.service" << EOF
      [Unit]
      Description=dhclient for $BOOTDEV.service
      After=network-online.target
      Wants=network-online.target

      [Service]
      Type=simple
      ExecStart=/sbin/dhclient --no-pid -d $BOOTDEV

      [Install]
      WantedBy=multi-user.target
      EOF

          systemctl daemon-reload
          dhclient -x
          systemctl start "dhclient-$BOOTDEV"
          sleep 5

          # Stuff from sledgehammer file that makes this command debuggable
          # Some useful boot parameter matches
          ip_re='([0-9a-f.:]+/[0-9]+)'
          host_re='rs\.uuid=([^ ]+)'
          hostname_re='option host-name "([^"]+)'
          fixed_ip='fixed-address ([0-9a-f.:]+)'
          uuid_re='^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$'
          netname_re='"network":"([^ ]+)"'

          # Assume nothing about the hostname.
          unset HOSTNAME

          # Check for DHCP set host name.  Expand it to a FQDN if needed.
          if dhcp_hostname="$(dhcp_param "$hostname_re")"; then
              echo "Hostname set by DHCP to $dhcp_hostname"
              if [[ ${dhcp_hostname%%.*} == $dhcp_hostname ]]; then
                  HOSTNAME="${dhcp_hostname}.${DOMAIN}"
              else
                  HOSTNAME="$dhcp_hostname"
              fi
          else
              dhcp_ip="$(dhcp_param "$fixed_ip")"
              if [[ $dhcp_ip != "" ]]  ; then
                  lookup_1=$(getent hosts $dhcp_ip | awk '{print $2}')
                  lookup_2=$(getent hosts $dhcp_ip | awk '{print $2}')
                  if [[ $lookup_1 && $lookup_1 == $lookup_2 && $lookup_1 != localhost* ]]; then
                      HOSTNAME=$lookup_1
                  fi
              fi
          fi
      fi
      ARCH="$(uname -m)"
      case $ARCH in
          amd64|x86_64) ARCH=amd64;;
          arm64|aarch64) ARCH=arm64;;
          *)
              echo "Unknown arch $ARCH"
              exit 1;;
      esac
      # Perform minimal required bootstrapping for discovery
      export RS_TOKEN="{{.GenerateToken}}"
      export RS_ENDPOINT="{{.ApiURL}}"
      mkdir -p /usr/local/bin
      grep -q '/usr/local/bin' <<< "$PATH" || export PATH="$PATH:/usr/local/bin"
      for tool in drpcli jq; do
          which "$tool" &>/dev/null && continue
          echo "Installing $tool in /usr/local/bin"
          case $tool in
              drpcli) curl -gsfLo "/usr/local/bin/$tool" "{{.ProvisionerURL}}/files/drpcli.$ARCH.linux";;
              jq)     curl -gsfLo "/usr/local/bin/$tool" "{{.ProvisionerURL}}/files/jq";;
          esac
          chmod 755 "/usr/local/bin/$tool"
      done
      unset tool

      IP=""
      bootdev_ip4_re='inet ([0-9.]+)/([0-9]+)'
      bootdev_ip6_re='inet6 ([0-9a-fA-F:.]+)/([0-9]+) scope global'
      if [[ $(ip -4 -o addr show dev $BOOTDEV) =~ $bootdev_ip4_re ]]; then
          IP="${BASH_REMATCH[1]}"
      else
          if [[ $(ip -6 -o addr show dev $BOOTDEV | grep "scope global" | head -1) =~ $bootdev_ip6_re ]]; then
              IP="${BASH_REMATCH[1]}"
          fi
      fi
      # See if we have already been created.
      if [[ $(cat /proc/cmdline) =~ $host_re ]]; then
          RS_UUID="${BASH_REMATCH[1]}"
          json="$(drpcli machines show "$RS_UUID")"
          # If we did not get a hostname from DHCP, get it from DigitalRebar Provision.
          if [[ ! $HOSTNAME ]]; then
              HOSTNAME="$(jq -r '.Name' <<< "$json")"
          fi
      else
          # If we did not get a hostname from DHCP, generate one for ourselves.
          [[ $HOSTNAME ]] || HOSTNAME="d${MAC//:/-}.${DOMAIN}"

          # Create a new node for us,
          while ! json="$(drpcli machines create "{\"Name\": \"$HOSTNAME\",
                                               \"Address\": \"$IP\",
                                               \"Arch\": \"$ARCH\",
                                               \"HardwareAddrs\": $(get_macs)}")"; do
              echo "We could not create a node for ourself, trying again."
              sleep 5
          done
          RS_UUID="$(jq -r '.Uuid' <<< "$json")"

      fi
      echo "${RS_UUID}" > /etc/rs-uuid
      # Set our hostname for everything else.
      if [ -f /etc/sysconfig/network ] ; then
          sed -i -e "s/HOSTNAME=.*/HOSTNAME=${HOSTNAME}/" /etc/sysconfig/network
      fi
      echo "${HOSTNAME#*.}" >/etc/domainname
      hostname "$HOSTNAME"

      {{template "profile.tmpl" .}}

      # Force reliance on DNS
      echo '127.0.0.1 localhost' >/etc/hosts

      if ! curl -g -s -f -L -o /tmp/control.sh "$PROVISIONER_WEB/machines/$RS_UUID/control.sh" && \
          grep -q '^exit 0$' /tmp/control.sh && \
          head -1 /tmp/control.sh | grep -q '^#!/bin/bash'; then
          echo "Could not load our control.sh!"
          exit 1
      fi
      chmod 755 /tmp/control.sh

      export RS_UUID BOOTDEV PROVISIONER_WEB MAC DOMAIN DNS_SERVERS HOSTNAME IP

      echo "transfer from start-up to control script"

      [[ -x /tmp/control.sh ]] && exec /tmp/control.sh

      echo "Did not get control.sh from $PROVISIONER_WEB/machines/$RS_UUID/control.sh"
      exit 1
