---
Name: "discovery"
Description: "The boot environment to use to have unknown machines boot to default Stage/BootEnv"
Documentation: |
  Normal option of this bootenv is to provision physical services using sledgehammer.

  To join EXISTING machines or CLOUD machines into DRP, you can use run `join-up.sh`.
  Add the following line to the machines initialization script:

    ::

      #!/bin/bash
      curl -fsSL [internal ip]:8091/machines/join-up.sh | sudo bash --

  To join EXISTING machines or CLOUD machines running ESXi into DRP, you can use `esxi-join-up.py`.
  To run this you will first need to install 2 packages RackN provides in vib or component format that
  have been signed by VMware. You will need the DRP-Firewall-Rule and the DRP-Agent packages. These
  packages are available on your local DRP endpoint. Before those packages can be installed a partial
  configuration file will need to be placed on the HostSystem. These steps will need to be done in order.
  The following commands can be run from the HostSystem you plan to join to DRP.

    ::

      RKN_DIR=$(localcli --formatter json storage filesystem list|python -c "import sys,json;x=json.load(sys.stdin);y=[i for i in x if i['Type']=='VFFS' or 'vmfs' in i['Type'].lower()];print(y[0]['Mount Point'])")/rackn
      mkdir -p $RKN_DIR
      cd $RKN_DIR
      # For 6.x
      wget -O DRP-Agent.zip [internal ip]:8091/files/plugin_providers/vmware/6.x/RKN-DRPY-Agent_1.3-0.0.0000-offline_bundle-17977725.zip
      wget -O DRP-Firewall-Rule.zip [internal ip]:8091/files/plugin_providers/vmware/6.x/RKN-DRPY-FW-RULE_1.0-0.0.0003-offline_bundle-16370411.zip
      # For 7.x
      wget -O DRP-Agent.vib [internal ip]:8091/files/plugin_providers/vmware/7.x/RKN-DRPY-Agent_1.3-0.0.0000_17977727.zip
      wget -O DRP-Firewall-Rule.zip [internal ip]:8091/files/plugin_providers/vmware/7.x/RKN-DRPY-FW-RULE_1.0-0.0.0003_16333171.zip

      wget [internal ip]:8091/files/plugin_providers/vmware/drpy.conf
      localcli software vib install -d ./DRP-Firewall-Rule.zip
      localcli software vib install -d ./DRP-Agent.zip

  Next you can download the join up script, and then run it:

    ::

      wget [internal ip]:8091/machines/esxi-join-up.py
      python esxi-join-up.py

  When this process completes you will get output letting you know the machine was added to inventory.

Meta:
  type: "discovery"
  feature-flags: "change-stage-v2"
  icon: "binoculars"
  color: "blue"
  title: "Digital Rebar Community Content"
OnlyUnknown: true
Loaders:
  amd64-uefi: baad16af1d185f87450b01cce24cf2c15be40b64/shimx64.efi
OS:
  Family: "redhat"
  Name: "sledgehammer"
  SupportedArchitectures:
    amd64:
      IsoFile: "sledgehammer-baad16af1d185f87450b01cce24cf2c15be40b64.amd64.tar"
      IsoUrl: "http://rackn-sledgehammer.s3-website-us-west-2.amazonaws.com/sledgehammer/baad16af1d185f87450b01cce24cf2c15be40b64/sledgehammer-baad16af1d185f87450b01cce24cf2c15be40b64.amd64.tar"
      Kernel: "baad16af1d185f87450b01cce24cf2c15be40b64/vmlinuz0"
      Initrds:
        - "baad16af1d185f87450b01cce24cf2c15be40b64/stage1.img"
      BootParams: >-
        rootflags=loop
        root=live:/sledgehammer.iso
        rootfstype=auto
        ro
        liveimg
        rd_NO_LUKS
        rd_NO_MD
        rd_NO_DM
        provisioner.web={{.ProvisionerURL}}
        {{.Param "kernel-options"}}
        --
        {{.Param "kernel-console"}}
    arm64:
      Loader: "grubarm64.efi"
      IsoFile: "sledgehammer-9b5276ac5826520829aa73c149fe672fe2363656.arm64.tar"
      IsoUrl: "https://s3.us-east-2.amazonaws.com/vl-hammer/sledgehammer-9b5276ac5826520829aa73c149fe672fe2363656.arm64.tar"
      Kernel: "9b5276ac5826520829aa73c149fe672fe2363656/vmlinuz0"
      Initrds:
        - "9b5276ac5826520829aa73c149fe672fe2363656/stage1.img"
      BootParams: >-
        rootflags=loop
        root=live:/sledgehammer.iso
        rootfstype=auto
        ro
        liveimg
        rd_NO_LUKS
        rd_NO_MD
        rd_NO_DM
        provisioner.web={{.ProvisionerURL}}
        {{.Param "kernel-options"}}
        --
        {{.Param "kernel-console"}}
    rpi4:
      Loader: grubarm64.efi
      IsoFile: sledgehammer-d50c0910deee78591225ef5ede200021b7288b5b.rpi4.tar
      IsoUrl: "https://rackn-sledgehammer.s3-us-west-2.amazonaws.com/sledgehammer/d50c0910deee78591225ef5ede200021b7288b5b/sledgehammer-d50c0910deee78591225ef5ede200021b7288b5b.rpi4.tar"
      Kernel: rpi-5.4.35/kernel8.img
      Initrds:
        - rpi-5.4.35/stage1.img
      BootParams: >-
        rootflags=loop
        root=live:/sledgehammer.iso
        rootfstype=auto
        ro
        liveimg
        rd_NO_LUKS
        rd_NO_MD
        rd_NO_DM
        provisioner.web={{.ProvisionerURL}}
        rs.uuid={{.Machine.UUID}}
        {{.Param "kernel-options"}}
        --
        {{.Param "kernel-console"}}
OptionalParams:
  - "kernel-console"
  - "kernel-options"
Templates:
  - Name: start4.elf
    Link: '{{.Env.PathForArch "tftp" "rpi-5.4.35/start4.elf" "rpi4"}}'
    Path: start4.elf
  - Name: fixup4.dat
    Link: '{{.Env.PathForArch "tftp" "rpi-5.4.35/fixup4.dat" "rpi4"}}'
    Path: fixup4.dat
  - Name: bcm2711-rpi-4-b.dtb
    Link: '{{.Env.PathForArch "tftp" "rpi-5.4.35/bcm2711-rpi-4-b.dtb" "rpi4"}}'
    Path: bcm2711-rpi-4-b.dtb
  - Name: root.squashfs
    Link: '{{.Env.PathForArch "tftp" "rpi-5.4.35/root.squashfs" "rpi4"}}'
    Path: 'sledgehammer/rpi4/rpi/root.squashfs'
  - Name: rpi4b-cmdline.txt
    Path: cmdline.txt
    Contents: |
      snd_bcm2835.enable_hdmi=1 dwc_otg.lpm_enable=0 console=serial0,115200 console=tty1 fsck.repair=yes fsck.mode=auto elevator=deadline rootwait cgroup_memory=1 cgroup_enable=memory initrd=stage1.img rw BOOTIF=discovery provisioner.web={{.ProvisionerURL}}
  - Name: rpi4b-config.txt
    Path: config.txt
    Contents: |
      # uncomment if you get no picture on HDMI for a default "safe" mode
      hdmi_safe=1

      # uncomment this if your display has a black border of unused pixels visible
      # and your display can output without overscan
      disable_overscan=1

      # uncomment the following to adjust overscan. Use positive numbers if console
      # goes off screen, and negative if there is too much border
      #overscan_left=16
      #overscan_right=16
      #overscan_top=16
      #overscan_bottom=16

      # uncomment to force a console size. By default it will be display's size minus
      # overscan.
      #framebuffer_width=1280
      #framebuffer_height=720

      # uncomment if hdmi display is not detected and composite is being output
      #hdmi_force_hotplug=1

      # uncomment to force a specific HDMI mode (this will force VGA)
      #hdmi_group=1
      #hdmi_mode=1

      # uncomment to force a HDMI mode rather than DVI. This can make audio work in
      # DMT (computer monitor) modes
      #hdmi_drive=2

      # uncomment to increase signal to HDMI, if you have interference, blanking, or
      # no display
      #config_hdmi_boost=4

      # uncomment for composite PAL
      #sdtv_mode=2

      # Uncomment some or all of these to enable the optional hardware interfaces
      #dtparam=i2c_arm=on
      #dtparam=spi=on
      #dtparam=i2s=on

      # Uncomment this to enable infrared communication.
      #dtoverlay=gpio-ir,gpio_pin=17
      #dtoverlay=gpio-ir-tx,gpio_pin=18

      # Enable audio (loads snd_bcm2835)
      dtparam=audio=on

      [pi4]
      dtoverlay=vc4-fkms-v3d
      max_framebuffers=2
      arm_64bit=1
      #device_tree_address=0x03000000

      [all]
      #dtoverlay=vc4-fkms-v3d
      kernel {{.Env.PathForArch "tftp" (.Env.KernelFor "rpi4") "rpi4"}}
      initramfs {{.Env.JoinInitrdsFor "tftp" "rpi4"}} followkernel
  - Name: "pxelinux"
    Path: "pxelinux.cfg/default"
    Contents: |
      DEFAULT discovery
      PROMPT 0
      TIMEOUT 10
      LABEL discovery
        KERNEL {{.Env.PathFor "tftp" .Env.Kernel}}
        INITRD {{.Env.JoinInitrds "tftp"}}
        APPEND {{.BootParams}}
        IPAPPEND 2
  - Name: "ipxe"
    Path: "default.ipxe"
    Contents: |
      #!ipxe
      chain {{.ProvisionerURL}}/${netX/mac}.ipxe && exit 1 || goto chainip
      :chainip
      chain {{.ProvisionerURL}}/${netX/ip}.ipxe && exit 1 || goto sledgehammer
      :sledgehammer
      chain {{.ProvisionerURL}}/${builtin/buildarch}.ipxe
  - Name: "ipxe-i386"
    Path: "i386.ipxe"
    Contents: |
      #!ipxe
      kernel {{.Env.PathForArch "http" (.Env.KernelFor "amd64") "amd64"}} {{.BootParamsFor "amd64"}} BOOTIF=01-${netX/mac:hexhyp}
      {{range $initrd := .Env.InitrdsFor "amd64"}}
      module {{$.Env.PathForArch "http" $initrd "amd64"}}
      {{end}}
      boot
  - Name: "ipxe-x86_64"
    Path: "x86_64.ipxe"
    Contents: |
      #!ipxe
      kernel {{.Env.PathForArch "http" (.Env.KernelFor "amd64") "amd64"}} {{.BootParamsFor "amd64"}} BOOTIF=01-${netX/mac:hexhyp}
      {{range $initrd := .Env.InitrdsFor "amd64"}}
      module {{$.Env.PathForArch "http" $initrd "amd64"}}
      {{end}}
      boot
  - Name: "ipxe-arm64"
    Path: "arm64.ipxe"
    Contents: |
      #!ipxe
      kernel {{.Env.PathForArch "http" (.Env.KernelFor "arm64") "arm64"}} {{.BootParamsFor "arm64"}} BOOTIF=01-${netX/mac:hexhyp}
      {{range $initrd := (.Env.InitrdsFor "arm64")}}
      module {{$.Env.PathForArch "http" $initrd "arm64"}}
      {{end}}
      boot
  - Name: "grub"
    Path: "grub/grub.cfg"
    Contents: |
      if test -s (tftp)/grub/${net_default_mac}.cfg; then
        echo "Booting via MAC"
        source (tftp)/grub/${net_default_mac}.cfg
      elif test -s (tftp)/grub/${net_default_ip}.cfg; then
        echo "Booting via IP"
        source (tftp)/grub/${net_default_ip}.cfg
      else
        echo "Booting discovery"
        source (tftp)/grub/discovery.cfg
      fi
  - Name: "grub-secure-discovery"
    Path: "sledgehammer/baad16af1d185f87450b01cce24cf2c15be40b64/grub.cfg"
    ID: allarch-grub.tmpl
  - Name: "grub-discovery"
    Path: "grub/discovery.cfg"
    ID: allarch-grub.tmpl
  - Name: "common-bootstrap.sh"
    Path: "machines/common-bootstrap.sh"
    ID: discovery-common-bootstrap.sh.tmpl
  - Name: "join-up.sh"
    Path: "machines/join-up.sh"
    Contents: |
      #!/bin/bash
      # Register Cloud Machines into Digital Rebar
      # Copyright 2018, RackN
      #
      # Licensed under the Apache License, Version 2.0 (the "License");
      # you may not use this file except in compliance with the License.
      # You may obtain a copy of the License at
      #
      #  http://www.apache.org/licenses/LICENSE-2.0
      #
      # Unless required by applicable law or agreed to in writing, software
      # distributed under the License is distributed on an "AS IS" BASIS,
      # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      # See the License for the specific language governing permissions and
      # limitations under the License.
      #
      # To use this script start your machine with:
      #   #!/bin/bash
      #   curl -fsSL [internal ip]:8091/machines/join-up.sh | sudo bash --
      #
      # This comment allows this script to function as a Cumulus ZTP script.
      # CUMULUS-AUTOPROVISIONING

      export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin
      set -x
      curl -ko /tmp/discovery-common-bootstrap.sh \
          '{{.ApiURL}}/machines/common-bootstrap.sh'

      . /tmp/discovery-common-bootstrap.sh

      find_by_whoami ||
          find_by_saved_uuid ||
          find_by_hwaddrs ||
          find_by_kernel_cmdline ||
          find_by_hostname ||
          create_machine ||
          cannot_find_or_create
      switch_to_control
  - Name: "start-up.sh"
    Path: "machines/start-up.sh"
    Contents: |
      #!/bin/bash
      export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

      curl -o /tmp/discovery-common-bootstrap.sh \
          '{{.ProvisionerURL}}/machines/common-bootstrap.sh'

      . /tmp/discovery-common-bootstrap.sh
      # Sigh, stuff is broken in sledgehammer-start-up.sh
      runningLink="$(networkctl |awk "/$BOOTDEV/ {print \$1}"|head -1)"
      leaseFile="/var/run/systemd/netif/leases/$runningLink"
      dhcp_param() {
          awk -F= "/^$1/ {print \$2}" < "$leaseFile"
      }
      if [[ -e $leaseFile ]] ; then
          HOSTNAME="$(dhcp_param HOSTNAME)"
          DOMAIN="$(dhcp_param DOMAINNAME)"
          DNS_SERVERS="$(dhcp_param DNS)"
          IP="$(dhcp_param ADDRESS)"
      fi
      [[ $DOMAIN ]] || DOMAIN="unspecified.domain.local"
      [[ $DNS_SERVERS ]] || DNS_SERVERS="8.8.8.8"
      if [[ ! $IP ]]; then
          bootdev_ip4_re='inet ([0-9.]+)/([0-9]+)'
          bootdev_ip6_re='inet6 ([0-9a-fA-F:.]+)/([0-9]+) scope global'
          if [[ $(ip -4 -o addr show dev $BOOTDEV) =~ $bootdev_ip4_re ]]; then
              IP="${BASH_REMATCH[1]}"
          else
              if [[ $(ip -6 -o addr show dev $BOOTDEV | grep "scope global" | head -1) =~ $bootdev_ip6_re ]]; then
                  IP="${BASH_REMATCH[1]}"
              fi
          fi
      fi
      if [[ ! $HOSTNAME ]]; then
          case {{ .Param "discovery-hostname-selector" }} in
            d-mac) echo "Using default dMAC hostname method, skipping reverse IP lookup."
            ;;
            reverse-dns)
              # Try DNS reverse lookup
              candidate="$(getent hosts $IP |awk "/$IP/ {print \$2}" |head -1)"
              [[ $candidate && $candidate != localhost* ]] && HOSTNAME="$candidate" || true
              [[ -z "$HOSTNAME" ]] \
                && echo "No reverse DNS record found for '$IP', reverting to default dMAC hostname." \
                || echo "Reverse DNS record lookup candidate of '$HOSTNAME' found..."
            ;;
            external-template)
              {{ if .Param "discovery-hostname-template" -}}
              {{ $templateName := (.Param "discovery-hostname-template") -}}
              echo "Using external template '{{ $templateName }}' to set hostname."

              {{ .CallTemplate $templateName .}}

              [[ -z "$HOSTNAME" ]] && echo "External template did not set HOSTNAME, falling back to dMAC hostname." || true
              {{ else -}}
              echo "WARNING: No 'discovery-hostname-template' set. Defaulting to dMAC hostname."
              {{ end -}}
            ;;
            random)
              echo "Starting random hostname generation."
              HOSTNAME=$(pwmake 256 | tr -dc 'a-zA-Z' | fold -w 8 | head -n 1)
              echo "Setting HOSTNAME to random value of '$HOSTNAME'."
            ;;
          *) echo "NOTICE: unsupported 'discovery-default-hostname-selector', falling through to dMAC hostname."
            ;;
          esac

          if [[ -z $HOSTNAME ]]; then
              # Go with the default.
              default_host=true
              HOSTNAME="d${MAC//:/-}"
          fi
      fi
      # If we have a hostname that is not in FQDN form, append $DOMAIN to it.
      [[ $HOSTNAME = ${HOSTNAME%%.*} ]] && HOSTNAME="${HOSTNAME}.${DOMAIN}"

      # See if we have already been created.
      find_by_whoami ||
          find_by_hwaddrs ||
          find_by_kernel_cmdline ||
          create_machine 5 ||
          cannot_find_or_create

      json="$(drpcli machines show $RS_UUID --slim Params,Meta)"
      # If we did not get a hostname from DHCP, get it from DigitalRebar Provision.
      if [[ $default_host ]]; then
          HOSTNAME="$(jq -r '.Name' <<< "$json")"
      fi
      if [ -f /etc/sysconfig/network ] ; then
          sed -i -e "s/HOSTNAME=.*/HOSTNAME=${HOSTNAME}/" /etc/sysconfig/network
      fi
      echo "${HOSTNAME#*.}" >/etc/domainname
      hostname "$HOSTNAME"

      # Force reliance on DNS
      echo '127.0.0.1 localhost' >/etc/hosts
      switch_to_control
      # This last line is required to let Sledgehammer know it has loaded a valid start-up.sh
      # Do not alter or remove it.
      # /tmp/control.sh

  - Name: "esxi-join-up.py"
    Path: "machines/esxi-join-up.py"
    ID: esxi-join-up.py.tmpl
