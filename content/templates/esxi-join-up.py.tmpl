import argparse
import configparser
import json
import logging
import os
import subprocess
import sys

sys.path.append("/opt/rackn/drpy")
try:
    from drpy.api.client import Client
    from drpy.models.machine import Machine
    from drpy.models.whoami import WhoAmI
    from drpy.cli import cli
except ImportError:
    print("DRP-Agent vib has not been installed.")
    print("DRP-Agent can be retrieved from your local DRP endpoint.")
    print("Example: http://mydrp.local:8091/files/plugin_providers/vmware/DRP-Agent.vib")
    raise SystemError


# build cli parser
def parser() -> argparse.ArgumentParser:
    p = argparse.ArgumentParser(
        description="Standard Options for ESXi Join Script"
    )
    p.add_argument(
        "-d",
        "--debug",
        action="store_true",
        help="Enable debug logging output."
    )
    return p


# Verify Pre-reqs
def verify_preflight() -> bool:
    cmd = "localcli --formatter json software vib list"
    vib_objs = _run(cmd)
    packages = ["DRP-Agent", "DRP-Firewall-Rule"]
    pkgs = json.loads(vib_objs.stdout)
    found = [p for p in pkgs if p['Name'] in packages]
    return len(packages) == len(found)


# Gather System Info
def get_macs() -> list:
    """
    Return a list of MAC addresses found on the system.

    :return:
    """
    cmd = "localcli --formatter json network nic list"
    net_objs = _run(cmd)
    net_json = json.loads(net_objs.stdout)
    return [mac['MAC Address'] for mac in net_json]


# Get system Arch
def get_arch() -> str:
    """
    Return the arch of the system as reported by uname -m

    :return:
    """
    cmd = "uname -m"
    arch = _run(cmd)
    arch = arch.stdout.rstrip()
    amd64 = ['amd64', 'x86_64']
    aarm64 = ['arm64', 'aarch64']
    if arch in amd64:
        arch = 'amd64'
    if arch in aarm64:
        arch = 'arm64'
    return arch


# Get host name
def get_name() -> str:
    cmd = "localcli --formatter json system hostname get"
    name = _run(cmd)
    n = json.loads(name.stdout)
    return n["Fully Qualified Domain Name"]


# Send WHOAMI
def whoami(drpclient, payload) -> WhoAmI:
    """

    :param payload:
    :param drpclient:
    :type drpclient: Client
    :return:
    """
    who_data = drpclient.post("whoami", payload)
    if who_data.get('Error', None) is not None:
        logger.debug("Unable to create WhoAmI request.")
        logger.debug("Error: {}".format(who_data.get("Error")))
        print("################################################")
        print("Unable to complete whoami request.")
        msgs = " ".join(e for e in who_data.get("Error").get("Messages"))
        print("{}".format(msgs))
        print("################################################")
        raise SystemExit
    w = WhoAmI(**who_data)
    return w


# Register
def register(drpclient=None, machine=None) -> Machine:
    if machine is None:
        print("Unable to register an empty Machine.")
        raise SystemError
    if drpclient is None:
        print("Unable to connect to drp with None client.")
        raise SystemError
    m_obj = drpclient.post("machines", machine)
    logger.debug(m_obj)
    return Machine(**m_obj)


def get_drpy_conf(drpclient, machine_uuid) -> str:
    """

    :param drpclient:
    :type drpclient: Client
    :param machine_uuid:
    :return:
    """
    resource = "machines/{}/drpy.conf".format(machine_uuid)
    drpclient.endpoint = "{{.ProvisionerURL}}"
    temp_res = drpclient.get(resource)
    return temp_res


def kill_drpy():
    pid_file = "/opt/rackn/drpy/rackn-agent.sh.pid"
    if os.path.isfile(pid_file):
        with open(pid_file, 'r') as f:
            pid = f.read()
        pid = pid.rstrip()
        stats = _run("kill -9 {}".format(pid))
        if stats.returncode == 0:
            os.unlink(pid_file)
            return
        if 'No such process' in stats.stderr:
            os.unlink(pid_file)
            return
        logger.error("Unable to kill RackN Agent {}".format(stats.stderr))
        raise SystemError
    logger.error("No PID file found for RackN Agent.")
    logger.error("System in unexpected state.")
    raise SystemError


def _run(cmd) -> subprocess.CompletedProcess:
    """
    Execute a subprocess.run on cmd and return
    the completed process.

    :param cmd:
    :return:
    """
    ret = subprocess.run(
        cmd,
        stderr=subprocess.PIPE,
        stdout=subprocess.PIPE,
        shell=True,
        universal_newlines=True
    )
    return ret


if __name__ == "__main__":
    # parse the cli args
    args = parser().parse_args()
    endpoint = "{{.ApiURL}}"
    logger = logging.getLogger('drpy')
    ch = logging.StreamHandler()
    logger.setLevel(logging.INFO)
    ch.setLevel(logging.INFO)
    if args.debug:
        logger.setLevel(logging.DEBUG)
        ch.setLevel(logging.DEBUG)
    logger.addHandler(ch)
    if not verify_preflight():
        print("DRP-Firewall-Rule vib missing from system.")
        print("DRP-Agent and DRP-Firewall-Rule vib required before join-up can run.")
        raise SystemError
    # setup the client
    kill_drpy()
    client = Client(endpoint=endpoint, token="{{.GenerateToken}}")
    macs = get_macs()
    send = {"MacAddrs": macs}
    who = whoami(client, send)
    logger.debug(who)
    if who.__dict__.get("Result", {}).get("Score", 0) >= 100:
        print("Machine already found in inventory.")
        print("Suspected machine UUID: {}".format(who.Result['Uuid']))
        print("Identifiers used to make match: {}".format(macs))
        raise SystemExit
    reg = {
        "HardwareAddrs": macs,
        "Name": get_name(),
        "Arch": get_arch(),
        "Workflow": "esxi-join-local"
    }
    m = register(client, reg)
    logger.info("Added machine to DRP inventory: {} -> {}".format(m.Name,
                                                                  m.Uuid))
    # build config
    agent_conf = get_drpy_conf(client, m.Uuid)
    agent_conf_par = configparser.ConfigParser()
    agent_conf_par.read_string(agent_conf)
    vols = cli.get_volumes(vol_filter="vfat")
    for vol in vols:
        if not os.path.isdir(vol+"/rackn"):
            os.makedirs(vol+"/rackn")
        c_file = "{}/rackn/drpy.conf".format(vol)
        with open(c_file, 'w') as conf:
            agent_conf_par.write(conf)
    start_agent = "/etc/init.d/rackn-agent.sh start"
    os.system(start_agent)
    print("done")
