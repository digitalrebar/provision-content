{{/* ***********************************************************************
      This template parses the 'network-data' structure and builds up
      Variables and a data structure for Shell, Python, or Powershell.
      The output is determined by the value of the Param 'network-data-
      output-type' which defaults to "shell".

      Shell output type is also written in VMware ESXi busybox shell
      compatible format, which means the ASsociative Array will NOT be
      written if OS.Env.Family is set to "vmware" when the template is
      rendered.

      The following rules are observed in parsing the 'network-data'
      structure.  For each processing step, and values found in previous
      steps will be replaced.  This creates an "order of precedence" in the
      processing as follows:

        * DNS and NTP server info will be evaluated in "all" tag first
        * the tagged "prov" entries will be parsed
        * the tagged "prod" entries will be parsed
        * the tag defined in the 'network-data-tag' Param will be parsed

      In all cases, the values found and processed will be converted to
      string type values.  The DNS and NTP servers data will be parsed
      and added as a space separate String from the found values.

      The dns_servers and ntp_servers are not returned in any array type
      as some OSes that we support (namely VMware ESXi) shell does not
      support any array types; and much more primitive constructs need
      to be used to support them.

      Routes entries ('routes') will NOT be parsed and handled by this
      template.  See the 'netowork-manage-routes' task in the DRP
      Community Content pack for handling route parsing rules.

      The below Variable definitions define what is available for
      subsequent templates to consume.

      The supported keys in the network-data structure will be set to empty
      string if no data is found.

      No error checking is provided for situations (eg) where dhcp
      is set to "true", but IP address, netmask, and default GW were
      provided.  Operator must apply appropriate logic as needed.

************************************************************************* */ -}}

{{- /* all type values are Strings, DNS and NTP is space separated values */ -}}
{{- $name        := "" }} {{- /* the name field value for $tag            */ -}}
{{- $tag         := "" }} {{- /* the final tag that data originates from  */ -}}
{{- $dns         := "" }} {{- /* array - DNS server addresses             */ -}}
{{- $ntp         := "" }} {{- /* array - NTP server addresses             */ -}}
{{- $dhcp        := "" }} {{- /* true/false if DHCP is defined            */ -}}
{{- $address     := "" }} {{- /* the IP address                           */ -}}
{{- $netmask     := "" }} {{- /* dotted quad netmask; eg '255.255.255.0'  */ -}}
{{- $cidr        := "" }} {{- /* the CIDR bits of netmask; eg '24'        */ -}}
{{- $gateway     := "" }} {{- /* the default gateway                      */ -}}
{{- $vlan        := "" }} {{- /* the VLAN tag for the network             */ -}}
{{- $mtu         := "" }} {{- /* the packet frame size                    */ -}}
{{- $interface   := "" }} {{- /* network interface name in the target OS  */ -}}

{{- $NETDATA := dict }}
{{- $_ := set $NETDATA "name" "" }}
{{- $_ := set $NETDATA "tag" "" }}
{{- $_ := set $NETDATA "dns_servers" "" }}
{{- $_ := set $NETDATA "ntp_servers" "" }}
{{- $_ := set $NETDATA "dhcp" "" }}
{{- $_ := set $NETDATA "address" "" }}
{{- $_ := set $NETDATA "netmask" "" }}
{{- $_ := set $NETDATA "cidr" "" }}
{{- $_ := set $NETDATA "gateway" "" }}
{{- $_ := set $NETDATA "vlan" "" }}
{{- $_ := set $NETDATA "mtu" "" }}
{{- $_ := set $NETDATA "interface" "" }}

{{- if .ParamExists "network-data" -}}
  {{ $nd := .ComposeParam "network-data" -}}
  {{ if hasKey $nd "prov" }}{{ $tag = "prov" }}{{ end -}}
  {{ if hasKey $nd "prod" }}{{ $tag = "prod" }}{{ end -}}
  {{ if .Param "network-data-tag" }}{{ $tag = ( .ParamExpand "network-data-tag" ) }}{{ end -}}

  {{ if hasKey $nd "all" -}}
    {{ $all := ( get $nd "all" ) -}}
    {{ if hasKey $all "dns-servers" }}{{ $dns = (get $all "dns-servers" ) }}{{ end -}}
    {{ if hasKey $all "ntp-servers" }}{{ $ntp = (get $all "ntp-servers" ) }}{{ end -}}
  {{ end -}}

  {{ if hasKey $nd $tag -}}
  {{ $data := ( get $nd $tag ) -}}

  {{ if ( hasKey $data "dhcp" ) -}}
    {{ $_dyn := ( ( get $data "dhcp" ) | toString ) -}}
    {{ if or ( eq ( lower $_dyn ) "yes" ) ( eq ( lower $_dyn ) "on" ) ( eq ( lower $_dyn ) "true" ) -}}
      {{ $_ := set $NETDATA "dhcp" "true" -}}
    {{ end -}}
  {{ end -}}

  {{ if and (hasKey $data "address") (hasKey $data "netmask") -}}
    {{ $_ := set $NETDATA "address" ( trim ( get $data "address" ) ) -}}
    {{ $_ := set $NETDATA "netmask" ( trim ( get $data "netmask" ) ) -}}
    {{ $_ := set $NETDATA "cidr" ( .NetmaskToCIDR  ( get $data "netmask" ) ) -}}
  {{ end -}}
  {{ if hasKey $data "gateway" }}{{ $_ := set $NETDATA "gateway" ( trim ( get $data "gateway" ) ) }}{{ end -}}
  {{ if hasKey $data "vlan" }}{{ $_ := set $NETDATA "vlan" ( trim ( ( get $data "vlan" ) | toString ) ) }}{{ end -}}
  {{ if hasKey $data "mtu" }}{{ $_ := set $NETDATA "mtu" ( trim ( ( get $data "mtu" ) | toString ) ) }}{{ end -}}
  {{ if hasKey $data "interface" }}{{ $_ := set $NETDATA "interface" ( trim ( get $data "interface" ) ) }}{{ end -}}
  {{ if hasKey $data "dns-servers" }}{{ $dns = ( get $data "dns-servers" ) }}{{ end -}}
  {{ if hasKey $data "ntp-servers" }}{{ $ntp = ( get $data "ntp-servers" ) }}{{ end -}}

  {{ end -}}{{- /* hasKey $tag */ -}}

{{ else -}} {{- /* if ParamExists network-data */ -}}
            {{- /* no network-data Param was found */ -}}
{{ end -}}  {{- /* if ParamExists network-data */ -}}

{{ $output := ( .Param "network-data-output-type") -}}
{{ $debug := ( .Param "network-data-parser-debug") -}}

{{ $_p := "" -}}
{{ $dsrvr := "" -}}
{{ $nsrvr := "" -}}
{{ if eq $output "powershell" -}}{{ $_p ="$" }}{{ end -}}
{{ if $dns }}{{ range $_d := $dns }}{{ $dsrvr = ( cat $_d $dsrvr ) }}{{ end }}{{ end -}}
{{ if $ntp }}{{ range $_n := $ntp }}{{ $nsrvr = ( cat $_n $nsrvr ) }}{{ end }}{{ end -}}
{{ $dsrvr = trim $dsrvr -}}
{{ $_ := set $NETDATA "dns_servers" ( trim $dsrvr ) -}}
{{ $_ := set $NETDATA "ntp_servers" ( trim $nsrvr ) -}}

{{- /* GENERATE appropriate shell/python/powershell variable definitions */ -}}

{{- if eq $output  "shell" }}
{{- /* *********************************** SHELL ********************************** */ -}}
###
#  Shell (BASH, SH, ZSH, etc) variable definitions of network-data structure
###
{{ range $key, $val := $NETDATA -}}
_nd_{{ $key }}='{{ $val }}'
{{ end -}}
{{ if eq .Env.OS.Family "vmware" -}}
###
#  >>> VMware ESXi does not support associative arrays, no array rendered for use
#  >>> since 'Env.Os.Family' returned 'vmware'
#
#  >>> use the 'fetch_nd_var()' function to get values (eg 'fetch_nd_var address')
###
{{ else -}}
###
#  Shell (sh/bash/zsh/etc) associative array (VMware ESXi busybox shell does not
#  support this format)
###
declare -A _nd_data
{{ range $key, $val := $NETDATA -}}
  _nd_data[{{ $key }}]='{{ $val }}'
{{ end -}} {{- /* end range $NETDATA */ -}}
{{ end -}} {{- /* end if eq .Env.OS.Family */ -}}
###
#  Given a network-data key name as ARGv1, fetch the value from the associtive
#  array if it exists.  If not, then get the value from the individual variables;
#  for OSes (ESXi, etc) that do not support array variable types.
#
#  example getting MTU value, assuming it's set to '9000':
#    usage:  fetch_nd_var mtu
#  returns:  9000
#
#  First searches _nd_data[mtu] if _nd_data exists.  Otherwise, returns the value
#  from the variable _nd_mtu.
#
#  Returns an empty string if the key has not been assigned any value.
###
fetch_nd_var() {
  local _key="$1"
  local _val=""

  if [[ -n "$_nd_data" ]]
  then
    echo "$_nd_data[$_key]"
  else
    eval _val="\$_nd_${_key}"
    echo "$_val"
  fi
}
{{ if $debug -}}
###
#  enabled Shell debug output because 'network-data-parser-debug' is true
###
echo ""
echo "DEBUG: 'network-data' parsing resulted in the following assignments:"
echo ""
{{ range $key, $val := $NETDATA -}}
printf ">>> %18s :: %s\n" "{{ $key }}" "$_nd_{{ $key }}"
{{ end -}}
###
#  Dump the associative array values
###
echo ""
echo "DEBUG: dump of the _nd_data associative array:"
echo ""
for KEY in "${!_nd_data[@]}"; do printf ">>> %18s = '%s'\n" "[$KEY]" "${_nd_data[$KEY]}" ; done
{{ end -}}

{{ else if eq $output "python" -}}
{{- /* ********************************   PYTHON   ******************************** */ -}}
###
#  Python parsed variable definitions of the network-data structure
###
{{ range $key, $val := $NETDATA -}}
_nd_{{ $key }} = '{{ $val }}'
{{ end -}}
###
#  Python dict format of network-data structure
###
_nd_data = {
{{ range $key, $val := $NETDATA -}}
  "{{ $key }}": "{{ $val }}",
{{ end -}}
}
{{ if $debug -}}
###
#  enabled Python debug output because 'network-data-parser-debug' is true
###
print()
print("DEBUG: 'network-data' parsing resulted in the following assignments:")
print()
{{ range $key, $val := $NETDATA -}}
print(">>> %18s :: %s" % ("{{ $key }}", _nd_{{ $key }}))
{{ end -}}
print()
print("DEBUG: dump of the _nd_data Python dict:")
print()
for key, value in _nd_data.items():
    print(">>> %18s :: %s" % (key, value))
{{ end -}}

{{ else if eq $output "powershell" -}}
{{- /* ******************************** POWERSHELL ******************************** */ -}}
###
#  Powershell network data information
###
{{ range $key, $val := $NETDATA -}}
_nd_{{ $key }} = '{{ $val }}'
{{ end -}}
###
#  Powershell hash table for network data
###
$_nd_data = @{
{{ range $key, $val := $NETDATA -}}
  {{ $key }} = '{{ $val }}';
{{ end -}}
}
{{ if $debug -}}
###
#  enabled Powershell debug output because 'network-data-parser-debug' is true
###
Write-Output ""
Write-Output "DEBUG: 'network-data' parsing resulted in the following assignments:"
Write-Output ""
{{ range $key, $val := $NETDATA -}}
Write-Output ">>> {{ $key }} :: $_nd_{{ $key }}"
{{ end -}}
Write-Output ""
Write-Output "DEBUG: dump of the _nd_data Powershell hash:"
Write-Output ""
$_nd_data | Format-Table
{{ end -}}

{{ else -}}
####
####  FATAL: 'network-data-output-type' unsupported value '{{ .Param "network-data-output-type" }}'
####
####
{{ end -}} {{- /* end if .Param network-data */ -}}

