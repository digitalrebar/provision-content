#!/usr/bin/env bash
# Attempts to automatically select Linux BootEnv version, or set to Operator defined version

###
#  This tool selects the Linux Install BootEnv version to install on the system.
#  The operator may specify a linux via the use of the "linux/install-bootenv"
#  Param (which is an enumerated list), or via use of the override Param if the
#  version is not listed in the enum list ("linux/install-bootenv-override").
#
#  The linux/install-bootenv will use a map to get the bootenv of choice.
#  The map can be overriden by using linux/install-bootenv-map.
###
xiterr() { [[ "$1" =~ ^[0-9]+$ ]] && { XIT=$1; shift; } || XIT=1; printf "FATAL: $*\n"; exit $XIT; }
{{ template "setup.tmpl" . }}

set -e

{{ if .ParamExists "linux/install-bootenv-override" -}}
BOOTENV="{{ .Param "linux/install-bootenv-override"}}"
{{ else -}}
BOOTENV_INDEX="{{ .Param "linux/install-bootenv" }}"
BOOTENV=$(echo '{{ .ParamAsJSON "linux/install-bootenv-map" }}' | jq -r ".[\"$BOOTENV_INDEX\"]")
{{ end -}}

[[ -z "$BOOTENV" ]] && xiterr 1 "Bootenv is unset, this shouldn't have happend."
[[ "$BOOTENV" == "null" ]] && xiterr 1 "Bootenv is not in map, this shouldn't have happend."

if [[ "$BOOTENV" =~ -install$ ]]
then
  echo "Specified bootenv ends with '-install' - this is good!"
else
  echo "Specified bootenv does not end with '-install' - this is bad!"
  exit 1
fi

echo ">>> Requesting install of BootEnv: '$BOOTENV'"

# test media Install URL is available
check_media(){
  INST="{{.ProvisionerURL}}/${BOOTENV/-install/}/install"
  if ( curl -fsSL ${INST} > /dev/null 2>&1  )
  then
    echo "BootEnv install media is available via '$INST'" ${HIDE_OUTPUT}
  else
    echo ">>> Unable to find BootEnv install media at '$INST'."
    echo ">>> Did you upload the BootEnv ISO or set the mirror correctly?"
    exit 1
  fi
}

if ( drpcli bootenvs exists $BOOTENV > /dev/null 2>&1 || true )
then
  HIDE_OUTPUT=' > /dev/null'
  [[ $RS_DEBUG_ENABLE ]] && HIDE_OUTPUT=""

  # test that our ISO exists and has been exploded - or the mirror content is available
  ISO=$(drpcli bootenvs show $BOOTENV | jq -r '.OS.IsoFile')
  if [[ -n "$ISO" && $(drpcli isos exists $ISO 2> /dev/null ) ]]
  then
    echo "ISO media for BootEnv '$BOOTENV' exists." ${HIDE_OUTPUT}
  else
    echo ">>> NOTICE:  No ISO media for BootEnv '$BOOTENV' found via DRP Endpoint."
  fi

  check_media

  eval drpcli machines tasks add {{.Machine.UUID}} at 0 bootenv:${BOOTENV}${HIDE_OUTPUT}
  echo "Successfully set machine Bootenv to '${BOOTENV}'"
else
  xiterr 1 "selected bootenv '$BOOTENV' does not exist"
fi

exit 0
