#!/usr/bin/env python3
# cheap and dirty "API" calls to DRP

###
#  USAGE Examples (assuming this template is rendered as '/tmp/simple-params.py'):
#
#    python3 /tmp/simple-params.py get foobar
#      Gets the Param value named "foobar" if exists
#      if not, returns the bare string 'null'
#
#    python3 /tmp/simple-params.py add foobar blatz
#      Adds (POST) the Param "foobar" with value "blatz" as type String
#      - ONLY supports String type values
#
#    python3 /tmp/simple-params.py add-raw foobar 3333
#      Adds (POST) the Param "foobar" with a number/integer value of 3333
#      - supports bare Number/Integer types
#      - supports raw true / false values
#      - supports JSON / Object structures
#
#    python3 /tmp/simple-params.py delete foobar
#      Deletes (DELETE) param "foobar"
###

# please don't laugh at my miserable python ...

import os, sys, urllib, urllib.request, urllib.parse, ssl, time, re

args = len(sys.argv) - 1
if args < 2:
  print("FATAL: Requires at least 2 input arguments: 'action' 'param' ['value']")
  print("       Where 'action' can be one of 'get', 'add', or 'delete'")
  sys.exit("       'value' is required only for 'add'")

action = sys.argv[1]
param = sys.argv[2]

try:
  ep = os.environ['RS_ENDPOINT']
except:
  ep = 'https://147.75.65.75:8092'

try:
  uuid = os.environ['RS_UUID']
except:
    uuid = '53f8777f-d3cf-477f-880e-6b937c536784'

if action == "get":
  if args != 2:
    sys.exit("FATAL: 'get' can only be accompanied by Param to get")
  method = "GET"
  value = str.encode("")
elif action == "delete":
  if args != 2:
    sys.exit("FATAL: 'delete' can only be accompanied by Param to remove")
  method = "DELETE"
  value = str.encode("")
elif action == "add":
  if args != 3:
    sys.exit('FATAL: Requires 3 argumens with "add".')
  method = "POST"
  # this is all wrong for JSON input
  value = str.encode('"' + sys.argv[3] + '"')
elif action == "add-raw":
  if args != 3:
    sys.exit('FATAL: Requires 3 argumens with "add-raw".')
  method = "POST"
  value = str.encode(sys.argv[3])
else:
  sys.exit("FATAL: must specify 'action' of either 'add' or 'delete' (invalid: '" + action + "').")

# if VMkernel we do special things
system = os.uname().sysname

# see if we golang template rendered ourself - if not fallback
apiurl='{{.ApiURL}}'
if re.search(r'.ApiURL', apiurl):
  url = ep + '/api/v3/machines/' + uuid + '/params/' + urllib.parse.quote(param)
  auth = 'Basic cm9ja2V0c2thdGVzOnIwY2tldHNrOHRz'
else:
  url = '{{.ApiURL}}/api/v3/machines/{{.Machine.UUID}}/params/' + urllib.parse.quote(param)
  auth = 'Bearer {{.GenerateInfiniteToken}}'

# really chould check that firewall vib in place an ports open
if system == "VMkernel":
  os.system("localcli network firewall set --enabled false")

# really should be using proper PATCH method here
req = urllib.request.Request(url, method=method, data=value)

req.add_header('Content-Type', 'application/json')
req.add_header('Authorization', auth)

try:
  response = urllib.request.urlopen(req,context=ssl.SSLContext(ssl.PROTOCOL_SSLv23))
  if action == "get":
    print(response.read().decode("utf-8").replace('"', ''))
except urllib.error.HTTPError as err:
  if action == "delete":
    if err.code == 404:
      print("Param '" + param + "' did not exist on machine.  Ignoring and continuing.")
  elif action == "add":
    if err.code == 409:
      print("FATAL: Unable to set param '" + param + "' to value '" + value.decode("utf-8") + "'.")
  else:
    raise

if system == "VMkernel":
  os.system("localcli network firewall set --enabled true")

