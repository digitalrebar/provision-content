#!/usr/bin/env sh
# Get the OS identity and write it to the Machine param 'os-identity'

###
#  Utilizes uname to get basic OS information.  Writes to the machine object.
#  For ESXi - the 'simple-params.py' python helper must be rendered to the normal
#  (/tmp/simple-params.py or alternatively as /tmp/esxi-params.py) location.
#
#  Because this may be executed in the limited VMware ESXi shell, we can not use
#  the "setup.tmpl".  Generate our own UUID and Token.
#
#  Future enhancements may provide additional Param values to identify the OS
#  environment more specifically.
###

{{ if eq (.Param "rs-debug-enable") true }}set -x{{ end }}
set -e

SYS=$(uname -s)
export RS_ENDPOINT='{{ .ApiURL }}'
export RS_UUID='{{ .Machine.UUID }}'
export RS_TOKEN='{{ .GenerateInfiniteToken }}'

update_via_python() {
  local _param="$1"
  shift
  local _ident="$*"
  local _get=""

  if [[ -r "/tmp/simple-params.py" ]]
  then
    PY=/tmp/simple-params.py
  elif [[ -r "/tmp/esxi-params.py" ]]
  then
    PY=/tmp/esxi-params.py
  else
    xiterr 1 "Required /tmp/simple-params.py or /tmp/esxi-params.py not available."
  fi

  _get=$(python3 $PY get "$_param")
  [[ "$_get" != "null" ]] && python3 $PY remove "$_param"
  python3 $PY add "$_param" "$_ident"

  _get=$(python3 $PY get "$_param")
  [[ "$_get" != "null" ]] && echo "Successfully wrote '$_param' as value '$_ident'."
}

update_via_drpcli() {
  local _param="$1"
  shift
  local _ident="$*"

  which drpcli > /dev/null 2>&1 || xiterr 1 "Unable to find 'drpcli' binary to use in PATH ('$PATH')."

  _get=$(drpcli machines get $RS_UUID param "$_param" | sed 's/"//g')
  [[ "$_get" != "null" ]] && drpcli machines remove $RS_UUID param "$_param"
  drpcli machines add $RS_UUID param "$_param" to "$_ident" > /dev/null

  _get=$(drpcli machines get $RS_UUID param "$_param" | sed 's/"//g')
  [[ "$_get" != "null" ]] && echo "Successfully wrote '$_param' as value '$_ident'."
}

update_values() {
  local _key="$1"
  shift 1
  local _val="$*"

  case $SYS in
    VMkernel) update_via_python "os-identity/$_key" "vmware"  ;;
    Linux)    update_via_drpcli "os-identity/$_key" "linux"  ;;
    *)  xiterr 1 "Unsupported system ('$SYS') as reported by 'uname -s'." ;;
  esac
}

echo ">>> Beginning 'os-identity' check process."

# someday, this might do more than just "system" type
update_values system "$SYS"

echo ">>> Done."

rm -f $PY
exit 0
